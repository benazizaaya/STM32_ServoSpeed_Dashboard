
servoo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006b80  08006b80  00016b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f34  08006f34  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f3c  08006f3c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000022c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000408  20000408  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bcf1  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c0c  00000000  00000000  0002bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d10  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a2f  00000000  00000000  0002e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b1f  00000000  00000000  0002f28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f499  00000000  00000000  00050dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc6cc  00000000  00000000  00060247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048b8  00000000  00000000  0012c914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001311cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b68 	.word	0x08006b68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006b68 	.word	0x08006b68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f023 030f 	bic.w	r3, r3, #15
 8000eb4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	f043 030c 	orr.w	r3, r3, #12
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	f043 030c 	orr.w	r3, r3, #12
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2304      	movs	r3, #4
 8000eee:	214e      	movs	r1, #78	; 0x4e
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <lcd_send_cmd+0x5c>)
 8000ef2:	f001 f94f 	bl	8002194 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f8 	.word	0x200001f8

08000f04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f023 030f 	bic.w	r3, r3, #15
 8000f14:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	f043 030d 	orr.w	r3, r3, #13
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0309 	orr.w	r3, r3, #9
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	f043 030d 	orr.w	r3, r3, #13
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f043 0309 	orr.w	r3, r3, #9
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	214e      	movs	r1, #78	; 0x4e
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <lcd_send_data+0x5c>)
 8000f52:	f001 f91f 	bl	8002194 <HAL_I2C_Master_Transmit>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001f8 	.word	0x200001f8

08000f64 <lcd_clear>:

void lcd_clear (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000f6a:	2080      	movs	r0, #128	; 0x80
 8000f6c:	f7ff ff9a 	bl	8000ea4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	e005      	b.n	8000f82 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000f76:	2020      	movs	r0, #32
 8000f78:	f7ff ffc4 	bl	8000f04 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b45      	cmp	r3, #69	; 0x45
 8000f86:	ddf6      	ble.n	8000f76 <lcd_clear+0x12>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <lcd_put_cur+0x18>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d005      	beq.n	8000fb4 <lcd_put_cur+0x22>
 8000fa8:	e009      	b.n	8000fbe <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	603b      	str	r3, [r7, #0]
            break;
 8000fb2:	e004      	b.n	8000fbe <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fba:	603b      	str	r3, [r7, #0]
            break;
 8000fbc:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff6e 	bl	8000ea4 <lcd_send_cmd>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <lcd_init>:


void lcd_init (void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fd4:	2032      	movs	r0, #50	; 0x32
 8000fd6:	f000 fcf3 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fda:	2030      	movs	r0, #48	; 0x30
 8000fdc:	f7ff ff62 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fe0:	2005      	movs	r0, #5
 8000fe2:	f000 fced 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fe6:	2030      	movs	r0, #48	; 0x30
 8000fe8:	f7ff ff5c 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fec:	2001      	movs	r0, #1
 8000fee:	f000 fce7 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ff2:	2030      	movs	r0, #48	; 0x30
 8000ff4:	f7ff ff56 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f000 fce1 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ffe:	2020      	movs	r0, #32
 8001000:	f7ff ff50 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(10);
 8001004:	200a      	movs	r0, #10
 8001006:	f000 fcdb 	bl	80019c0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800100a:	2028      	movs	r0, #40	; 0x28
 800100c:	f7ff ff4a 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f000 fcd5 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001016:	2008      	movs	r0, #8
 8001018:	f7ff ff44 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fccf 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff ff3e 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f000 fcc9 	bl	80019c0 <HAL_Delay>
	HAL_Delay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fcc6 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001034:	2006      	movs	r0, #6
 8001036:	f7ff ff35 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 fcc0 	bl	80019c0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001040:	200c      	movs	r0, #12
 8001042:	f7ff ff2f 	bl	8000ea4 <lcd_send_cmd>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001052:	e006      	b.n	8001062 <lcd_send_string+0x18>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff51 	bl	8000f04 <lcd_send_data>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f4      	bne.n	8001054 <lcd_send_string+0xa>
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f000 fc2f 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f8cf 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f000 fa05 	bl	8001490 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001086:	f000 f963 	bl	8001350 <MX_TIM1_Init>
  MX_I2C1_Init();
 800108a:	f000 f933 	bl	80012f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <main+0x17c>)
 8001092:	f002 f8b3 	bl	80031fc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
  lcd_init();  // Initialize the LCD
 8001096:	f7ff ff9b 	bl	8000fd0 <lcd_init>

  	  lcd_put_cur(0, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ff78 	bl	8000f92 <lcd_put_cur>
  	  lcd_send_string("Servo Speed:");
 80010a2:	4854      	ldr	r0, [pc, #336]	; (80011f4 <main+0x180>)
 80010a4:	f7ff ffd1 	bl	800104a <lcd_send_string>
  	  HAL_Delay(200);
 80010a8:	20c8      	movs	r0, #200	; 0xc8
 80010aa:	f000 fc89 	bl	80019c0 <HAL_Delay>
  	 lcd_clear(); // Clear the display
 80010ae:	f7ff ff59 	bl	8000f64 <lcd_clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Mouvement du servo dans la direction ascendante
	      start_time = HAL_GetTick();  // Temps de départ
 80010b2:	f000 fc79 	bl	80019a8 <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <main+0x184>)
 80010ba:	6013      	str	r3, [r2, #0]
	      for(int x = 1000; x < 5200; x += 50)
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e00b      	b.n	80010dc <main+0x68>
	      {
	          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, x);
 80010c4:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <main+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
	          HAL_Delay(delay_time);  // Délai pour simuler le balayage
 80010cc:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <main+0x188>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fc75 	bl	80019c0 <HAL_Delay>
	      for(int x = 1000; x < 5200; x += 50)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3332      	adds	r3, #50	; 0x32
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f241 424f 	movw	r2, #5199	; 0x144f
 80010e2:	4293      	cmp	r3, r2
 80010e4:	ddee      	ble.n	80010c4 <main+0x50>
	      }
	      end_time = HAL_GetTick();  // Temps à la fin du parcours ascendant
 80010e6:	f000 fc5f 	bl	80019a8 <HAL_GetTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a44      	ldr	r2, [pc, #272]	; (8001200 <main+0x18c>)
 80010ee:	6013      	str	r3, [r2, #0]

	      // Calcul du temps total pour la montée
	      uint32_t time_up = end_time - start_time;  // Temps en ms
 80010f0:	4b43      	ldr	r3, [pc, #268]	; (8001200 <main+0x18c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <main+0x184>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	607b      	str	r3, [r7, #4]
	      // Calcul de la vitesse moyenne (angle/durée en ms)
	      servo_speed_up = (float)total_range / time_up * 1000; // Convertir en unité "position/s"
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <main+0x190>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001208 <main+0x194>
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <main+0x198>)
 8001120:	edc3 7a00 	vstr	s15, [r3]

	      // Affichage de la vitesse de montée sur le LCD
	      lcd_put_cur(0, 0); // Première ligne
 8001124:	2100      	movs	r1, #0
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ff33 	bl	8000f92 <lcd_put_cur>
	      sprintf(lcd_buffer, "Up: %.2f", servo_speed_up);
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <main+0x198>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa09 	bl	8000548 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4935      	ldr	r1, [pc, #212]	; (8001210 <main+0x19c>)
 800113c:	4835      	ldr	r0, [pc, #212]	; (8001214 <main+0x1a0>)
 800113e:	f003 fbb5 	bl	80048ac <siprintf>
	      lcd_send_string(lcd_buffer);
 8001142:	4834      	ldr	r0, [pc, #208]	; (8001214 <main+0x1a0>)
 8001144:	f7ff ff81 	bl	800104a <lcd_send_string>

	      HAL_Delay(2000); // Laisser le temps d'afficher
 8001148:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800114c:	f000 fc38 	bl	80019c0 <HAL_Delay>

	      // Mouvement du servo dans la direction descendante
	      start_time = HAL_GetTick();  // Temps de départ
 8001150:	f000 fc2a 	bl	80019a8 <HAL_GetTick>
 8001154:	4603      	mov	r3, r0
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <main+0x184>)
 8001158:	6013      	str	r3, [r2, #0]
	      for(int x = 5200; x > 1000; x -= 20)
 800115a:	f241 4350 	movw	r3, #5200	; 0x1450
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	e00b      	b.n	800117a <main+0x106>
	      {
	          __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, x);
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <main+0x17c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
	          HAL_Delay(delay_time);  // Délai pour simuler le balayage
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <main+0x188>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fc26 	bl	80019c0 <HAL_Delay>
	      for(int x = 5200; x > 1000; x -= 20)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	3b14      	subs	r3, #20
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001180:	dcef      	bgt.n	8001162 <main+0xee>
	      }
	      end_time = HAL_GetTick();  // Temps à la fin du parcours descendant
 8001182:	f000 fc11 	bl	80019a8 <HAL_GetTick>
 8001186:	4603      	mov	r3, r0
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <main+0x18c>)
 800118a:	6013      	str	r3, [r2, #0]

	      // Calcul du temps total pour la descente
	      uint32_t time_down = end_time - start_time;  // Temps en ms
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <main+0x18c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <main+0x184>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	603b      	str	r3, [r7, #0]
	      // Calcul de la vitesse moyenne (angle/durée en ms)
	      servo_speed_down = (float)total_range / time_down * 1000; // Convertir en unité "position/s"
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <main+0x190>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001208 <main+0x194>
 80011b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <main+0x1a4>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]

	      // Affichage de la vitesse de descente sur le LCD
	      lcd_put_cur(1, 0); // Deuxième ligne
 80011c0:	2100      	movs	r1, #0
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fee5 	bl	8000f92 <lcd_put_cur>
	      sprintf(lcd_buffer, "Down: %.2f", servo_speed_down);
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <main+0x1a4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4911      	ldr	r1, [pc, #68]	; (800121c <main+0x1a8>)
 80011d8:	480e      	ldr	r0, [pc, #56]	; (8001214 <main+0x1a0>)
 80011da:	f003 fb67 	bl	80048ac <siprintf>
	      lcd_send_string(lcd_buffer);
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <main+0x1a0>)
 80011e0:	f7ff ff33 	bl	800104a <lcd_send_string>

	      HAL_Delay(2000); // Laisser le temps d'afficher
 80011e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011e8:	f000 fbea 	bl	80019c0 <HAL_Delay>
  {
 80011ec:	e761      	b.n	80010b2 <main+0x3e>
 80011ee:	bf00      	nop
 80011f0:	2000024c 	.word	0x2000024c
 80011f4:	08006b80 	.word	0x08006b80
 80011f8:	200002a4 	.word	0x200002a4
 80011fc:	20000004 	.word	0x20000004
 8001200:	200002a8 	.word	0x200002a8
 8001204:	20000000 	.word	0x20000000
 8001208:	447a0000 	.word	0x447a0000
 800120c:	200002ac 	.word	0x200002ac
 8001210:	08006b90 	.word	0x08006b90
 8001214:	20000294 	.word	0x20000294
 8001218:	200002b0 	.word	0x200002b0
 800121c:	08006b9c 	.word	0x08006b9c

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fb9f 	bl	8004972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <SystemClock_Config+0xcc>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <SystemClock_Config+0xcc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <SystemClock_Config+0xd0>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001294:	23a8      	movs	r3, #168	; 0xa8
 8001296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800129c:	2307      	movs	r3, #7
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fa7d 	bl	80027a4 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b0:	f000 f916 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2105      	movs	r1, #5
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fcde 	bl	8002c94 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012de:	f000 f8ff 	bl	80014e0 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	; 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C1_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <MX_I2C1_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C1_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_I2C1_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_I2C1_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_I2C1_Init+0x50>)
 8001332:	f000 fdeb 	bl	8001f0c <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 f8d0 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001f8 	.word	0x200001f8
 8001348:	40005400 	.word	0x40005400
 800134c:	000186a0 	.word	0x000186a0

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f003 faf2 	bl	8004972 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <MX_TIM1_Init+0x138>)
 8001390:	4a3e      	ldr	r2, [pc, #248]	; (800148c <MX_TIM1_Init+0x13c>)
 8001392:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_TIM1_Init+0x138>)
 8001396:	2253      	movs	r2, #83	; 0x53
 8001398:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <MX_TIM1_Init+0x138>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_TIM1_Init+0x138>)
 80013a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <MX_TIM1_Init+0x138>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_TIM1_Init+0x138>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <MX_TIM1_Init+0x138>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ba:	4833      	ldr	r0, [pc, #204]	; (8001488 <MX_TIM1_Init+0x138>)
 80013bc:	f001 fe76 	bl	80030ac <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013c6:	f000 f88b 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d4:	4619      	mov	r1, r3
 80013d6:	482c      	ldr	r0, [pc, #176]	; (8001488 <MX_TIM1_Init+0x138>)
 80013d8:	f002 f89a 	bl	8003510 <HAL_TIM_ConfigClockSource>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013e2:	f000 f87d 	bl	80014e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e6:	4828      	ldr	r0, [pc, #160]	; (8001488 <MX_TIM1_Init+0x138>)
 80013e8:	f001 feaf 	bl	800314a <HAL_TIM_PWM_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013f2:	f000 f875 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001402:	4619      	mov	r1, r3
 8001404:	4820      	ldr	r0, [pc, #128]	; (8001488 <MX_TIM1_Init+0x138>)
 8001406:	f002 fc5b 	bl	8003cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001410:	f000 f866 	bl	80014e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_TIM1_Init+0x138>)
 800143a:	f001 ffa7 	bl	800338c <HAL_TIM_PWM_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001444:	f000 f84c 	bl	80014e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001460:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_TIM1_Init+0x138>)
 800146c:	f002 fca4 	bl	8003db8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001476:	f000 f833 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800147a:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_TIM1_Init+0x138>)
 800147c:	f000 f8c8 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8001480:	bf00      	nop
 8001482:	3758      	adds	r7, #88	; 0x58
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000024c 	.word	0x2000024c
 800148c:	40010000 	.word	0x40010000

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_GPIO_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_GPIO_Init+0x4c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	2007      	movs	r0, #7
 800152c:	f000 fb1e 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	2312      	movs	r3, #18
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158a:	2304      	movs	r3, #4
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <HAL_I2C_MspInit+0x8c>)
 8001596:	f000 fb1d 	bl	8001bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_TIM_Base_MspInit+0x3c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10d      	bne.n	80015fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_TIM_Base_MspInit+0x40>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_TIM_Base_MspInit+0x40>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_TIM_Base_MspInit+0x40>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40010000 	.word	0x40010000
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <HAL_TIM_MspPostInit+0x68>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11e      	bne.n	8001670 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_TIM_MspPostInit+0x6c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_TIM_MspPostInit+0x6c>)
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_TIM_MspPostInit+0x6c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800164e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001652:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4619      	mov	r1, r3
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_TIM_MspPostInit+0x70>)
 800166c:	f000 fab2 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010000 	.word	0x40010000
 800167c:	40023800 	.word	0x40023800
 8001680:	40021000 	.word	0x40021000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 f956 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_kill>:

int _kill(int pid, int sig)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f2:	f003 f991 	bl	8004a18 <__errno>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2216      	movs	r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
  return -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_exit>:

void _exit (int status)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffe7 	bl	80016e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800171a:	e7fe      	b.n	800171a <_exit+0x12>

0800171c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800172e:	f3af 8000 	nop.w
 8001732:	4601      	mov	r1, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf0      	blt.n	800172e <_read+0x12>
  }

  return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e009      	b.n	800177c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf1      	blt.n	8001768 <_write+0x12>
  }
  return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_close>:

int _close(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
  return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f003 f8f6 	bl	8004a18 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20020000 	.word	0x20020000
 8001858:	00000400 	.word	0x00000400
 800185c:	200002b4 	.word	0x200002b4
 8001860:	20000408 	.word	0x20000408

08001864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a4:	4c0b      	ldr	r4, [pc, #44]	; (80018d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b2:	f7ff ffd7 	bl	8001864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b6:	f003 f8b5 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff fbdb 	bl	8001074 <main>
  bx  lr    
 80018be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80018cc:	08006f44 	.word	0x08006f44
  ldr r2, =_sbss
 80018d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018d4:	20000408 	.word	0x20000408

080018d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_Init+0x40>)
 80018e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_Init+0x40>)
 80018f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_Init+0x40>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f931 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fdec 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f93b 	bl	8001bba <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f000 f911 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000008 	.word	0x20000008
 8001978:	20000010 	.word	0x20000010
 800197c:	2000000c 	.word	0x2000000c

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000010 	.word	0x20000010
 80019a4:	200002b8 	.word	0x200002b8

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200002b8 	.word	0x200002b8

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d005      	beq.n	80019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_Delay+0x44>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e6:	bf00      	nop
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d8f7      	bhi.n	80019e8 <HAL_Delay+0x28>
  {
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000010 	.word	0x20000010

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff47 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff5c 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff8e 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5d 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffb0 	bl	8001b28 <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e16b      	b.n	8001ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 815a 	bne.w	8001ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d130      	bne.n	8001c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0201 	and.w	r2, r3, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d017      	beq.n	8001cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80b4 	beq.w	8001ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a5f      	ldr	r2, [pc, #380]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_GPIO_Init+0x310>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_GPIO_Init+0x314>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02b      	beq.n	8001dfa <HAL_GPIO_Init+0x226>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a51      	ldr	r2, [pc, #324]	; (8001eec <HAL_GPIO_Init+0x318>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x222>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a50      	ldr	r2, [pc, #320]	; (8001ef0 <HAL_GPIO_Init+0x31c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x21e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <HAL_GPIO_Init+0x320>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x21a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4e      	ldr	r2, [pc, #312]	; (8001ef8 <HAL_GPIO_Init+0x324>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x216>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_GPIO_Init+0x328>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x212>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x32c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x20e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <HAL_GPIO_Init+0x330>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x20a>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00e      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dde:	2308      	movs	r3, #8
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e0c:	4935      	ldr	r1, [pc, #212]	; (8001ee4 <HAL_GPIO_Init+0x310>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3e:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	f67f ae90 	bls.w	8001bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40013c00 	.word	0x40013c00

08001f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e12b      	b.n	8002176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fb02 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f70:	f001 f888 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8001f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a81      	ldr	r2, [pc, #516]	; (8002180 <HAL_I2C_Init+0x274>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d807      	bhi.n	8001f90 <HAL_I2C_Init+0x84>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a80      	ldr	r2, [pc, #512]	; (8002184 <HAL_I2C_Init+0x278>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e006      	b.n	8001f9e <HAL_I2C_Init+0x92>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a7d      	ldr	r2, [pc, #500]	; (8002188 <HAL_I2C_Init+0x27c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf94      	ite	ls
 8001f98:	2301      	movls	r3, #1
 8001f9a:	2300      	movhi	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0e7      	b.n	8002176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a78      	ldr	r2, [pc, #480]	; (800218c <HAL_I2C_Init+0x280>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	; (8002180 <HAL_I2C_Init+0x274>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_I2C_Init+0xd4>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	e009      	b.n	8001ff4 <HAL_I2C_Init+0xe8>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_I2C_Init+0x284>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002006:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	495c      	ldr	r1, [pc, #368]	; (8002180 <HAL_I2C_Init+0x274>)
 8002010:	428b      	cmp	r3, r1
 8002012:	d819      	bhi.n	8002048 <HAL_I2C_Init+0x13c>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e59      	subs	r1, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002028:	400b      	ands	r3, r1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_I2C_Init+0x138>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e59      	subs	r1, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fbb1 f3f3 	udiv	r3, r1, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002042:	e051      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002044:	2304      	movs	r3, #4
 8002046:	e04f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d111      	bne.n	8002074 <HAL_I2C_Init+0x168>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e012      	b.n	800209a <HAL_I2C_Init+0x18e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x196>
 800209e:	2301      	movs	r3, #1
 80020a0:	e022      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <HAL_I2C_Init+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e58      	subs	r0, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	440b      	add	r3, r1
 80020b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6809      	ldr	r1, [r1, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6911      	ldr	r1, [r2, #16]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	000186a0 	.word	0x000186a0
 8002184:	001e847f 	.word	0x001e847f
 8002188:	003d08ff 	.word	0x003d08ff
 800218c:	431bde83 	.word	0x431bde83
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
 80021a4:	4613      	mov	r3, r2
 80021a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fbfe 	bl	80019a8 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f040 80e0 	bne.w	800237c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2319      	movs	r3, #25
 80021c2:	2201      	movs	r2, #1
 80021c4:	4970      	ldr	r1, [pc, #448]	; (8002388 <HAL_I2C_Master_Transmit+0x1f4>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f964 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e0d3      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x50>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0cc      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d007      	beq.n	800220a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2210      	movs	r2, #16
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a50      	ldr	r2, [pc, #320]	; (800238c <HAL_I2C_Master_Transmit+0x1f8>)
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f89c 	bl	8002390 <I2C_MasterRequestWrite>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e08d      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002278:	e066      	b.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f9de 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_I2C_Master_Transmit+0x188>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6a39      	ldr	r1, [r7, #32]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f9ce 	bl	80026c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2b04      	cmp	r3, #4
 8002332:	d107      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01a      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d194      	bne.n	800227a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002
 800238c:	ffff0000 	.word	0xffff0000

08002390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d006      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d003      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b8:	d108      	bne.n	80023cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00b      	b.n	80023e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d107      	bne.n	80023e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f84f 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240a:	d103      	bne.n	8002414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e035      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002420:	d108      	bne.n	8002434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	e01b      	b.n	800246c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	11db      	asrs	r3, r3, #7
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0306 	and.w	r3, r3, #6
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f063 030f 	orn	r3, r3, #15
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <I2C_MasterRequestWrite+0xfc>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f875 	bl	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e010      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <I2C_MasterRequestWrite+0x100>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f865 	bl	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00010008 	.word	0x00010008
 8002490:	00010002 	.word	0x00010002

08002494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a4:	e025      	b.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d021      	beq.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff fa7b 	bl	80019a8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d116      	bne.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e023      	b.n	800253a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10d      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4013      	ands	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	e00c      	b.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4013      	ands	r3, r2
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	429a      	cmp	r2, r3
 8002536:	d0b6      	beq.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002550:	e051      	b.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d123      	bne.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002570:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800257a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f043 0204 	orr.w	r2, r3, #4
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e046      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d021      	beq.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7ff f9f9 	bl	80019a8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d116      	bne.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e020      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10c      	bne.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4013      	ands	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e00b      	b.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	43da      	mvns	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d18d      	bne.n	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264c:	e02d      	b.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f878 	bl	8002744 <I2C_IsAcknowledgeFailed>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e02d      	b.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d021      	beq.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7ff f99f 	bl	80019a8 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e007      	b.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d1ca      	bne.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ce:	e02d      	b.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f837 	bl	8002744 <I2C_IsAcknowledgeFailed>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e02d      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d021      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e8:	f7ff f95e 	bl	80019a8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d302      	bcc.n	80026fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d1ca      	bne.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d11b      	bne.n	8002794 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002764:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e267      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d075      	beq.n	80028ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c2:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d00c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b85      	ldr	r3, [pc, #532]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d112      	bne.n	8002800 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	4b82      	ldr	r3, [pc, #520]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e6:	d10b      	bne.n	8002800 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	4b7e      	ldr	r3, [pc, #504]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05b      	beq.n	80028ac <HAL_RCC_OscConfig+0x108>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d157      	bne.n	80028ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e242      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d106      	bne.n	8002818 <HAL_RCC_OscConfig+0x74>
 800280a:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a75      	ldr	r2, [pc, #468]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e01d      	b.n	8002854 <HAL_RCC_OscConfig+0xb0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x98>
 8002822:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6f      	ldr	r2, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b6d      	ldr	r3, [pc, #436]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6c      	ldr	r2, [pc, #432]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xb0>
 800283c:	4b69      	ldr	r3, [pc, #420]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a68      	ldr	r2, [pc, #416]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b66      	ldr	r3, [pc, #408]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a65      	ldr	r2, [pc, #404]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff f8a4 	bl	80019a8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff f8a0 	bl	80019a8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e207      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0xc0>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7ff f890 	bl	80019a8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288c:	f7ff f88c 	bl	80019a8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1f3      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0xe8>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d063      	beq.n	8002982 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d2:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x152>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1c7      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4937      	ldr	r1, [pc, #220]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e03a      	b.n	8002982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCC_OscConfig+0x244>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7ff f845 	bl	80019a8 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002922:	f7ff f841 	bl	80019a8 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1a8      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4925      	ldr	r1, [pc, #148]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x244>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7ff f824 	bl	80019a8 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002964:	f7ff f820 	bl	80019a8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e187      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d036      	beq.n	80029fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x248>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7ff f804 	bl	80019a8 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a4:	f7ff f800 	bl	80019a8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e167      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x200>
 80029c2:	e01b      	b.n	80029fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x248>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe ffed 	bl	80019a8 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	e00e      	b.n	80029f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe ffe9 	bl	80019a8 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d907      	bls.n	80029f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e150      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	42470000 	.word	0x42470000
 80029ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ea      	bne.n	80029d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8097 	beq.w	8002b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a7c      	ldr	r2, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a73      	ldr	r2, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7fe ffa9 	bl	80019a8 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe ffa5 	bl	80019a8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e10c      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x2ea>
 8002a80:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x324>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x30c>
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x324>
 8002ab0:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a57      	ldr	r2, [pc, #348]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	4b55      	ldr	r3, [pc, #340]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a54      	ldr	r2, [pc, #336]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe ff6a 	bl	80019a8 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe ff66 	bl	80019a8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0cb      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x334>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7fe ff54 	bl	80019a8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe ff50 	bl	80019a8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0b5      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ee      	bne.n	8002b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	4a38      	ldr	r2, [pc, #224]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a1 	beq.w	8002c84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d05c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d141      	bne.n	8002bda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe ff24 	bl	80019a8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe ff20 	bl	80019a8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e087      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	491b      	ldr	r1, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fef9 	bl	80019a8 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fef5 	bl	80019a8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e05c      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x416>
 8002bd8:	e054      	b.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fee2 	bl	80019a8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fede 	bl	80019a8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e045      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x444>
 8002c06:	e03d      	b.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e038      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x4ec>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d028      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d121      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d11a      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d111      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800

08002c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0cc      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d90c      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0b8      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce8:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	494d      	ldr	r1, [pc, #308]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d044      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d119      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e067      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4934      	ldr	r1, [pc, #208]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fe fe10 	bl	80019a8 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe fe0c 	bl	80019a8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e04f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d20c      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e032      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4916      	ldr	r1, [pc, #88]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	490e      	ldr	r1, [pc, #56]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1a:	f000 f821 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	490a      	ldr	r1, [pc, #40]	; (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	5ccb      	ldrb	r3, [r1, r3]
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fd70 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023c00 	.word	0x40023c00
 8002e50:	40023800 	.word	0x40023800
 8002e54:	08006ba8 	.word	0x08006ba8
 8002e58:	20000008 	.word	0x20000008
 8002e5c:	2000000c 	.word	0x2000000c

08002e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b094      	sub	sp, #80	; 0x50
 8002e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e70:	2300      	movs	r3, #0
 8002e72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e78:	4b79      	ldr	r3, [pc, #484]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d00d      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	f200 80e1 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e92:	e0db      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b73      	ldr	r3, [pc, #460]	; (8003064 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e98:	e0db      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9e:	e0d8      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ece:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4621      	mov	r1, r4
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	6139      	str	r1, [r7, #16]
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f04:	4659      	mov	r1, fp
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4651      	mov	r1, sl
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4651      	mov	r1, sl
 8002f14:	ebb2 0801 	subs.w	r8, r2, r1
 8002f18:	4659      	mov	r1, fp
 8002f1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f32:	4690      	mov	r8, r2
 8002f34:	4699      	mov	r9, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	eb18 0303 	adds.w	r3, r8, r3
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	462b      	mov	r3, r5
 8002f40:	eb49 0303 	adc.w	r3, r9, r3
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f52:	4629      	mov	r1, r5
 8002f54:	024b      	lsls	r3, r1, #9
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	024a      	lsls	r2, r1, #9
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f70:	f7fd fe1a 	bl	8000ba8 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f7c:	e058      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7e:	4b38      	ldr	r3, [pc, #224]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	099b      	lsrs	r3, r3, #6
 8002f84:	2200      	movs	r2, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	4611      	mov	r1, r2
 8002f8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
 8002f94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	0159      	lsls	r1, r3, #5
 8002fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002faa:	0150      	lsls	r0, r2, #5
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	00eb      	lsls	r3, r5, #3
 8002fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe6:	00e2      	lsls	r2, r4, #3
 8002fe8:	4614      	mov	r4, r2
 8002fea:	461d      	mov	r5, r3
 8002fec:	4643      	mov	r3, r8
 8002fee:	18e3      	adds	r3, r4, r3
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	eb45 0303 	adc.w	r3, r5, r3
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003006:	4629      	mov	r1, r5
 8003008:	028b      	lsls	r3, r1, #10
 800300a:	4621      	mov	r1, r4
 800300c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003010:	4621      	mov	r1, r4
 8003012:	028a      	lsls	r2, r1, #10
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301a:	2200      	movs	r2, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	61fa      	str	r2, [r7, #28]
 8003020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003024:	f7fd fdc0 	bl	8000ba8 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800304a:	e002      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetSysClockFreq+0x204>)
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003054:	4618      	mov	r0, r3
 8003056:	3750      	adds	r7, #80	; 0x50
 8003058:	46bd      	mov	sp, r7
 800305a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	00f42400 	.word	0x00f42400
 8003068:	007a1200 	.word	0x007a1200

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCC_GetHCLKFreq+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000008 	.word	0x20000008

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003088:	f7ff fff0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08006bb8 	.word	0x08006bb8

080030ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe fa7a 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fad8 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e041      	b.n	80031e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f839 	bl	80031e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fa89 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start+0x24>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e022      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d109      	bne.n	800323a <HAL_TIM_PWM_Start+0x3e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e015      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x58>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07c      	b.n	8003368 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0x82>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800327c:	e013      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0x92>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329c:	e003      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fce0 	bl	8003c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <HAL_TIM_PWM_Start+0x174>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_PWM_Start+0xcc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <HAL_TIM_PWM_Start+0x178>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_PWM_Start+0xd0>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_TIM_PWM_Start+0xd2>
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_TIM_PWM_Start+0x174>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_TIM_PWM_Start+0x136>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d01d      	beq.n	8003332 <HAL_TIM_PWM_Start+0x136>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_TIM_PWM_Start+0x17c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_TIM_PWM_Start+0x136>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_TIM_PWM_Start+0x180>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_TIM_PWM_Start+0x136>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_TIM_PWM_Start+0x184>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIM_PWM_Start+0x136>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_TIM_PWM_Start+0x178>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_TIM_PWM_Start+0x136>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_TIM_PWM_Start+0x188>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIM_PWM_Start+0x136>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a16      	ldr	r2, [pc, #88]	; (8003388 <HAL_TIM_PWM_Start+0x18c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d111      	bne.n	8003356 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d010      	beq.n	8003366 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	e007      	b.n	8003366 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40010000 	.word	0x40010000
 8003374:	40010400 	.word	0x40010400
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40014000 	.word	0x40014000
 8003388:	40001800 	.word	0x40001800

0800338c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0ae      	b.n	8003508 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	f200 809f 	bhi.w	80034f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	080034f9 	.word	0x080034f9
 80033c8:	080034f9 	.word	0x080034f9
 80033cc:	080034f9 	.word	0x080034f9
 80033d0:	08003435 	.word	0x08003435
 80033d4:	080034f9 	.word	0x080034f9
 80033d8:	080034f9 	.word	0x080034f9
 80033dc:	080034f9 	.word	0x080034f9
 80033e0:	08003477 	.word	0x08003477
 80033e4:	080034f9 	.word	0x080034f9
 80033e8:	080034f9 	.word	0x080034f9
 80033ec:	080034f9 	.word	0x080034f9
 80033f0:	080034b7 	.word	0x080034b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f9f0 	bl	80037e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0208 	orr.w	r2, r2, #8
 800340e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6999      	ldr	r1, [r3, #24]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	619a      	str	r2, [r3, #24]
      break;
 8003432:	e064      	b.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fa40 	bl	80038c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800344e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6999      	ldr	r1, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	021a      	lsls	r2, r3, #8
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	619a      	str	r2, [r3, #24]
      break;
 8003474:	e043      	b.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fa95 	bl	80039ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0208 	orr.w	r2, r2, #8
 8003490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0204 	bic.w	r2, r2, #4
 80034a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69d9      	ldr	r1, [r3, #28]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	61da      	str	r2, [r3, #28]
      break;
 80034b4:	e023      	b.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fae9 	bl	8003a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69d9      	ldr	r1, [r3, #28]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	021a      	lsls	r2, r3, #8
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	61da      	str	r2, [r3, #28]
      break;
 80034f6:	e002      	b.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
      break;
 80034fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_TIM_ConfigClockSource+0x1c>
 8003528:	2302      	movs	r3, #2
 800352a:	e0b4      	b.n	8003696 <HAL_TIM_ConfigClockSource+0x186>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003564:	d03e      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356a:	f200 8087 	bhi.w	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	f000 8086 	beq.w	8003682 <HAL_TIM_ConfigClockSource+0x172>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d87f      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b70      	cmp	r3, #112	; 0x70
 800357e:	d01a      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003580:	2b70      	cmp	r3, #112	; 0x70
 8003582:	d87b      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b60      	cmp	r3, #96	; 0x60
 8003586:	d050      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x11a>
 8003588:	2b60      	cmp	r3, #96	; 0x60
 800358a:	d877      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b50      	cmp	r3, #80	; 0x50
 800358e:	d03c      	beq.n	800360a <HAL_TIM_ConfigClockSource+0xfa>
 8003590:	2b50      	cmp	r3, #80	; 0x50
 8003592:	d873      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d058      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x13a>
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d86f      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b30      	cmp	r3, #48	; 0x30
 800359e:	d064      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	d86b      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d060      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d867      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05c      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d05a      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x15a>
 80035b4:	e062      	b.n	800367c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f000 fb35 	bl	8003c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	609a      	str	r2, [r3, #8]
      break;
 80035e2:	e04f      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f000 fb1e 	bl	8003c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003606:	609a      	str	r2, [r3, #8]
      break;
 8003608:	e03c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	461a      	mov	r2, r3
 8003618:	f000 fa92 	bl	8003b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2150      	movs	r1, #80	; 0x50
 8003622:	4618      	mov	r0, r3
 8003624:	f000 faeb 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003628:	e02c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	461a      	mov	r2, r3
 8003638:	f000 fab1 	bl	8003b9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2160      	movs	r1, #96	; 0x60
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fadb 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003648:	e01c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	461a      	mov	r2, r3
 8003658:	f000 fa72 	bl	8003b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2140      	movs	r1, #64	; 0x40
 8003662:	4618      	mov	r0, r3
 8003664:	f000 facb 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003668:	e00c      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f000 fac2 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 800367a:	e003      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      break;
 8003680:	e000      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <TIM_Base_SetConfig+0x114>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036be:	d00f      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3d      	ldr	r2, [pc, #244]	; (80037b8 <TIM_Base_SetConfig+0x118>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <TIM_Base_SetConfig+0x11c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <TIM_Base_SetConfig+0x120>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3a      	ldr	r2, [pc, #232]	; (80037c4 <TIM_Base_SetConfig+0x124>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2f      	ldr	r2, [pc, #188]	; (80037b4 <TIM_Base_SetConfig+0x114>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d027      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <TIM_Base_SetConfig+0x118>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d023      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <TIM_Base_SetConfig+0x11c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01f      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <TIM_Base_SetConfig+0x120>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <TIM_Base_SetConfig+0x124>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d017      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a28      	ldr	r2, [pc, #160]	; (80037c8 <TIM_Base_SetConfig+0x128>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a27      	ldr	r2, [pc, #156]	; (80037cc <TIM_Base_SetConfig+0x12c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00f      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <TIM_Base_SetConfig+0x130>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <TIM_Base_SetConfig+0x134>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <TIM_Base_SetConfig+0x138>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <TIM_Base_SetConfig+0x13c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <TIM_Base_SetConfig+0x114>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_Base_SetConfig+0xf8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <TIM_Base_SetConfig+0x124>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d103      	bne.n	80037a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	615a      	str	r2, [r3, #20]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40010400 	.word	0x40010400
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800
 80037d4:	40001800 	.word	0x40001800
 80037d8:	40001c00 	.word	0x40001c00
 80037dc:	40002000 	.word	0x40002000

080037e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0201 	bic.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 0302 	bic.w	r3, r3, #2
 8003828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <TIM_OC1_SetConfig+0xd8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_OC1_SetConfig+0x64>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <TIM_OC1_SetConfig+0xdc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10c      	bne.n	800385e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0308 	bic.w	r3, r3, #8
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <TIM_OC1_SetConfig+0xd8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_OC1_SetConfig+0x8e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a14      	ldr	r2, [pc, #80]	; (80038bc <TIM_OC1_SetConfig+0xdc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d111      	bne.n	8003892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40010400 	.word	0x40010400

080038c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0210 	bic.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0320 	bic.w	r3, r3, #32
 800390a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a22      	ldr	r2, [pc, #136]	; (80039a4 <TIM_OC2_SetConfig+0xe4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC2_SetConfig+0x68>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <TIM_OC2_SetConfig+0xe8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10d      	bne.n	8003944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <TIM_OC2_SetConfig+0xe4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_OC2_SetConfig+0x94>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <TIM_OC2_SetConfig+0xe8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40010400 	.word	0x40010400

080039ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <TIM_OC3_SetConfig+0xe0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC3_SetConfig+0x66>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <TIM_OC3_SetConfig+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10d      	bne.n	8003a2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <TIM_OC3_SetConfig+0xe0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_OC3_SetConfig+0x92>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <TIM_OC3_SetConfig+0xe4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d113      	bne.n	8003a66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40010400 	.word	0x40010400

08003a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	031b      	lsls	r3, r3, #12
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <TIM_OC4_SetConfig+0xa4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC4_SetConfig+0x68>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <TIM_OC4_SetConfig+0xa8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d109      	bne.n	8003b10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	019b      	lsls	r3, r3, #6
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40010400 	.word	0x40010400

08003b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 030a 	bic.w	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 0307 	orr.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e05a      	b.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d01d      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10c      	bne.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	40010400 	.word	0x40010400
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40001800 	.word	0x40001800

08003db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e03d      	b.n	8003e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <__cvt>:
 8003e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	ec55 4b10 	vmov	r4, r5, d0
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	460e      	mov	r6, r1
 8003e68:	4619      	mov	r1, r3
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	bfbb      	ittet	lt
 8003e6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e72:	461d      	movlt	r5, r3
 8003e74:	2300      	movge	r3, #0
 8003e76:	232d      	movlt	r3, #45	; 0x2d
 8003e78:	700b      	strb	r3, [r1, #0]
 8003e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e80:	4691      	mov	r9, r2
 8003e82:	f023 0820 	bic.w	r8, r3, #32
 8003e86:	bfbc      	itt	lt
 8003e88:	4622      	movlt	r2, r4
 8003e8a:	4614      	movlt	r4, r2
 8003e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e90:	d005      	beq.n	8003e9e <__cvt+0x42>
 8003e92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e96:	d100      	bne.n	8003e9a <__cvt+0x3e>
 8003e98:	3601      	adds	r6, #1
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	e000      	b.n	8003ea0 <__cvt+0x44>
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	ab03      	add	r3, sp, #12
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	ab02      	add	r3, sp, #8
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	ec45 4b10 	vmov	d0, r4, r5
 8003eac:	4653      	mov	r3, sl
 8003eae:	4632      	mov	r2, r6
 8003eb0:	f000 fe6a 	bl	8004b88 <_dtoa_r>
 8003eb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003eb8:	4607      	mov	r7, r0
 8003eba:	d102      	bne.n	8003ec2 <__cvt+0x66>
 8003ebc:	f019 0f01 	tst.w	r9, #1
 8003ec0:	d022      	beq.n	8003f08 <__cvt+0xac>
 8003ec2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ec6:	eb07 0906 	add.w	r9, r7, r6
 8003eca:	d110      	bne.n	8003eee <__cvt+0x92>
 8003ecc:	783b      	ldrb	r3, [r7, #0]
 8003ece:	2b30      	cmp	r3, #48	; 0x30
 8003ed0:	d10a      	bne.n	8003ee8 <__cvt+0x8c>
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f7fc fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ede:	b918      	cbnz	r0, 8003ee8 <__cvt+0x8c>
 8003ee0:	f1c6 0601 	rsb	r6, r6, #1
 8003ee4:	f8ca 6000 	str.w	r6, [sl]
 8003ee8:	f8da 3000 	ldr.w	r3, [sl]
 8003eec:	4499      	add	r9, r3
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f7fc fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8003efa:	b108      	cbz	r0, 8003f00 <__cvt+0xa4>
 8003efc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f00:	2230      	movs	r2, #48	; 0x30
 8003f02:	9b03      	ldr	r3, [sp, #12]
 8003f04:	454b      	cmp	r3, r9
 8003f06:	d307      	bcc.n	8003f18 <__cvt+0xbc>
 8003f08:	9b03      	ldr	r3, [sp, #12]
 8003f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f0c:	1bdb      	subs	r3, r3, r7
 8003f0e:	4638      	mov	r0, r7
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	b004      	add	sp, #16
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	1c59      	adds	r1, r3, #1
 8003f1a:	9103      	str	r1, [sp, #12]
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e7f0      	b.n	8003f02 <__cvt+0xa6>

08003f20 <__exponent>:
 8003f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f22:	4603      	mov	r3, r0
 8003f24:	2900      	cmp	r1, #0
 8003f26:	bfb8      	it	lt
 8003f28:	4249      	neglt	r1, r1
 8003f2a:	f803 2b02 	strb.w	r2, [r3], #2
 8003f2e:	bfb4      	ite	lt
 8003f30:	222d      	movlt	r2, #45	; 0x2d
 8003f32:	222b      	movge	r2, #43	; 0x2b
 8003f34:	2909      	cmp	r1, #9
 8003f36:	7042      	strb	r2, [r0, #1]
 8003f38:	dd2a      	ble.n	8003f90 <__exponent+0x70>
 8003f3a:	f10d 0207 	add.w	r2, sp, #7
 8003f3e:	4617      	mov	r7, r2
 8003f40:	260a      	movs	r6, #10
 8003f42:	4694      	mov	ip, r2
 8003f44:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f48:	fb06 1415 	mls	r4, r6, r5, r1
 8003f4c:	3430      	adds	r4, #48	; 0x30
 8003f4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003f52:	460c      	mov	r4, r1
 8003f54:	2c63      	cmp	r4, #99	; 0x63
 8003f56:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	dcf1      	bgt.n	8003f42 <__exponent+0x22>
 8003f5e:	3130      	adds	r1, #48	; 0x30
 8003f60:	f1ac 0402 	sub.w	r4, ip, #2
 8003f64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f68:	1c41      	adds	r1, r0, #1
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	42ba      	cmp	r2, r7
 8003f6e:	d30a      	bcc.n	8003f86 <__exponent+0x66>
 8003f70:	f10d 0209 	add.w	r2, sp, #9
 8003f74:	eba2 020c 	sub.w	r2, r2, ip
 8003f78:	42bc      	cmp	r4, r7
 8003f7a:	bf88      	it	hi
 8003f7c:	2200      	movhi	r2, #0
 8003f7e:	4413      	add	r3, r2
 8003f80:	1a18      	subs	r0, r3, r0
 8003f82:	b003      	add	sp, #12
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003f8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003f8e:	e7ed      	b.n	8003f6c <__exponent+0x4c>
 8003f90:	2330      	movs	r3, #48	; 0x30
 8003f92:	3130      	adds	r1, #48	; 0x30
 8003f94:	7083      	strb	r3, [r0, #2]
 8003f96:	70c1      	strb	r1, [r0, #3]
 8003f98:	1d03      	adds	r3, r0, #4
 8003f9a:	e7f1      	b.n	8003f80 <__exponent+0x60>

08003f9c <_printf_float>:
 8003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa0:	ed2d 8b02 	vpush	{d8}
 8003fa4:	b08d      	sub	sp, #52	; 0x34
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003fac:	4616      	mov	r6, r2
 8003fae:	461f      	mov	r7, r3
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	f000 fce7 	bl	8004984 <_localeconv_r>
 8003fb6:	f8d0 a000 	ldr.w	sl, [r0]
 8003fba:	4650      	mov	r0, sl
 8003fbc:	f7fc f958 	bl	8000270 <strlen>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	9305      	str	r3, [sp, #20]
 8003fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003fcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003fd0:	3307      	adds	r3, #7
 8003fd2:	f023 0307 	bic.w	r3, r3, #7
 8003fd6:	f103 0208 	add.w	r2, r3, #8
 8003fda:	f8c8 2000 	str.w	r2, [r8]
 8003fde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fe6:	9307      	str	r3, [sp, #28]
 8003fe8:	f8cd 8018 	str.w	r8, [sp, #24]
 8003fec:	ee08 0a10 	vmov	s16, r0
 8003ff0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003ff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ff8:	4b9e      	ldr	r3, [pc, #632]	; (8004274 <_printf_float+0x2d8>)
 8003ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffe:	f7fc fd95 	bl	8000b2c <__aeabi_dcmpun>
 8004002:	bb88      	cbnz	r0, 8004068 <_printf_float+0xcc>
 8004004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004008:	4b9a      	ldr	r3, [pc, #616]	; (8004274 <_printf_float+0x2d8>)
 800400a:	f04f 32ff 	mov.w	r2, #4294967295
 800400e:	f7fc fd6f 	bl	8000af0 <__aeabi_dcmple>
 8004012:	bb48      	cbnz	r0, 8004068 <_printf_float+0xcc>
 8004014:	2200      	movs	r2, #0
 8004016:	2300      	movs	r3, #0
 8004018:	4640      	mov	r0, r8
 800401a:	4649      	mov	r1, r9
 800401c:	f7fc fd5e 	bl	8000adc <__aeabi_dcmplt>
 8004020:	b110      	cbz	r0, 8004028 <_printf_float+0x8c>
 8004022:	232d      	movs	r3, #45	; 0x2d
 8004024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004028:	4a93      	ldr	r2, [pc, #588]	; (8004278 <_printf_float+0x2dc>)
 800402a:	4b94      	ldr	r3, [pc, #592]	; (800427c <_printf_float+0x2e0>)
 800402c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004030:	bf94      	ite	ls
 8004032:	4690      	movls	r8, r2
 8004034:	4698      	movhi	r8, r3
 8004036:	2303      	movs	r3, #3
 8004038:	6123      	str	r3, [r4, #16]
 800403a:	9b05      	ldr	r3, [sp, #20]
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	f04f 0900 	mov.w	r9, #0
 8004046:	9700      	str	r7, [sp, #0]
 8004048:	4633      	mov	r3, r6
 800404a:	aa0b      	add	r2, sp, #44	; 0x2c
 800404c:	4621      	mov	r1, r4
 800404e:	4628      	mov	r0, r5
 8004050:	f000 f9da 	bl	8004408 <_printf_common>
 8004054:	3001      	adds	r0, #1
 8004056:	f040 8090 	bne.w	800417a <_printf_float+0x1de>
 800405a:	f04f 30ff 	mov.w	r0, #4294967295
 800405e:	b00d      	add	sp, #52	; 0x34
 8004060:	ecbd 8b02 	vpop	{d8}
 8004064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	4640      	mov	r0, r8
 800406e:	4649      	mov	r1, r9
 8004070:	f7fc fd5c 	bl	8000b2c <__aeabi_dcmpun>
 8004074:	b140      	cbz	r0, 8004088 <_printf_float+0xec>
 8004076:	464b      	mov	r3, r9
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfbc      	itt	lt
 800407c:	232d      	movlt	r3, #45	; 0x2d
 800407e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004082:	4a7f      	ldr	r2, [pc, #508]	; (8004280 <_printf_float+0x2e4>)
 8004084:	4b7f      	ldr	r3, [pc, #508]	; (8004284 <_printf_float+0x2e8>)
 8004086:	e7d1      	b.n	800402c <_printf_float+0x90>
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800408e:	9206      	str	r2, [sp, #24]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	d13f      	bne.n	8004114 <_printf_float+0x178>
 8004094:	2306      	movs	r3, #6
 8004096:	6063      	str	r3, [r4, #4]
 8004098:	9b05      	ldr	r3, [sp, #20]
 800409a:	6861      	ldr	r1, [r4, #4]
 800409c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040a0:	2300      	movs	r3, #0
 80040a2:	9303      	str	r3, [sp, #12]
 80040a4:	ab0a      	add	r3, sp, #40	; 0x28
 80040a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040aa:	ab09      	add	r3, sp, #36	; 0x24
 80040ac:	ec49 8b10 	vmov	d0, r8, r9
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6022      	str	r2, [r4, #0]
 80040b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7ff fecf 	bl	8003e5c <__cvt>
 80040be:	9b06      	ldr	r3, [sp, #24]
 80040c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040c2:	2b47      	cmp	r3, #71	; 0x47
 80040c4:	4680      	mov	r8, r0
 80040c6:	d108      	bne.n	80040da <_printf_float+0x13e>
 80040c8:	1cc8      	adds	r0, r1, #3
 80040ca:	db02      	blt.n	80040d2 <_printf_float+0x136>
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	4299      	cmp	r1, r3
 80040d0:	dd41      	ble.n	8004156 <_printf_float+0x1ba>
 80040d2:	f1ab 0302 	sub.w	r3, fp, #2
 80040d6:	fa5f fb83 	uxtb.w	fp, r3
 80040da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040de:	d820      	bhi.n	8004122 <_printf_float+0x186>
 80040e0:	3901      	subs	r1, #1
 80040e2:	465a      	mov	r2, fp
 80040e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040e8:	9109      	str	r1, [sp, #36]	; 0x24
 80040ea:	f7ff ff19 	bl	8003f20 <__exponent>
 80040ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040f0:	1813      	adds	r3, r2, r0
 80040f2:	2a01      	cmp	r2, #1
 80040f4:	4681      	mov	r9, r0
 80040f6:	6123      	str	r3, [r4, #16]
 80040f8:	dc02      	bgt.n	8004100 <_printf_float+0x164>
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	07d2      	lsls	r2, r2, #31
 80040fe:	d501      	bpl.n	8004104 <_printf_float+0x168>
 8004100:	3301      	adds	r3, #1
 8004102:	6123      	str	r3, [r4, #16]
 8004104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004108:	2b00      	cmp	r3, #0
 800410a:	d09c      	beq.n	8004046 <_printf_float+0xaa>
 800410c:	232d      	movs	r3, #45	; 0x2d
 800410e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004112:	e798      	b.n	8004046 <_printf_float+0xaa>
 8004114:	9a06      	ldr	r2, [sp, #24]
 8004116:	2a47      	cmp	r2, #71	; 0x47
 8004118:	d1be      	bne.n	8004098 <_printf_float+0xfc>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1bc      	bne.n	8004098 <_printf_float+0xfc>
 800411e:	2301      	movs	r3, #1
 8004120:	e7b9      	b.n	8004096 <_printf_float+0xfa>
 8004122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004126:	d118      	bne.n	800415a <_printf_float+0x1be>
 8004128:	2900      	cmp	r1, #0
 800412a:	6863      	ldr	r3, [r4, #4]
 800412c:	dd0b      	ble.n	8004146 <_printf_float+0x1aa>
 800412e:	6121      	str	r1, [r4, #16]
 8004130:	b913      	cbnz	r3, 8004138 <_printf_float+0x19c>
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	07d0      	lsls	r0, r2, #31
 8004136:	d502      	bpl.n	800413e <_printf_float+0x1a2>
 8004138:	3301      	adds	r3, #1
 800413a:	440b      	add	r3, r1
 800413c:	6123      	str	r3, [r4, #16]
 800413e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004140:	f04f 0900 	mov.w	r9, #0
 8004144:	e7de      	b.n	8004104 <_printf_float+0x168>
 8004146:	b913      	cbnz	r3, 800414e <_printf_float+0x1b2>
 8004148:	6822      	ldr	r2, [r4, #0]
 800414a:	07d2      	lsls	r2, r2, #31
 800414c:	d501      	bpl.n	8004152 <_printf_float+0x1b6>
 800414e:	3302      	adds	r3, #2
 8004150:	e7f4      	b.n	800413c <_printf_float+0x1a0>
 8004152:	2301      	movs	r3, #1
 8004154:	e7f2      	b.n	800413c <_printf_float+0x1a0>
 8004156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800415a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415c:	4299      	cmp	r1, r3
 800415e:	db05      	blt.n	800416c <_printf_float+0x1d0>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	6121      	str	r1, [r4, #16]
 8004164:	07d8      	lsls	r0, r3, #31
 8004166:	d5ea      	bpl.n	800413e <_printf_float+0x1a2>
 8004168:	1c4b      	adds	r3, r1, #1
 800416a:	e7e7      	b.n	800413c <_printf_float+0x1a0>
 800416c:	2900      	cmp	r1, #0
 800416e:	bfd4      	ite	le
 8004170:	f1c1 0202 	rsble	r2, r1, #2
 8004174:	2201      	movgt	r2, #1
 8004176:	4413      	add	r3, r2
 8004178:	e7e0      	b.n	800413c <_printf_float+0x1a0>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	055a      	lsls	r2, r3, #21
 800417e:	d407      	bmi.n	8004190 <_printf_float+0x1f4>
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	4642      	mov	r2, r8
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	47b8      	blx	r7
 800418a:	3001      	adds	r0, #1
 800418c:	d12c      	bne.n	80041e8 <_printf_float+0x24c>
 800418e:	e764      	b.n	800405a <_printf_float+0xbe>
 8004190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004194:	f240 80e0 	bls.w	8004358 <_printf_float+0x3bc>
 8004198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800419c:	2200      	movs	r2, #0
 800419e:	2300      	movs	r3, #0
 80041a0:	f7fc fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d034      	beq.n	8004212 <_printf_float+0x276>
 80041a8:	4a37      	ldr	r2, [pc, #220]	; (8004288 <_printf_float+0x2ec>)
 80041aa:	2301      	movs	r3, #1
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	f43f af51 	beq.w	800405a <_printf_float+0xbe>
 80041b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	db02      	blt.n	80041c6 <_printf_float+0x22a>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07d8      	lsls	r0, r3, #31
 80041c4:	d510      	bpl.n	80041e8 <_printf_float+0x24c>
 80041c6:	ee18 3a10 	vmov	r3, s16
 80041ca:	4652      	mov	r2, sl
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b8      	blx	r7
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f af41 	beq.w	800405a <_printf_float+0xbe>
 80041d8:	f04f 0800 	mov.w	r8, #0
 80041dc:	f104 091a 	add.w	r9, r4, #26
 80041e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	4543      	cmp	r3, r8
 80041e6:	dc09      	bgt.n	80041fc <_printf_float+0x260>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	079b      	lsls	r3, r3, #30
 80041ec:	f100 8107 	bmi.w	80043fe <_printf_float+0x462>
 80041f0:	68e0      	ldr	r0, [r4, #12]
 80041f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041f4:	4298      	cmp	r0, r3
 80041f6:	bfb8      	it	lt
 80041f8:	4618      	movlt	r0, r3
 80041fa:	e730      	b.n	800405e <_printf_float+0xc2>
 80041fc:	2301      	movs	r3, #1
 80041fe:	464a      	mov	r2, r9
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	47b8      	blx	r7
 8004206:	3001      	adds	r0, #1
 8004208:	f43f af27 	beq.w	800405a <_printf_float+0xbe>
 800420c:	f108 0801 	add.w	r8, r8, #1
 8004210:	e7e6      	b.n	80041e0 <_printf_float+0x244>
 8004212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	dc39      	bgt.n	800428c <_printf_float+0x2f0>
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <_printf_float+0x2ec>)
 800421a:	2301      	movs	r3, #1
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	f43f af19 	beq.w	800405a <_printf_float+0xbe>
 8004228:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800422c:	4313      	orrs	r3, r2
 800422e:	d102      	bne.n	8004236 <_printf_float+0x29a>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	07d9      	lsls	r1, r3, #31
 8004234:	d5d8      	bpl.n	80041e8 <_printf_float+0x24c>
 8004236:	ee18 3a10 	vmov	r3, s16
 800423a:	4652      	mov	r2, sl
 800423c:	4631      	mov	r1, r6
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	f43f af09 	beq.w	800405a <_printf_float+0xbe>
 8004248:	f04f 0900 	mov.w	r9, #0
 800424c:	f104 0a1a 	add.w	sl, r4, #26
 8004250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004252:	425b      	negs	r3, r3
 8004254:	454b      	cmp	r3, r9
 8004256:	dc01      	bgt.n	800425c <_printf_float+0x2c0>
 8004258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800425a:	e792      	b.n	8004182 <_printf_float+0x1e6>
 800425c:	2301      	movs	r3, #1
 800425e:	4652      	mov	r2, sl
 8004260:	4631      	mov	r1, r6
 8004262:	4628      	mov	r0, r5
 8004264:	47b8      	blx	r7
 8004266:	3001      	adds	r0, #1
 8004268:	f43f aef7 	beq.w	800405a <_printf_float+0xbe>
 800426c:	f109 0901 	add.w	r9, r9, #1
 8004270:	e7ee      	b.n	8004250 <_printf_float+0x2b4>
 8004272:	bf00      	nop
 8004274:	7fefffff 	.word	0x7fefffff
 8004278:	08006bc0 	.word	0x08006bc0
 800427c:	08006bc4 	.word	0x08006bc4
 8004280:	08006bc8 	.word	0x08006bc8
 8004284:	08006bcc 	.word	0x08006bcc
 8004288:	08006bd0 	.word	0x08006bd0
 800428c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800428e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004290:	429a      	cmp	r2, r3
 8004292:	bfa8      	it	ge
 8004294:	461a      	movge	r2, r3
 8004296:	2a00      	cmp	r2, #0
 8004298:	4691      	mov	r9, r2
 800429a:	dc37      	bgt.n	800430c <_printf_float+0x370>
 800429c:	f04f 0b00 	mov.w	fp, #0
 80042a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042a4:	f104 021a 	add.w	r2, r4, #26
 80042a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042aa:	9305      	str	r3, [sp, #20]
 80042ac:	eba3 0309 	sub.w	r3, r3, r9
 80042b0:	455b      	cmp	r3, fp
 80042b2:	dc33      	bgt.n	800431c <_printf_float+0x380>
 80042b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042b8:	429a      	cmp	r2, r3
 80042ba:	db3b      	blt.n	8004334 <_printf_float+0x398>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d438      	bmi.n	8004334 <_printf_float+0x398>
 80042c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80042c6:	eba2 0903 	sub.w	r9, r2, r3
 80042ca:	9b05      	ldr	r3, [sp, #20]
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	4591      	cmp	r9, r2
 80042d0:	bfa8      	it	ge
 80042d2:	4691      	movge	r9, r2
 80042d4:	f1b9 0f00 	cmp.w	r9, #0
 80042d8:	dc35      	bgt.n	8004346 <_printf_float+0x3aa>
 80042da:	f04f 0800 	mov.w	r8, #0
 80042de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042e2:	f104 0a1a 	add.w	sl, r4, #26
 80042e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	eba3 0309 	sub.w	r3, r3, r9
 80042f0:	4543      	cmp	r3, r8
 80042f2:	f77f af79 	ble.w	80041e8 <_printf_float+0x24c>
 80042f6:	2301      	movs	r3, #1
 80042f8:	4652      	mov	r2, sl
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f aeaa 	beq.w	800405a <_printf_float+0xbe>
 8004306:	f108 0801 	add.w	r8, r8, #1
 800430a:	e7ec      	b.n	80042e6 <_printf_float+0x34a>
 800430c:	4613      	mov	r3, r2
 800430e:	4631      	mov	r1, r6
 8004310:	4642      	mov	r2, r8
 8004312:	4628      	mov	r0, r5
 8004314:	47b8      	blx	r7
 8004316:	3001      	adds	r0, #1
 8004318:	d1c0      	bne.n	800429c <_printf_float+0x300>
 800431a:	e69e      	b.n	800405a <_printf_float+0xbe>
 800431c:	2301      	movs	r3, #1
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	9205      	str	r2, [sp, #20]
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f ae97 	beq.w	800405a <_printf_float+0xbe>
 800432c:	9a05      	ldr	r2, [sp, #20]
 800432e:	f10b 0b01 	add.w	fp, fp, #1
 8004332:	e7b9      	b.n	80042a8 <_printf_float+0x30c>
 8004334:	ee18 3a10 	vmov	r3, s16
 8004338:	4652      	mov	r2, sl
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	d1be      	bne.n	80042c2 <_printf_float+0x326>
 8004344:	e689      	b.n	800405a <_printf_float+0xbe>
 8004346:	9a05      	ldr	r2, [sp, #20]
 8004348:	464b      	mov	r3, r9
 800434a:	4442      	add	r2, r8
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	d1c1      	bne.n	80042da <_printf_float+0x33e>
 8004356:	e680      	b.n	800405a <_printf_float+0xbe>
 8004358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800435a:	2a01      	cmp	r2, #1
 800435c:	dc01      	bgt.n	8004362 <_printf_float+0x3c6>
 800435e:	07db      	lsls	r3, r3, #31
 8004360:	d53a      	bpl.n	80043d8 <_printf_float+0x43c>
 8004362:	2301      	movs	r3, #1
 8004364:	4642      	mov	r2, r8
 8004366:	4631      	mov	r1, r6
 8004368:	4628      	mov	r0, r5
 800436a:	47b8      	blx	r7
 800436c:	3001      	adds	r0, #1
 800436e:	f43f ae74 	beq.w	800405a <_printf_float+0xbe>
 8004372:	ee18 3a10 	vmov	r3, s16
 8004376:	4652      	mov	r2, sl
 8004378:	4631      	mov	r1, r6
 800437a:	4628      	mov	r0, r5
 800437c:	47b8      	blx	r7
 800437e:	3001      	adds	r0, #1
 8004380:	f43f ae6b 	beq.w	800405a <_printf_float+0xbe>
 8004384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004388:	2200      	movs	r2, #0
 800438a:	2300      	movs	r3, #0
 800438c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004390:	f7fc fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004394:	b9d8      	cbnz	r0, 80043ce <_printf_float+0x432>
 8004396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800439a:	f108 0201 	add.w	r2, r8, #1
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	d10e      	bne.n	80043c6 <_printf_float+0x42a>
 80043a8:	e657      	b.n	800405a <_printf_float+0xbe>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4652      	mov	r2, sl
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f ae50 	beq.w	800405a <_printf_float+0xbe>
 80043ba:	f108 0801 	add.w	r8, r8, #1
 80043be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c0:	3b01      	subs	r3, #1
 80043c2:	4543      	cmp	r3, r8
 80043c4:	dcf1      	bgt.n	80043aa <_printf_float+0x40e>
 80043c6:	464b      	mov	r3, r9
 80043c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043cc:	e6da      	b.n	8004184 <_printf_float+0x1e8>
 80043ce:	f04f 0800 	mov.w	r8, #0
 80043d2:	f104 0a1a 	add.w	sl, r4, #26
 80043d6:	e7f2      	b.n	80043be <_printf_float+0x422>
 80043d8:	2301      	movs	r3, #1
 80043da:	4642      	mov	r2, r8
 80043dc:	e7df      	b.n	800439e <_printf_float+0x402>
 80043de:	2301      	movs	r3, #1
 80043e0:	464a      	mov	r2, r9
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	f43f ae36 	beq.w	800405a <_printf_float+0xbe>
 80043ee:	f108 0801 	add.w	r8, r8, #1
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	4543      	cmp	r3, r8
 80043fa:	dcf0      	bgt.n	80043de <_printf_float+0x442>
 80043fc:	e6f8      	b.n	80041f0 <_printf_float+0x254>
 80043fe:	f04f 0800 	mov.w	r8, #0
 8004402:	f104 0919 	add.w	r9, r4, #25
 8004406:	e7f4      	b.n	80043f2 <_printf_float+0x456>

08004408 <_printf_common>:
 8004408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	4616      	mov	r6, r2
 800440e:	4699      	mov	r9, r3
 8004410:	688a      	ldr	r2, [r1, #8]
 8004412:	690b      	ldr	r3, [r1, #16]
 8004414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004418:	4293      	cmp	r3, r2
 800441a:	bfb8      	it	lt
 800441c:	4613      	movlt	r3, r2
 800441e:	6033      	str	r3, [r6, #0]
 8004420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004424:	4607      	mov	r7, r0
 8004426:	460c      	mov	r4, r1
 8004428:	b10a      	cbz	r2, 800442e <_printf_common+0x26>
 800442a:	3301      	adds	r3, #1
 800442c:	6033      	str	r3, [r6, #0]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	0699      	lsls	r1, r3, #26
 8004432:	bf42      	ittt	mi
 8004434:	6833      	ldrmi	r3, [r6, #0]
 8004436:	3302      	addmi	r3, #2
 8004438:	6033      	strmi	r3, [r6, #0]
 800443a:	6825      	ldr	r5, [r4, #0]
 800443c:	f015 0506 	ands.w	r5, r5, #6
 8004440:	d106      	bne.n	8004450 <_printf_common+0x48>
 8004442:	f104 0a19 	add.w	sl, r4, #25
 8004446:	68e3      	ldr	r3, [r4, #12]
 8004448:	6832      	ldr	r2, [r6, #0]
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	42ab      	cmp	r3, r5
 800444e:	dc26      	bgt.n	800449e <_printf_common+0x96>
 8004450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004454:	1e13      	subs	r3, r2, #0
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	bf18      	it	ne
 800445a:	2301      	movne	r3, #1
 800445c:	0692      	lsls	r2, r2, #26
 800445e:	d42b      	bmi.n	80044b8 <_printf_common+0xb0>
 8004460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004464:	4649      	mov	r1, r9
 8004466:	4638      	mov	r0, r7
 8004468:	47c0      	blx	r8
 800446a:	3001      	adds	r0, #1
 800446c:	d01e      	beq.n	80044ac <_printf_common+0xa4>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	f003 0306 	and.w	r3, r3, #6
 8004476:	2b04      	cmp	r3, #4
 8004478:	bf02      	ittt	eq
 800447a:	68e5      	ldreq	r5, [r4, #12]
 800447c:	6833      	ldreq	r3, [r6, #0]
 800447e:	1aed      	subeq	r5, r5, r3
 8004480:	68a3      	ldr	r3, [r4, #8]
 8004482:	bf0c      	ite	eq
 8004484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004488:	2500      	movne	r5, #0
 800448a:	4293      	cmp	r3, r2
 800448c:	bfc4      	itt	gt
 800448e:	1a9b      	subgt	r3, r3, r2
 8004490:	18ed      	addgt	r5, r5, r3
 8004492:	2600      	movs	r6, #0
 8004494:	341a      	adds	r4, #26
 8004496:	42b5      	cmp	r5, r6
 8004498:	d11a      	bne.n	80044d0 <_printf_common+0xc8>
 800449a:	2000      	movs	r0, #0
 800449c:	e008      	b.n	80044b0 <_printf_common+0xa8>
 800449e:	2301      	movs	r3, #1
 80044a0:	4652      	mov	r2, sl
 80044a2:	4649      	mov	r1, r9
 80044a4:	4638      	mov	r0, r7
 80044a6:	47c0      	blx	r8
 80044a8:	3001      	adds	r0, #1
 80044aa:	d103      	bne.n	80044b4 <_printf_common+0xac>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	3501      	adds	r5, #1
 80044b6:	e7c6      	b.n	8004446 <_printf_common+0x3e>
 80044b8:	18e1      	adds	r1, r4, r3
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	2030      	movs	r0, #48	; 0x30
 80044be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044c2:	4422      	add	r2, r4
 80044c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044cc:	3302      	adds	r3, #2
 80044ce:	e7c7      	b.n	8004460 <_printf_common+0x58>
 80044d0:	2301      	movs	r3, #1
 80044d2:	4622      	mov	r2, r4
 80044d4:	4649      	mov	r1, r9
 80044d6:	4638      	mov	r0, r7
 80044d8:	47c0      	blx	r8
 80044da:	3001      	adds	r0, #1
 80044dc:	d0e6      	beq.n	80044ac <_printf_common+0xa4>
 80044de:	3601      	adds	r6, #1
 80044e0:	e7d9      	b.n	8004496 <_printf_common+0x8e>
	...

080044e4 <_printf_i>:
 80044e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	7e0f      	ldrb	r7, [r1, #24]
 80044ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044ec:	2f78      	cmp	r7, #120	; 0x78
 80044ee:	4691      	mov	r9, r2
 80044f0:	4680      	mov	r8, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	469a      	mov	sl, r3
 80044f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044fa:	d807      	bhi.n	800450c <_printf_i+0x28>
 80044fc:	2f62      	cmp	r7, #98	; 0x62
 80044fe:	d80a      	bhi.n	8004516 <_printf_i+0x32>
 8004500:	2f00      	cmp	r7, #0
 8004502:	f000 80d4 	beq.w	80046ae <_printf_i+0x1ca>
 8004506:	2f58      	cmp	r7, #88	; 0x58
 8004508:	f000 80c0 	beq.w	800468c <_printf_i+0x1a8>
 800450c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004514:	e03a      	b.n	800458c <_printf_i+0xa8>
 8004516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800451a:	2b15      	cmp	r3, #21
 800451c:	d8f6      	bhi.n	800450c <_printf_i+0x28>
 800451e:	a101      	add	r1, pc, #4	; (adr r1, 8004524 <_printf_i+0x40>)
 8004520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004524:	0800457d 	.word	0x0800457d
 8004528:	08004591 	.word	0x08004591
 800452c:	0800450d 	.word	0x0800450d
 8004530:	0800450d 	.word	0x0800450d
 8004534:	0800450d 	.word	0x0800450d
 8004538:	0800450d 	.word	0x0800450d
 800453c:	08004591 	.word	0x08004591
 8004540:	0800450d 	.word	0x0800450d
 8004544:	0800450d 	.word	0x0800450d
 8004548:	0800450d 	.word	0x0800450d
 800454c:	0800450d 	.word	0x0800450d
 8004550:	08004695 	.word	0x08004695
 8004554:	080045bd 	.word	0x080045bd
 8004558:	0800464f 	.word	0x0800464f
 800455c:	0800450d 	.word	0x0800450d
 8004560:	0800450d 	.word	0x0800450d
 8004564:	080046b7 	.word	0x080046b7
 8004568:	0800450d 	.word	0x0800450d
 800456c:	080045bd 	.word	0x080045bd
 8004570:	0800450d 	.word	0x0800450d
 8004574:	0800450d 	.word	0x0800450d
 8004578:	08004657 	.word	0x08004657
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	602a      	str	r2, [r5, #0]
 8004584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800458c:	2301      	movs	r3, #1
 800458e:	e09f      	b.n	80046d0 <_printf_i+0x1ec>
 8004590:	6820      	ldr	r0, [r4, #0]
 8004592:	682b      	ldr	r3, [r5, #0]
 8004594:	0607      	lsls	r7, r0, #24
 8004596:	f103 0104 	add.w	r1, r3, #4
 800459a:	6029      	str	r1, [r5, #0]
 800459c:	d501      	bpl.n	80045a2 <_printf_i+0xbe>
 800459e:	681e      	ldr	r6, [r3, #0]
 80045a0:	e003      	b.n	80045aa <_printf_i+0xc6>
 80045a2:	0646      	lsls	r6, r0, #25
 80045a4:	d5fb      	bpl.n	800459e <_printf_i+0xba>
 80045a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	da03      	bge.n	80045b6 <_printf_i+0xd2>
 80045ae:	232d      	movs	r3, #45	; 0x2d
 80045b0:	4276      	negs	r6, r6
 80045b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b6:	485a      	ldr	r0, [pc, #360]	; (8004720 <_printf_i+0x23c>)
 80045b8:	230a      	movs	r3, #10
 80045ba:	e012      	b.n	80045e2 <_printf_i+0xfe>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	6820      	ldr	r0, [r4, #0]
 80045c0:	1d19      	adds	r1, r3, #4
 80045c2:	6029      	str	r1, [r5, #0]
 80045c4:	0605      	lsls	r5, r0, #24
 80045c6:	d501      	bpl.n	80045cc <_printf_i+0xe8>
 80045c8:	681e      	ldr	r6, [r3, #0]
 80045ca:	e002      	b.n	80045d2 <_printf_i+0xee>
 80045cc:	0641      	lsls	r1, r0, #25
 80045ce:	d5fb      	bpl.n	80045c8 <_printf_i+0xe4>
 80045d0:	881e      	ldrh	r6, [r3, #0]
 80045d2:	4853      	ldr	r0, [pc, #332]	; (8004720 <_printf_i+0x23c>)
 80045d4:	2f6f      	cmp	r7, #111	; 0x6f
 80045d6:	bf0c      	ite	eq
 80045d8:	2308      	moveq	r3, #8
 80045da:	230a      	movne	r3, #10
 80045dc:	2100      	movs	r1, #0
 80045de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045e2:	6865      	ldr	r5, [r4, #4]
 80045e4:	60a5      	str	r5, [r4, #8]
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	bfa2      	ittt	ge
 80045ea:	6821      	ldrge	r1, [r4, #0]
 80045ec:	f021 0104 	bicge.w	r1, r1, #4
 80045f0:	6021      	strge	r1, [r4, #0]
 80045f2:	b90e      	cbnz	r6, 80045f8 <_printf_i+0x114>
 80045f4:	2d00      	cmp	r5, #0
 80045f6:	d04b      	beq.n	8004690 <_printf_i+0x1ac>
 80045f8:	4615      	mov	r5, r2
 80045fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80045fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004602:	5dc7      	ldrb	r7, [r0, r7]
 8004604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004608:	4637      	mov	r7, r6
 800460a:	42bb      	cmp	r3, r7
 800460c:	460e      	mov	r6, r1
 800460e:	d9f4      	bls.n	80045fa <_printf_i+0x116>
 8004610:	2b08      	cmp	r3, #8
 8004612:	d10b      	bne.n	800462c <_printf_i+0x148>
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	07de      	lsls	r6, r3, #31
 8004618:	d508      	bpl.n	800462c <_printf_i+0x148>
 800461a:	6923      	ldr	r3, [r4, #16]
 800461c:	6861      	ldr	r1, [r4, #4]
 800461e:	4299      	cmp	r1, r3
 8004620:	bfde      	ittt	le
 8004622:	2330      	movle	r3, #48	; 0x30
 8004624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800462c:	1b52      	subs	r2, r2, r5
 800462e:	6122      	str	r2, [r4, #16]
 8004630:	f8cd a000 	str.w	sl, [sp]
 8004634:	464b      	mov	r3, r9
 8004636:	aa03      	add	r2, sp, #12
 8004638:	4621      	mov	r1, r4
 800463a:	4640      	mov	r0, r8
 800463c:	f7ff fee4 	bl	8004408 <_printf_common>
 8004640:	3001      	adds	r0, #1
 8004642:	d14a      	bne.n	80046da <_printf_i+0x1f6>
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	b004      	add	sp, #16
 800464a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f043 0320 	orr.w	r3, r3, #32
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	4833      	ldr	r0, [pc, #204]	; (8004724 <_printf_i+0x240>)
 8004658:	2778      	movs	r7, #120	; 0x78
 800465a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	6829      	ldr	r1, [r5, #0]
 8004662:	061f      	lsls	r7, r3, #24
 8004664:	f851 6b04 	ldr.w	r6, [r1], #4
 8004668:	d402      	bmi.n	8004670 <_printf_i+0x18c>
 800466a:	065f      	lsls	r7, r3, #25
 800466c:	bf48      	it	mi
 800466e:	b2b6      	uxthmi	r6, r6
 8004670:	07df      	lsls	r7, r3, #31
 8004672:	bf48      	it	mi
 8004674:	f043 0320 	orrmi.w	r3, r3, #32
 8004678:	6029      	str	r1, [r5, #0]
 800467a:	bf48      	it	mi
 800467c:	6023      	strmi	r3, [r4, #0]
 800467e:	b91e      	cbnz	r6, 8004688 <_printf_i+0x1a4>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	f023 0320 	bic.w	r3, r3, #32
 8004686:	6023      	str	r3, [r4, #0]
 8004688:	2310      	movs	r3, #16
 800468a:	e7a7      	b.n	80045dc <_printf_i+0xf8>
 800468c:	4824      	ldr	r0, [pc, #144]	; (8004720 <_printf_i+0x23c>)
 800468e:	e7e4      	b.n	800465a <_printf_i+0x176>
 8004690:	4615      	mov	r5, r2
 8004692:	e7bd      	b.n	8004610 <_printf_i+0x12c>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	6826      	ldr	r6, [r4, #0]
 8004698:	6961      	ldr	r1, [r4, #20]
 800469a:	1d18      	adds	r0, r3, #4
 800469c:	6028      	str	r0, [r5, #0]
 800469e:	0635      	lsls	r5, r6, #24
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	d501      	bpl.n	80046a8 <_printf_i+0x1c4>
 80046a4:	6019      	str	r1, [r3, #0]
 80046a6:	e002      	b.n	80046ae <_printf_i+0x1ca>
 80046a8:	0670      	lsls	r0, r6, #25
 80046aa:	d5fb      	bpl.n	80046a4 <_printf_i+0x1c0>
 80046ac:	8019      	strh	r1, [r3, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	4615      	mov	r5, r2
 80046b4:	e7bc      	b.n	8004630 <_printf_i+0x14c>
 80046b6:	682b      	ldr	r3, [r5, #0]
 80046b8:	1d1a      	adds	r2, r3, #4
 80046ba:	602a      	str	r2, [r5, #0]
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	2100      	movs	r1, #0
 80046c2:	4628      	mov	r0, r5
 80046c4:	f7fb fd84 	bl	80001d0 <memchr>
 80046c8:	b108      	cbz	r0, 80046ce <_printf_i+0x1ea>
 80046ca:	1b40      	subs	r0, r0, r5
 80046cc:	6060      	str	r0, [r4, #4]
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	2300      	movs	r3, #0
 80046d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d8:	e7aa      	b.n	8004630 <_printf_i+0x14c>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	462a      	mov	r2, r5
 80046de:	4649      	mov	r1, r9
 80046e0:	4640      	mov	r0, r8
 80046e2:	47d0      	blx	sl
 80046e4:	3001      	adds	r0, #1
 80046e6:	d0ad      	beq.n	8004644 <_printf_i+0x160>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	079b      	lsls	r3, r3, #30
 80046ec:	d413      	bmi.n	8004716 <_printf_i+0x232>
 80046ee:	68e0      	ldr	r0, [r4, #12]
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	4298      	cmp	r0, r3
 80046f4:	bfb8      	it	lt
 80046f6:	4618      	movlt	r0, r3
 80046f8:	e7a6      	b.n	8004648 <_printf_i+0x164>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4632      	mov	r2, r6
 80046fe:	4649      	mov	r1, r9
 8004700:	4640      	mov	r0, r8
 8004702:	47d0      	blx	sl
 8004704:	3001      	adds	r0, #1
 8004706:	d09d      	beq.n	8004644 <_printf_i+0x160>
 8004708:	3501      	adds	r5, #1
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	9903      	ldr	r1, [sp, #12]
 800470e:	1a5b      	subs	r3, r3, r1
 8004710:	42ab      	cmp	r3, r5
 8004712:	dcf2      	bgt.n	80046fa <_printf_i+0x216>
 8004714:	e7eb      	b.n	80046ee <_printf_i+0x20a>
 8004716:	2500      	movs	r5, #0
 8004718:	f104 0619 	add.w	r6, r4, #25
 800471c:	e7f5      	b.n	800470a <_printf_i+0x226>
 800471e:	bf00      	nop
 8004720:	08006bd2 	.word	0x08006bd2
 8004724:	08006be3 	.word	0x08006be3

08004728 <std>:
 8004728:	2300      	movs	r3, #0
 800472a:	b510      	push	{r4, lr}
 800472c:	4604      	mov	r4, r0
 800472e:	e9c0 3300 	strd	r3, r3, [r0]
 8004732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004736:	6083      	str	r3, [r0, #8]
 8004738:	8181      	strh	r1, [r0, #12]
 800473a:	6643      	str	r3, [r0, #100]	; 0x64
 800473c:	81c2      	strh	r2, [r0, #14]
 800473e:	6183      	str	r3, [r0, #24]
 8004740:	4619      	mov	r1, r3
 8004742:	2208      	movs	r2, #8
 8004744:	305c      	adds	r0, #92	; 0x5c
 8004746:	f000 f914 	bl	8004972 <memset>
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <std+0x58>)
 800474c:	6263      	str	r3, [r4, #36]	; 0x24
 800474e:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <std+0x5c>)
 8004750:	62a3      	str	r3, [r4, #40]	; 0x28
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <std+0x60>)
 8004754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <std+0x64>)
 8004758:	6323      	str	r3, [r4, #48]	; 0x30
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <std+0x68>)
 800475c:	6224      	str	r4, [r4, #32]
 800475e:	429c      	cmp	r4, r3
 8004760:	d006      	beq.n	8004770 <std+0x48>
 8004762:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004766:	4294      	cmp	r4, r2
 8004768:	d002      	beq.n	8004770 <std+0x48>
 800476a:	33d0      	adds	r3, #208	; 0xd0
 800476c:	429c      	cmp	r4, r3
 800476e:	d105      	bne.n	800477c <std+0x54>
 8004770:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004778:	f000 b978 	b.w	8004a6c <__retarget_lock_init_recursive>
 800477c:	bd10      	pop	{r4, pc}
 800477e:	bf00      	nop
 8004780:	080048ed 	.word	0x080048ed
 8004784:	0800490f 	.word	0x0800490f
 8004788:	08004947 	.word	0x08004947
 800478c:	0800496b 	.word	0x0800496b
 8004790:	200002bc 	.word	0x200002bc

08004794 <stdio_exit_handler>:
 8004794:	4a02      	ldr	r2, [pc, #8]	; (80047a0 <stdio_exit_handler+0xc>)
 8004796:	4903      	ldr	r1, [pc, #12]	; (80047a4 <stdio_exit_handler+0x10>)
 8004798:	4803      	ldr	r0, [pc, #12]	; (80047a8 <stdio_exit_handler+0x14>)
 800479a:	f000 b869 	b.w	8004870 <_fwalk_sglue>
 800479e:	bf00      	nop
 80047a0:	20000014 	.word	0x20000014
 80047a4:	08006421 	.word	0x08006421
 80047a8:	20000020 	.word	0x20000020

080047ac <cleanup_stdio>:
 80047ac:	6841      	ldr	r1, [r0, #4]
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <cleanup_stdio+0x34>)
 80047b0:	4299      	cmp	r1, r3
 80047b2:	b510      	push	{r4, lr}
 80047b4:	4604      	mov	r4, r0
 80047b6:	d001      	beq.n	80047bc <cleanup_stdio+0x10>
 80047b8:	f001 fe32 	bl	8006420 <_fflush_r>
 80047bc:	68a1      	ldr	r1, [r4, #8]
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <cleanup_stdio+0x38>)
 80047c0:	4299      	cmp	r1, r3
 80047c2:	d002      	beq.n	80047ca <cleanup_stdio+0x1e>
 80047c4:	4620      	mov	r0, r4
 80047c6:	f001 fe2b 	bl	8006420 <_fflush_r>
 80047ca:	68e1      	ldr	r1, [r4, #12]
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <cleanup_stdio+0x3c>)
 80047ce:	4299      	cmp	r1, r3
 80047d0:	d004      	beq.n	80047dc <cleanup_stdio+0x30>
 80047d2:	4620      	mov	r0, r4
 80047d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d8:	f001 be22 	b.w	8006420 <_fflush_r>
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	bf00      	nop
 80047e0:	200002bc 	.word	0x200002bc
 80047e4:	20000324 	.word	0x20000324
 80047e8:	2000038c 	.word	0x2000038c

080047ec <global_stdio_init.part.0>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <global_stdio_init.part.0+0x30>)
 80047f0:	4c0b      	ldr	r4, [pc, #44]	; (8004820 <global_stdio_init.part.0+0x34>)
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <global_stdio_init.part.0+0x38>)
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	4620      	mov	r0, r4
 80047f8:	2200      	movs	r2, #0
 80047fa:	2104      	movs	r1, #4
 80047fc:	f7ff ff94 	bl	8004728 <std>
 8004800:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004804:	2201      	movs	r2, #1
 8004806:	2109      	movs	r1, #9
 8004808:	f7ff ff8e 	bl	8004728 <std>
 800480c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004810:	2202      	movs	r2, #2
 8004812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004816:	2112      	movs	r1, #18
 8004818:	f7ff bf86 	b.w	8004728 <std>
 800481c:	200003f4 	.word	0x200003f4
 8004820:	200002bc 	.word	0x200002bc
 8004824:	08004795 	.word	0x08004795

08004828 <__sfp_lock_acquire>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__sfp_lock_acquire+0x8>)
 800482a:	f000 b920 	b.w	8004a6e <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	200003fd 	.word	0x200003fd

08004834 <__sfp_lock_release>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__sfp_lock_release+0x8>)
 8004836:	f000 b91b 	b.w	8004a70 <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	200003fd 	.word	0x200003fd

08004840 <__sinit>:
 8004840:	b510      	push	{r4, lr}
 8004842:	4604      	mov	r4, r0
 8004844:	f7ff fff0 	bl	8004828 <__sfp_lock_acquire>
 8004848:	6a23      	ldr	r3, [r4, #32]
 800484a:	b11b      	cbz	r3, 8004854 <__sinit+0x14>
 800484c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004850:	f7ff bff0 	b.w	8004834 <__sfp_lock_release>
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <__sinit+0x28>)
 8004856:	6223      	str	r3, [r4, #32]
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <__sinit+0x2c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f5      	bne.n	800484c <__sinit+0xc>
 8004860:	f7ff ffc4 	bl	80047ec <global_stdio_init.part.0>
 8004864:	e7f2      	b.n	800484c <__sinit+0xc>
 8004866:	bf00      	nop
 8004868:	080047ad 	.word	0x080047ad
 800486c:	200003f4 	.word	0x200003f4

08004870 <_fwalk_sglue>:
 8004870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004874:	4607      	mov	r7, r0
 8004876:	4688      	mov	r8, r1
 8004878:	4614      	mov	r4, r2
 800487a:	2600      	movs	r6, #0
 800487c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004880:	f1b9 0901 	subs.w	r9, r9, #1
 8004884:	d505      	bpl.n	8004892 <_fwalk_sglue+0x22>
 8004886:	6824      	ldr	r4, [r4, #0]
 8004888:	2c00      	cmp	r4, #0
 800488a:	d1f7      	bne.n	800487c <_fwalk_sglue+0xc>
 800488c:	4630      	mov	r0, r6
 800488e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004892:	89ab      	ldrh	r3, [r5, #12]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d907      	bls.n	80048a8 <_fwalk_sglue+0x38>
 8004898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800489c:	3301      	adds	r3, #1
 800489e:	d003      	beq.n	80048a8 <_fwalk_sglue+0x38>
 80048a0:	4629      	mov	r1, r5
 80048a2:	4638      	mov	r0, r7
 80048a4:	47c0      	blx	r8
 80048a6:	4306      	orrs	r6, r0
 80048a8:	3568      	adds	r5, #104	; 0x68
 80048aa:	e7e9      	b.n	8004880 <_fwalk_sglue+0x10>

080048ac <siprintf>:
 80048ac:	b40e      	push	{r1, r2, r3}
 80048ae:	b500      	push	{lr}
 80048b0:	b09c      	sub	sp, #112	; 0x70
 80048b2:	ab1d      	add	r3, sp, #116	; 0x74
 80048b4:	9002      	str	r0, [sp, #8]
 80048b6:	9006      	str	r0, [sp, #24]
 80048b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048bc:	4809      	ldr	r0, [pc, #36]	; (80048e4 <siprintf+0x38>)
 80048be:	9107      	str	r1, [sp, #28]
 80048c0:	9104      	str	r1, [sp, #16]
 80048c2:	4909      	ldr	r1, [pc, #36]	; (80048e8 <siprintf+0x3c>)
 80048c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c8:	9105      	str	r1, [sp, #20]
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	a902      	add	r1, sp, #8
 80048d0:	f001 fc22 	bl	8006118 <_svfiprintf_r>
 80048d4:	9b02      	ldr	r3, [sp, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	b01c      	add	sp, #112	; 0x70
 80048dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e0:	b003      	add	sp, #12
 80048e2:	4770      	bx	lr
 80048e4:	2000006c 	.word	0x2000006c
 80048e8:	ffff0208 	.word	0xffff0208

080048ec <__sread>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	460c      	mov	r4, r1
 80048f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f4:	f000 f86c 	bl	80049d0 <_read_r>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	bfab      	itete	ge
 80048fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004900:	181b      	addge	r3, r3, r0
 8004902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004906:	bfac      	ite	ge
 8004908:	6563      	strge	r3, [r4, #84]	; 0x54
 800490a:	81a3      	strhlt	r3, [r4, #12]
 800490c:	bd10      	pop	{r4, pc}

0800490e <__swrite>:
 800490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	461f      	mov	r7, r3
 8004914:	898b      	ldrh	r3, [r1, #12]
 8004916:	05db      	lsls	r3, r3, #23
 8004918:	4605      	mov	r5, r0
 800491a:	460c      	mov	r4, r1
 800491c:	4616      	mov	r6, r2
 800491e:	d505      	bpl.n	800492c <__swrite+0x1e>
 8004920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004924:	2302      	movs	r3, #2
 8004926:	2200      	movs	r2, #0
 8004928:	f000 f840 	bl	80049ac <_lseek_r>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	4632      	mov	r2, r6
 800493a:	463b      	mov	r3, r7
 800493c:	4628      	mov	r0, r5
 800493e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004942:	f000 b857 	b.w	80049f4 <_write_r>

08004946 <__sseek>:
 8004946:	b510      	push	{r4, lr}
 8004948:	460c      	mov	r4, r1
 800494a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494e:	f000 f82d 	bl	80049ac <_lseek_r>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	bf15      	itete	ne
 8004958:	6560      	strne	r0, [r4, #84]	; 0x54
 800495a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800495e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004962:	81a3      	strheq	r3, [r4, #12]
 8004964:	bf18      	it	ne
 8004966:	81a3      	strhne	r3, [r4, #12]
 8004968:	bd10      	pop	{r4, pc}

0800496a <__sclose>:
 800496a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496e:	f000 b80d 	b.w	800498c <_close_r>

08004972 <memset>:
 8004972:	4402      	add	r2, r0
 8004974:	4603      	mov	r3, r0
 8004976:	4293      	cmp	r3, r2
 8004978:	d100      	bne.n	800497c <memset+0xa>
 800497a:	4770      	bx	lr
 800497c:	f803 1b01 	strb.w	r1, [r3], #1
 8004980:	e7f9      	b.n	8004976 <memset+0x4>
	...

08004984 <_localeconv_r>:
 8004984:	4800      	ldr	r0, [pc, #0]	; (8004988 <_localeconv_r+0x4>)
 8004986:	4770      	bx	lr
 8004988:	20000160 	.word	0x20000160

0800498c <_close_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4d06      	ldr	r5, [pc, #24]	; (80049a8 <_close_r+0x1c>)
 8004990:	2300      	movs	r3, #0
 8004992:	4604      	mov	r4, r0
 8004994:	4608      	mov	r0, r1
 8004996:	602b      	str	r3, [r5, #0]
 8004998:	f7fc fef9 	bl	800178e <_close>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <_close_r+0x1a>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	b103      	cbz	r3, 80049a6 <_close_r+0x1a>
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	200003f8 	.word	0x200003f8

080049ac <_lseek_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d07      	ldr	r5, [pc, #28]	; (80049cc <_lseek_r+0x20>)
 80049b0:	4604      	mov	r4, r0
 80049b2:	4608      	mov	r0, r1
 80049b4:	4611      	mov	r1, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	602a      	str	r2, [r5, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f7fc ff0e 	bl	80017dc <_lseek>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_lseek_r+0x1e>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_lseek_r+0x1e>
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	200003f8 	.word	0x200003f8

080049d0 <_read_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4d07      	ldr	r5, [pc, #28]	; (80049f0 <_read_r+0x20>)
 80049d4:	4604      	mov	r4, r0
 80049d6:	4608      	mov	r0, r1
 80049d8:	4611      	mov	r1, r2
 80049da:	2200      	movs	r2, #0
 80049dc:	602a      	str	r2, [r5, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	f7fc fe9c 	bl	800171c <_read>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_read_r+0x1e>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_read_r+0x1e>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	200003f8 	.word	0x200003f8

080049f4 <_write_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4d07      	ldr	r5, [pc, #28]	; (8004a14 <_write_r+0x20>)
 80049f8:	4604      	mov	r4, r0
 80049fa:	4608      	mov	r0, r1
 80049fc:	4611      	mov	r1, r2
 80049fe:	2200      	movs	r2, #0
 8004a00:	602a      	str	r2, [r5, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f7fc fea7 	bl	8001756 <_write>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_write_r+0x1e>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_write_r+0x1e>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	200003f8 	.word	0x200003f8

08004a18 <__errno>:
 8004a18:	4b01      	ldr	r3, [pc, #4]	; (8004a20 <__errno+0x8>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000006c 	.word	0x2000006c

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4d0d      	ldr	r5, [pc, #52]	; (8004a5c <__libc_init_array+0x38>)
 8004a28:	4c0d      	ldr	r4, [pc, #52]	; (8004a60 <__libc_init_array+0x3c>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	2600      	movs	r6, #0
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	4d0b      	ldr	r5, [pc, #44]	; (8004a64 <__libc_init_array+0x40>)
 8004a36:	4c0c      	ldr	r4, [pc, #48]	; (8004a68 <__libc_init_array+0x44>)
 8004a38:	f002 f896 	bl	8006b68 <_init>
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	2600      	movs	r6, #0
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	08006f3c 	.word	0x08006f3c
 8004a60:	08006f3c 	.word	0x08006f3c
 8004a64:	08006f3c 	.word	0x08006f3c
 8004a68:	08006f40 	.word	0x08006f40

08004a6c <__retarget_lock_init_recursive>:
 8004a6c:	4770      	bx	lr

08004a6e <__retarget_lock_acquire_recursive>:
 8004a6e:	4770      	bx	lr

08004a70 <__retarget_lock_release_recursive>:
 8004a70:	4770      	bx	lr

08004a72 <quorem>:
 8004a72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a76:	6903      	ldr	r3, [r0, #16]
 8004a78:	690c      	ldr	r4, [r1, #16]
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	db7e      	blt.n	8004b7e <quorem+0x10c>
 8004a80:	3c01      	subs	r4, #1
 8004a82:	f101 0814 	add.w	r8, r1, #20
 8004a86:	f100 0514 	add.w	r5, r0, #20
 8004a8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004aa0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004aa4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004aa8:	d331      	bcc.n	8004b0e <quorem+0x9c>
 8004aaa:	f04f 0e00 	mov.w	lr, #0
 8004aae:	4640      	mov	r0, r8
 8004ab0:	46ac      	mov	ip, r5
 8004ab2:	46f2      	mov	sl, lr
 8004ab4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ab8:	b293      	uxth	r3, r2
 8004aba:	fb06 e303 	mla	r3, r6, r3, lr
 8004abe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ac2:	0c1a      	lsrs	r2, r3, #16
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	ebaa 0303 	sub.w	r3, sl, r3
 8004aca:	f8dc a000 	ldr.w	sl, [ip]
 8004ace:	fa13 f38a 	uxtah	r3, r3, sl
 8004ad2:	fb06 220e 	mla	r2, r6, lr, r2
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	9b00      	ldr	r3, [sp, #0]
 8004ada:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ae4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ae8:	f8bd 3000 	ldrh.w	r3, [sp]
 8004aec:	4581      	cmp	r9, r0
 8004aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004af2:	f84c 3b04 	str.w	r3, [ip], #4
 8004af6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004afa:	d2db      	bcs.n	8004ab4 <quorem+0x42>
 8004afc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b00:	b92b      	cbnz	r3, 8004b0e <quorem+0x9c>
 8004b02:	9b01      	ldr	r3, [sp, #4]
 8004b04:	3b04      	subs	r3, #4
 8004b06:	429d      	cmp	r5, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	d32c      	bcc.n	8004b66 <quorem+0xf4>
 8004b0c:	613c      	str	r4, [r7, #16]
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f001 f9a8 	bl	8005e64 <__mcmp>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	db22      	blt.n	8004b5e <quorem+0xec>
 8004b18:	3601      	adds	r6, #1
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b22:	f8d1 c000 	ldr.w	ip, [r1]
 8004b26:	b293      	uxth	r3, r2
 8004b28:	1ac3      	subs	r3, r0, r3
 8004b2a:	0c12      	lsrs	r2, r2, #16
 8004b2c:	fa13 f38c 	uxtah	r3, r3, ip
 8004b30:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b3e:	45c1      	cmp	r9, r8
 8004b40:	f841 3b04 	str.w	r3, [r1], #4
 8004b44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b48:	d2e9      	bcs.n	8004b1e <quorem+0xac>
 8004b4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b52:	b922      	cbnz	r2, 8004b5e <quorem+0xec>
 8004b54:	3b04      	subs	r3, #4
 8004b56:	429d      	cmp	r5, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	d30a      	bcc.n	8004b72 <quorem+0x100>
 8004b5c:	613c      	str	r4, [r7, #16]
 8004b5e:	4630      	mov	r0, r6
 8004b60:	b003      	add	sp, #12
 8004b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	d1ce      	bne.n	8004b0c <quorem+0x9a>
 8004b6e:	3c01      	subs	r4, #1
 8004b70:	e7c9      	b.n	8004b06 <quorem+0x94>
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	d1f0      	bne.n	8004b5c <quorem+0xea>
 8004b7a:	3c01      	subs	r4, #1
 8004b7c:	e7eb      	b.n	8004b56 <quorem+0xe4>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e7ee      	b.n	8004b60 <quorem+0xee>
 8004b82:	0000      	movs	r0, r0
 8004b84:	0000      	movs	r0, r0
	...

08004b88 <_dtoa_r>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	ed2d 8b04 	vpush	{d8-d9}
 8004b90:	69c5      	ldr	r5, [r0, #28]
 8004b92:	b093      	sub	sp, #76	; 0x4c
 8004b94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004b98:	ec57 6b10 	vmov	r6, r7, d0
 8004b9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ba0:	9107      	str	r1, [sp, #28]
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ba6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ba8:	b975      	cbnz	r5, 8004bc8 <_dtoa_r+0x40>
 8004baa:	2010      	movs	r0, #16
 8004bac:	f000 fe2a 	bl	8005804 <malloc>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	61e0      	str	r0, [r4, #28]
 8004bb4:	b920      	cbnz	r0, 8004bc0 <_dtoa_r+0x38>
 8004bb6:	4bae      	ldr	r3, [pc, #696]	; (8004e70 <_dtoa_r+0x2e8>)
 8004bb8:	21ef      	movs	r1, #239	; 0xef
 8004bba:	48ae      	ldr	r0, [pc, #696]	; (8004e74 <_dtoa_r+0x2ec>)
 8004bbc:	f001 fc90 	bl	80064e0 <__assert_func>
 8004bc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004bc4:	6005      	str	r5, [r0, #0]
 8004bc6:	60c5      	str	r5, [r0, #12]
 8004bc8:	69e3      	ldr	r3, [r4, #28]
 8004bca:	6819      	ldr	r1, [r3, #0]
 8004bcc:	b151      	cbz	r1, 8004be4 <_dtoa_r+0x5c>
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	604a      	str	r2, [r1, #4]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4093      	lsls	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 ff07 	bl	80059ec <_Bfree>
 8004bde:	69e3      	ldr	r3, [r4, #28]
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	1e3b      	subs	r3, r7, #0
 8004be6:	bfbb      	ittet	lt
 8004be8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bec:	9303      	strlt	r3, [sp, #12]
 8004bee:	2300      	movge	r3, #0
 8004bf0:	2201      	movlt	r2, #1
 8004bf2:	bfac      	ite	ge
 8004bf4:	f8c8 3000 	strge.w	r3, [r8]
 8004bf8:	f8c8 2000 	strlt.w	r2, [r8]
 8004bfc:	4b9e      	ldr	r3, [pc, #632]	; (8004e78 <_dtoa_r+0x2f0>)
 8004bfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c02:	ea33 0308 	bics.w	r3, r3, r8
 8004c06:	d11b      	bne.n	8004c40 <_dtoa_r+0xb8>
 8004c08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004c14:	4333      	orrs	r3, r6
 8004c16:	f000 8593 	beq.w	8005740 <_dtoa_r+0xbb8>
 8004c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c1c:	b963      	cbnz	r3, 8004c38 <_dtoa_r+0xb0>
 8004c1e:	4b97      	ldr	r3, [pc, #604]	; (8004e7c <_dtoa_r+0x2f4>)
 8004c20:	e027      	b.n	8004c72 <_dtoa_r+0xea>
 8004c22:	4b97      	ldr	r3, [pc, #604]	; (8004e80 <_dtoa_r+0x2f8>)
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	3308      	adds	r3, #8
 8004c28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	9800      	ldr	r0, [sp, #0]
 8004c2e:	b013      	add	sp, #76	; 0x4c
 8004c30:	ecbd 8b04 	vpop	{d8-d9}
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	4b90      	ldr	r3, [pc, #576]	; (8004e7c <_dtoa_r+0x2f4>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	3303      	adds	r3, #3
 8004c3e:	e7f3      	b.n	8004c28 <_dtoa_r+0xa0>
 8004c40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	ec51 0b17 	vmov	r0, r1, d7
 8004c4a:	eeb0 8a47 	vmov.f32	s16, s14
 8004c4e:	eef0 8a67 	vmov.f32	s17, s15
 8004c52:	2300      	movs	r3, #0
 8004c54:	f7fb ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c58:	4681      	mov	r9, r0
 8004c5a:	b160      	cbz	r0, 8004c76 <_dtoa_r+0xee>
 8004c5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c5e:	2301      	movs	r3, #1
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8568 	beq.w	800573a <_dtoa_r+0xbb2>
 8004c6a:	4b86      	ldr	r3, [pc, #536]	; (8004e84 <_dtoa_r+0x2fc>)
 8004c6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	e7da      	b.n	8004c2c <_dtoa_r+0xa4>
 8004c76:	aa10      	add	r2, sp, #64	; 0x40
 8004c78:	a911      	add	r1, sp, #68	; 0x44
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c80:	eef0 0a68 	vmov.f32	s1, s17
 8004c84:	f001 f994 	bl	8005fb0 <__d2b>
 8004c88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c8c:	4682      	mov	sl, r0
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	d07f      	beq.n	8004d92 <_dtoa_r+0x20a>
 8004c92:	ee18 3a90 	vmov	r3, s17
 8004c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c9e:	ec51 0b18 	vmov	r0, r1, d8
 8004ca2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004caa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004cae:	4619      	mov	r1, r3
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4b75      	ldr	r3, [pc, #468]	; (8004e88 <_dtoa_r+0x300>)
 8004cb4:	f7fb fae8 	bl	8000288 <__aeabi_dsub>
 8004cb8:	a367      	add	r3, pc, #412	; (adr r3, 8004e58 <_dtoa_r+0x2d0>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fc9b 	bl	80005f8 <__aeabi_dmul>
 8004cc2:	a367      	add	r3, pc, #412	; (adr r3, 8004e60 <_dtoa_r+0x2d8>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f7fb fae0 	bl	800028c <__adddf3>
 8004ccc:	4606      	mov	r6, r0
 8004cce:	4628      	mov	r0, r5
 8004cd0:	460f      	mov	r7, r1
 8004cd2:	f7fb fc27 	bl	8000524 <__aeabi_i2d>
 8004cd6:	a364      	add	r3, pc, #400	; (adr r3, 8004e68 <_dtoa_r+0x2e0>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fc8c 	bl	80005f8 <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	f7fb fad0 	bl	800028c <__adddf3>
 8004cec:	4606      	mov	r6, r0
 8004cee:	460f      	mov	r7, r1
 8004cf0:	f7fb ff32 	bl	8000b58 <__aeabi_d2iz>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4683      	mov	fp, r0
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	f7fb feed 	bl	8000adc <__aeabi_dcmplt>
 8004d02:	b148      	cbz	r0, 8004d18 <_dtoa_r+0x190>
 8004d04:	4658      	mov	r0, fp
 8004d06:	f7fb fc0d 	bl	8000524 <__aeabi_i2d>
 8004d0a:	4632      	mov	r2, r6
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	f7fb fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d12:	b908      	cbnz	r0, 8004d18 <_dtoa_r+0x190>
 8004d14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d18:	f1bb 0f16 	cmp.w	fp, #22
 8004d1c:	d857      	bhi.n	8004dce <_dtoa_r+0x246>
 8004d1e:	4b5b      	ldr	r3, [pc, #364]	; (8004e8c <_dtoa_r+0x304>)
 8004d20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	ec51 0b18 	vmov	r0, r1, d8
 8004d2c:	f7fb fed6 	bl	8000adc <__aeabi_dcmplt>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d04e      	beq.n	8004dd2 <_dtoa_r+0x24a>
 8004d34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d38:	2300      	movs	r3, #0
 8004d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8004d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d3e:	1b5b      	subs	r3, r3, r5
 8004d40:	1e5a      	subs	r2, r3, #1
 8004d42:	bf45      	ittet	mi
 8004d44:	f1c3 0301 	rsbmi	r3, r3, #1
 8004d48:	9305      	strmi	r3, [sp, #20]
 8004d4a:	2300      	movpl	r3, #0
 8004d4c:	2300      	movmi	r3, #0
 8004d4e:	9206      	str	r2, [sp, #24]
 8004d50:	bf54      	ite	pl
 8004d52:	9305      	strpl	r3, [sp, #20]
 8004d54:	9306      	strmi	r3, [sp, #24]
 8004d56:	f1bb 0f00 	cmp.w	fp, #0
 8004d5a:	db3c      	blt.n	8004dd6 <_dtoa_r+0x24e>
 8004d5c:	9b06      	ldr	r3, [sp, #24]
 8004d5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004d62:	445b      	add	r3, fp
 8004d64:	9306      	str	r3, [sp, #24]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9308      	str	r3, [sp, #32]
 8004d6a:	9b07      	ldr	r3, [sp, #28]
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d868      	bhi.n	8004e42 <_dtoa_r+0x2ba>
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	bfc4      	itt	gt
 8004d74:	3b04      	subgt	r3, #4
 8004d76:	9307      	strgt	r3, [sp, #28]
 8004d78:	9b07      	ldr	r3, [sp, #28]
 8004d7a:	f1a3 0302 	sub.w	r3, r3, #2
 8004d7e:	bfcc      	ite	gt
 8004d80:	2500      	movgt	r5, #0
 8004d82:	2501      	movle	r5, #1
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	f200 8085 	bhi.w	8004e94 <_dtoa_r+0x30c>
 8004d8a:	e8df f003 	tbb	[pc, r3]
 8004d8e:	3b2e      	.short	0x3b2e
 8004d90:	5839      	.short	0x5839
 8004d92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d96:	441d      	add	r5, r3
 8004d98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	bfc1      	itttt	gt
 8004da0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004da4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004da8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004dac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004db0:	bfd6      	itet	le
 8004db2:	f1c3 0320 	rsble	r3, r3, #32
 8004db6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004dba:	fa06 f003 	lslle.w	r0, r6, r3
 8004dbe:	f7fb fba1 	bl	8000504 <__aeabi_ui2d>
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004dc8:	3d01      	subs	r5, #1
 8004dca:	920e      	str	r2, [sp, #56]	; 0x38
 8004dcc:	e76f      	b.n	8004cae <_dtoa_r+0x126>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e7b3      	b.n	8004d3a <_dtoa_r+0x1b2>
 8004dd2:	900c      	str	r0, [sp, #48]	; 0x30
 8004dd4:	e7b2      	b.n	8004d3c <_dtoa_r+0x1b4>
 8004dd6:	9b05      	ldr	r3, [sp, #20]
 8004dd8:	eba3 030b 	sub.w	r3, r3, fp
 8004ddc:	9305      	str	r3, [sp, #20]
 8004dde:	f1cb 0300 	rsb	r3, fp, #0
 8004de2:	9308      	str	r3, [sp, #32]
 8004de4:	2300      	movs	r3, #0
 8004de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de8:	e7bf      	b.n	8004d6a <_dtoa_r+0x1e2>
 8004dea:	2300      	movs	r3, #0
 8004dec:	9309      	str	r3, [sp, #36]	; 0x24
 8004dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	dc52      	bgt.n	8004e9a <_dtoa_r+0x312>
 8004df4:	2301      	movs	r3, #1
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	9304      	str	r3, [sp, #16]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	920a      	str	r2, [sp, #40]	; 0x28
 8004dfe:	e00b      	b.n	8004e18 <_dtoa_r+0x290>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e7f3      	b.n	8004dec <_dtoa_r+0x264>
 8004e04:	2300      	movs	r3, #0
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0a:	445b      	add	r3, fp
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	bfb8      	it	lt
 8004e16:	2301      	movlt	r3, #1
 8004e18:	69e0      	ldr	r0, [r4, #28]
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	f102 0614 	add.w	r6, r2, #20
 8004e22:	429e      	cmp	r6, r3
 8004e24:	d93d      	bls.n	8004ea2 <_dtoa_r+0x31a>
 8004e26:	6041      	str	r1, [r0, #4]
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 fd9f 	bl	800596c <_Balloc>
 8004e2e:	9000      	str	r0, [sp, #0]
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d139      	bne.n	8004ea8 <_dtoa_r+0x320>
 8004e34:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <_dtoa_r+0x308>)
 8004e36:	4602      	mov	r2, r0
 8004e38:	f240 11af 	movw	r1, #431	; 0x1af
 8004e3c:	e6bd      	b.n	8004bba <_dtoa_r+0x32>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e7e1      	b.n	8004e06 <_dtoa_r+0x27e>
 8004e42:	2501      	movs	r5, #1
 8004e44:	2300      	movs	r3, #0
 8004e46:	9307      	str	r3, [sp, #28]
 8004e48:	9509      	str	r5, [sp, #36]	; 0x24
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2312      	movs	r3, #18
 8004e56:	e7d1      	b.n	8004dfc <_dtoa_r+0x274>
 8004e58:	636f4361 	.word	0x636f4361
 8004e5c:	3fd287a7 	.word	0x3fd287a7
 8004e60:	8b60c8b3 	.word	0x8b60c8b3
 8004e64:	3fc68a28 	.word	0x3fc68a28
 8004e68:	509f79fb 	.word	0x509f79fb
 8004e6c:	3fd34413 	.word	0x3fd34413
 8004e70:	08006c01 	.word	0x08006c01
 8004e74:	08006c18 	.word	0x08006c18
 8004e78:	7ff00000 	.word	0x7ff00000
 8004e7c:	08006bfd 	.word	0x08006bfd
 8004e80:	08006bf4 	.word	0x08006bf4
 8004e84:	08006bd1 	.word	0x08006bd1
 8004e88:	3ff80000 	.word	0x3ff80000
 8004e8c:	08006d08 	.word	0x08006d08
 8004e90:	08006c70 	.word	0x08006c70
 8004e94:	2301      	movs	r3, #1
 8004e96:	9309      	str	r3, [sp, #36]	; 0x24
 8004e98:	e7d7      	b.n	8004e4a <_dtoa_r+0x2c2>
 8004e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	e7ba      	b.n	8004e18 <_dtoa_r+0x290>
 8004ea2:	3101      	adds	r1, #1
 8004ea4:	0052      	lsls	r2, r2, #1
 8004ea6:	e7ba      	b.n	8004e1e <_dtoa_r+0x296>
 8004ea8:	69e3      	ldr	r3, [r4, #28]
 8004eaa:	9a00      	ldr	r2, [sp, #0]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	9b04      	ldr	r3, [sp, #16]
 8004eb0:	2b0e      	cmp	r3, #14
 8004eb2:	f200 80a8 	bhi.w	8005006 <_dtoa_r+0x47e>
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	f000 80a5 	beq.w	8005006 <_dtoa_r+0x47e>
 8004ebc:	f1bb 0f00 	cmp.w	fp, #0
 8004ec0:	dd38      	ble.n	8004f34 <_dtoa_r+0x3ac>
 8004ec2:	4bc0      	ldr	r3, [pc, #768]	; (80051c4 <_dtoa_r+0x63c>)
 8004ec4:	f00b 020f 	and.w	r2, fp, #15
 8004ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ecc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004ed0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004ed4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004ed8:	d019      	beq.n	8004f0e <_dtoa_r+0x386>
 8004eda:	4bbb      	ldr	r3, [pc, #748]	; (80051c8 <_dtoa_r+0x640>)
 8004edc:	ec51 0b18 	vmov	r0, r1, d8
 8004ee0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ee4:	f7fb fcb2 	bl	800084c <__aeabi_ddiv>
 8004ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eec:	f008 080f 	and.w	r8, r8, #15
 8004ef0:	2503      	movs	r5, #3
 8004ef2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80051c8 <_dtoa_r+0x640>
 8004ef6:	f1b8 0f00 	cmp.w	r8, #0
 8004efa:	d10a      	bne.n	8004f12 <_dtoa_r+0x38a>
 8004efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f00:	4632      	mov	r2, r6
 8004f02:	463b      	mov	r3, r7
 8004f04:	f7fb fca2 	bl	800084c <__aeabi_ddiv>
 8004f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f0c:	e02b      	b.n	8004f66 <_dtoa_r+0x3de>
 8004f0e:	2502      	movs	r5, #2
 8004f10:	e7ef      	b.n	8004ef2 <_dtoa_r+0x36a>
 8004f12:	f018 0f01 	tst.w	r8, #1
 8004f16:	d008      	beq.n	8004f2a <_dtoa_r+0x3a2>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004f20:	f7fb fb6a 	bl	80005f8 <__aeabi_dmul>
 8004f24:	3501      	adds	r5, #1
 8004f26:	4606      	mov	r6, r0
 8004f28:	460f      	mov	r7, r1
 8004f2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f2e:	f109 0908 	add.w	r9, r9, #8
 8004f32:	e7e0      	b.n	8004ef6 <_dtoa_r+0x36e>
 8004f34:	f000 809f 	beq.w	8005076 <_dtoa_r+0x4ee>
 8004f38:	f1cb 0600 	rsb	r6, fp, #0
 8004f3c:	4ba1      	ldr	r3, [pc, #644]	; (80051c4 <_dtoa_r+0x63c>)
 8004f3e:	4fa2      	ldr	r7, [pc, #648]	; (80051c8 <_dtoa_r+0x640>)
 8004f40:	f006 020f 	and.w	r2, r6, #15
 8004f44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	ec51 0b18 	vmov	r0, r1, d8
 8004f50:	f7fb fb52 	bl	80005f8 <__aeabi_dmul>
 8004f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f58:	1136      	asrs	r6, r6, #4
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2502      	movs	r5, #2
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	d17e      	bne.n	8005060 <_dtoa_r+0x4d8>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1d0      	bne.n	8004f08 <_dtoa_r+0x380>
 8004f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8084 	beq.w	800507a <_dtoa_r+0x4f2>
 8004f72:	4b96      	ldr	r3, [pc, #600]	; (80051cc <_dtoa_r+0x644>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f7fb fdaf 	bl	8000adc <__aeabi_dcmplt>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d07b      	beq.n	800507a <_dtoa_r+0x4f2>
 8004f82:	9b04      	ldr	r3, [sp, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d078      	beq.n	800507a <_dtoa_r+0x4f2>
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	dd39      	ble.n	8005002 <_dtoa_r+0x47a>
 8004f8e:	4b90      	ldr	r3, [pc, #576]	; (80051d0 <_dtoa_r+0x648>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f7fb fb2f 	bl	80005f8 <__aeabi_dmul>
 8004f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9e:	9e01      	ldr	r6, [sp, #4]
 8004fa0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004faa:	4628      	mov	r0, r5
 8004fac:	f7fb faba 	bl	8000524 <__aeabi_i2d>
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	f7fb fb20 	bl	80005f8 <__aeabi_dmul>
 8004fb8:	4b86      	ldr	r3, [pc, #536]	; (80051d4 <_dtoa_r+0x64c>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f7fb f966 	bl	800028c <__adddf3>
 8004fc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc8:	9303      	str	r3, [sp, #12]
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	d158      	bne.n	8005080 <_dtoa_r+0x4f8>
 8004fce:	4b82      	ldr	r3, [pc, #520]	; (80051d8 <_dtoa_r+0x650>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	f7fb f957 	bl	8000288 <__aeabi_dsub>
 8004fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fde:	4680      	mov	r8, r0
 8004fe0:	4689      	mov	r9, r1
 8004fe2:	f7fb fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f040 8296 	bne.w	8005518 <_dtoa_r+0x990>
 8004fec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	f7fb fd70 	bl	8000adc <__aeabi_dcmplt>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	f040 8289 	bne.w	8005514 <_dtoa_r+0x98c>
 8005002:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005008:	2b00      	cmp	r3, #0
 800500a:	f2c0 814e 	blt.w	80052aa <_dtoa_r+0x722>
 800500e:	f1bb 0f0e 	cmp.w	fp, #14
 8005012:	f300 814a 	bgt.w	80052aa <_dtoa_r+0x722>
 8005016:	4b6b      	ldr	r3, [pc, #428]	; (80051c4 <_dtoa_r+0x63c>)
 8005018:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800501c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	f280 80dc 	bge.w	80051e0 <_dtoa_r+0x658>
 8005028:	9b04      	ldr	r3, [sp, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f300 80d8 	bgt.w	80051e0 <_dtoa_r+0x658>
 8005030:	f040 826f 	bne.w	8005512 <_dtoa_r+0x98a>
 8005034:	4b68      	ldr	r3, [pc, #416]	; (80051d8 <_dtoa_r+0x650>)
 8005036:	2200      	movs	r2, #0
 8005038:	4640      	mov	r0, r8
 800503a:	4649      	mov	r1, r9
 800503c:	f7fb fadc 	bl	80005f8 <__aeabi_dmul>
 8005040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005044:	f7fb fd5e 	bl	8000b04 <__aeabi_dcmpge>
 8005048:	9e04      	ldr	r6, [sp, #16]
 800504a:	4637      	mov	r7, r6
 800504c:	2800      	cmp	r0, #0
 800504e:	f040 8245 	bne.w	80054dc <_dtoa_r+0x954>
 8005052:	9d00      	ldr	r5, [sp, #0]
 8005054:	2331      	movs	r3, #49	; 0x31
 8005056:	f805 3b01 	strb.w	r3, [r5], #1
 800505a:	f10b 0b01 	add.w	fp, fp, #1
 800505e:	e241      	b.n	80054e4 <_dtoa_r+0x95c>
 8005060:	07f2      	lsls	r2, r6, #31
 8005062:	d505      	bpl.n	8005070 <_dtoa_r+0x4e8>
 8005064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005068:	f7fb fac6 	bl	80005f8 <__aeabi_dmul>
 800506c:	3501      	adds	r5, #1
 800506e:	2301      	movs	r3, #1
 8005070:	1076      	asrs	r6, r6, #1
 8005072:	3708      	adds	r7, #8
 8005074:	e773      	b.n	8004f5e <_dtoa_r+0x3d6>
 8005076:	2502      	movs	r5, #2
 8005078:	e775      	b.n	8004f66 <_dtoa_r+0x3de>
 800507a:	9e04      	ldr	r6, [sp, #16]
 800507c:	465f      	mov	r7, fp
 800507e:	e792      	b.n	8004fa6 <_dtoa_r+0x41e>
 8005080:	9900      	ldr	r1, [sp, #0]
 8005082:	4b50      	ldr	r3, [pc, #320]	; (80051c4 <_dtoa_r+0x63c>)
 8005084:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005088:	4431      	add	r1, r6
 800508a:	9102      	str	r1, [sp, #8]
 800508c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800508e:	eeb0 9a47 	vmov.f32	s18, s14
 8005092:	eef0 9a67 	vmov.f32	s19, s15
 8005096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800509a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800509e:	2900      	cmp	r1, #0
 80050a0:	d044      	beq.n	800512c <_dtoa_r+0x5a4>
 80050a2:	494e      	ldr	r1, [pc, #312]	; (80051dc <_dtoa_r+0x654>)
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7fb fbd1 	bl	800084c <__aeabi_ddiv>
 80050aa:	ec53 2b19 	vmov	r2, r3, d9
 80050ae:	f7fb f8eb 	bl	8000288 <__aeabi_dsub>
 80050b2:	9d00      	ldr	r5, [sp, #0]
 80050b4:	ec41 0b19 	vmov	d9, r0, r1
 80050b8:	4649      	mov	r1, r9
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7fb fd4c 	bl	8000b58 <__aeabi_d2iz>
 80050c0:	4606      	mov	r6, r0
 80050c2:	f7fb fa2f 	bl	8000524 <__aeabi_i2d>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4640      	mov	r0, r8
 80050cc:	4649      	mov	r1, r9
 80050ce:	f7fb f8db 	bl	8000288 <__aeabi_dsub>
 80050d2:	3630      	adds	r6, #48	; 0x30
 80050d4:	f805 6b01 	strb.w	r6, [r5], #1
 80050d8:	ec53 2b19 	vmov	r2, r3, d9
 80050dc:	4680      	mov	r8, r0
 80050de:	4689      	mov	r9, r1
 80050e0:	f7fb fcfc 	bl	8000adc <__aeabi_dcmplt>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d164      	bne.n	80051b2 <_dtoa_r+0x62a>
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	4937      	ldr	r1, [pc, #220]	; (80051cc <_dtoa_r+0x644>)
 80050ee:	2000      	movs	r0, #0
 80050f0:	f7fb f8ca 	bl	8000288 <__aeabi_dsub>
 80050f4:	ec53 2b19 	vmov	r2, r3, d9
 80050f8:	f7fb fcf0 	bl	8000adc <__aeabi_dcmplt>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f040 80b6 	bne.w	800526e <_dtoa_r+0x6e6>
 8005102:	9b02      	ldr	r3, [sp, #8]
 8005104:	429d      	cmp	r5, r3
 8005106:	f43f af7c 	beq.w	8005002 <_dtoa_r+0x47a>
 800510a:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <_dtoa_r+0x648>)
 800510c:	ec51 0b19 	vmov	r0, r1, d9
 8005110:	2200      	movs	r2, #0
 8005112:	f7fb fa71 	bl	80005f8 <__aeabi_dmul>
 8005116:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <_dtoa_r+0x648>)
 8005118:	ec41 0b19 	vmov	d9, r0, r1
 800511c:	2200      	movs	r2, #0
 800511e:	4640      	mov	r0, r8
 8005120:	4649      	mov	r1, r9
 8005122:	f7fb fa69 	bl	80005f8 <__aeabi_dmul>
 8005126:	4680      	mov	r8, r0
 8005128:	4689      	mov	r9, r1
 800512a:	e7c5      	b.n	80050b8 <_dtoa_r+0x530>
 800512c:	ec51 0b17 	vmov	r0, r1, d7
 8005130:	f7fb fa62 	bl	80005f8 <__aeabi_dmul>
 8005134:	9b02      	ldr	r3, [sp, #8]
 8005136:	9d00      	ldr	r5, [sp, #0]
 8005138:	930f      	str	r3, [sp, #60]	; 0x3c
 800513a:	ec41 0b19 	vmov	d9, r0, r1
 800513e:	4649      	mov	r1, r9
 8005140:	4640      	mov	r0, r8
 8005142:	f7fb fd09 	bl	8000b58 <__aeabi_d2iz>
 8005146:	4606      	mov	r6, r0
 8005148:	f7fb f9ec 	bl	8000524 <__aeabi_i2d>
 800514c:	3630      	adds	r6, #48	; 0x30
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	f7fb f897 	bl	8000288 <__aeabi_dsub>
 800515a:	f805 6b01 	strb.w	r6, [r5], #1
 800515e:	9b02      	ldr	r3, [sp, #8]
 8005160:	429d      	cmp	r5, r3
 8005162:	4680      	mov	r8, r0
 8005164:	4689      	mov	r9, r1
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	d124      	bne.n	80051b6 <_dtoa_r+0x62e>
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <_dtoa_r+0x654>)
 800516e:	ec51 0b19 	vmov	r0, r1, d9
 8005172:	f7fb f88b 	bl	800028c <__adddf3>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4640      	mov	r0, r8
 800517c:	4649      	mov	r1, r9
 800517e:	f7fb fccb 	bl	8000b18 <__aeabi_dcmpgt>
 8005182:	2800      	cmp	r0, #0
 8005184:	d173      	bne.n	800526e <_dtoa_r+0x6e6>
 8005186:	ec53 2b19 	vmov	r2, r3, d9
 800518a:	4914      	ldr	r1, [pc, #80]	; (80051dc <_dtoa_r+0x654>)
 800518c:	2000      	movs	r0, #0
 800518e:	f7fb f87b 	bl	8000288 <__aeabi_dsub>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	f7fb fc9f 	bl	8000adc <__aeabi_dcmplt>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f43f af2f 	beq.w	8005002 <_dtoa_r+0x47a>
 80051a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80051a6:	1e6b      	subs	r3, r5, #1
 80051a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80051aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051ae:	2b30      	cmp	r3, #48	; 0x30
 80051b0:	d0f8      	beq.n	80051a4 <_dtoa_r+0x61c>
 80051b2:	46bb      	mov	fp, r7
 80051b4:	e04a      	b.n	800524c <_dtoa_r+0x6c4>
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <_dtoa_r+0x648>)
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	4680      	mov	r8, r0
 80051be:	4689      	mov	r9, r1
 80051c0:	e7bd      	b.n	800513e <_dtoa_r+0x5b6>
 80051c2:	bf00      	nop
 80051c4:	08006d08 	.word	0x08006d08
 80051c8:	08006ce0 	.word	0x08006ce0
 80051cc:	3ff00000 	.word	0x3ff00000
 80051d0:	40240000 	.word	0x40240000
 80051d4:	401c0000 	.word	0x401c0000
 80051d8:	40140000 	.word	0x40140000
 80051dc:	3fe00000 	.word	0x3fe00000
 80051e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051e4:	9d00      	ldr	r5, [sp, #0]
 80051e6:	4642      	mov	r2, r8
 80051e8:	464b      	mov	r3, r9
 80051ea:	4630      	mov	r0, r6
 80051ec:	4639      	mov	r1, r7
 80051ee:	f7fb fb2d 	bl	800084c <__aeabi_ddiv>
 80051f2:	f7fb fcb1 	bl	8000b58 <__aeabi_d2iz>
 80051f6:	9001      	str	r0, [sp, #4]
 80051f8:	f7fb f994 	bl	8000524 <__aeabi_i2d>
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	f7fb f9fa 	bl	80005f8 <__aeabi_dmul>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4630      	mov	r0, r6
 800520a:	4639      	mov	r1, r7
 800520c:	f7fb f83c 	bl	8000288 <__aeabi_dsub>
 8005210:	9e01      	ldr	r6, [sp, #4]
 8005212:	9f04      	ldr	r7, [sp, #16]
 8005214:	3630      	adds	r6, #48	; 0x30
 8005216:	f805 6b01 	strb.w	r6, [r5], #1
 800521a:	9e00      	ldr	r6, [sp, #0]
 800521c:	1bae      	subs	r6, r5, r6
 800521e:	42b7      	cmp	r7, r6
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	d134      	bne.n	8005290 <_dtoa_r+0x708>
 8005226:	f7fb f831 	bl	800028c <__adddf3>
 800522a:	4642      	mov	r2, r8
 800522c:	464b      	mov	r3, r9
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	f7fb fc71 	bl	8000b18 <__aeabi_dcmpgt>
 8005236:	b9c8      	cbnz	r0, 800526c <_dtoa_r+0x6e4>
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f7fb fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8005244:	b110      	cbz	r0, 800524c <_dtoa_r+0x6c4>
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	07db      	lsls	r3, r3, #31
 800524a:	d40f      	bmi.n	800526c <_dtoa_r+0x6e4>
 800524c:	4651      	mov	r1, sl
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fbcc 	bl	80059ec <_Bfree>
 8005254:	2300      	movs	r3, #0
 8005256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005258:	702b      	strb	r3, [r5, #0]
 800525a:	f10b 0301 	add.w	r3, fp, #1
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005262:	2b00      	cmp	r3, #0
 8005264:	f43f ace2 	beq.w	8004c2c <_dtoa_r+0xa4>
 8005268:	601d      	str	r5, [r3, #0]
 800526a:	e4df      	b.n	8004c2c <_dtoa_r+0xa4>
 800526c:	465f      	mov	r7, fp
 800526e:	462b      	mov	r3, r5
 8005270:	461d      	mov	r5, r3
 8005272:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005276:	2a39      	cmp	r2, #57	; 0x39
 8005278:	d106      	bne.n	8005288 <_dtoa_r+0x700>
 800527a:	9a00      	ldr	r2, [sp, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d1f7      	bne.n	8005270 <_dtoa_r+0x6e8>
 8005280:	9900      	ldr	r1, [sp, #0]
 8005282:	2230      	movs	r2, #48	; 0x30
 8005284:	3701      	adds	r7, #1
 8005286:	700a      	strb	r2, [r1, #0]
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	3201      	adds	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e790      	b.n	80051b2 <_dtoa_r+0x62a>
 8005290:	4ba3      	ldr	r3, [pc, #652]	; (8005520 <_dtoa_r+0x998>)
 8005292:	2200      	movs	r2, #0
 8005294:	f7fb f9b0 	bl	80005f8 <__aeabi_dmul>
 8005298:	2200      	movs	r2, #0
 800529a:	2300      	movs	r3, #0
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	f7fb fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d09e      	beq.n	80051e6 <_dtoa_r+0x65e>
 80052a8:	e7d0      	b.n	800524c <_dtoa_r+0x6c4>
 80052aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ac:	2a00      	cmp	r2, #0
 80052ae:	f000 80ca 	beq.w	8005446 <_dtoa_r+0x8be>
 80052b2:	9a07      	ldr	r2, [sp, #28]
 80052b4:	2a01      	cmp	r2, #1
 80052b6:	f300 80ad 	bgt.w	8005414 <_dtoa_r+0x88c>
 80052ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052bc:	2a00      	cmp	r2, #0
 80052be:	f000 80a5 	beq.w	800540c <_dtoa_r+0x884>
 80052c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052c6:	9e08      	ldr	r6, [sp, #32]
 80052c8:	9d05      	ldr	r5, [sp, #20]
 80052ca:	9a05      	ldr	r2, [sp, #20]
 80052cc:	441a      	add	r2, r3
 80052ce:	9205      	str	r2, [sp, #20]
 80052d0:	9a06      	ldr	r2, [sp, #24]
 80052d2:	2101      	movs	r1, #1
 80052d4:	441a      	add	r2, r3
 80052d6:	4620      	mov	r0, r4
 80052d8:	9206      	str	r2, [sp, #24]
 80052da:	f000 fc3d 	bl	8005b58 <__i2b>
 80052de:	4607      	mov	r7, r0
 80052e0:	b165      	cbz	r5, 80052fc <_dtoa_r+0x774>
 80052e2:	9b06      	ldr	r3, [sp, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dd09      	ble.n	80052fc <_dtoa_r+0x774>
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	9a05      	ldr	r2, [sp, #20]
 80052ec:	bfa8      	it	ge
 80052ee:	462b      	movge	r3, r5
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	9205      	str	r2, [sp, #20]
 80052f4:	9a06      	ldr	r2, [sp, #24]
 80052f6:	1aed      	subs	r5, r5, r3
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	9306      	str	r3, [sp, #24]
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	b1f3      	cbz	r3, 800533e <_dtoa_r+0x7b6>
 8005300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80a3 	beq.w	800544e <_dtoa_r+0x8c6>
 8005308:	2e00      	cmp	r6, #0
 800530a:	dd10      	ble.n	800532e <_dtoa_r+0x7a6>
 800530c:	4639      	mov	r1, r7
 800530e:	4632      	mov	r2, r6
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fce1 	bl	8005cd8 <__pow5mult>
 8005316:	4652      	mov	r2, sl
 8005318:	4601      	mov	r1, r0
 800531a:	4607      	mov	r7, r0
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fc31 	bl	8005b84 <__multiply>
 8005322:	4651      	mov	r1, sl
 8005324:	4680      	mov	r8, r0
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fb60 	bl	80059ec <_Bfree>
 800532c:	46c2      	mov	sl, r8
 800532e:	9b08      	ldr	r3, [sp, #32]
 8005330:	1b9a      	subs	r2, r3, r6
 8005332:	d004      	beq.n	800533e <_dtoa_r+0x7b6>
 8005334:	4651      	mov	r1, sl
 8005336:	4620      	mov	r0, r4
 8005338:	f000 fcce 	bl	8005cd8 <__pow5mult>
 800533c:	4682      	mov	sl, r0
 800533e:	2101      	movs	r1, #1
 8005340:	4620      	mov	r0, r4
 8005342:	f000 fc09 	bl	8005b58 <__i2b>
 8005346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	4606      	mov	r6, r0
 800534c:	f340 8081 	ble.w	8005452 <_dtoa_r+0x8ca>
 8005350:	461a      	mov	r2, r3
 8005352:	4601      	mov	r1, r0
 8005354:	4620      	mov	r0, r4
 8005356:	f000 fcbf 	bl	8005cd8 <__pow5mult>
 800535a:	9b07      	ldr	r3, [sp, #28]
 800535c:	2b01      	cmp	r3, #1
 800535e:	4606      	mov	r6, r0
 8005360:	dd7a      	ble.n	8005458 <_dtoa_r+0x8d0>
 8005362:	f04f 0800 	mov.w	r8, #0
 8005366:	6933      	ldr	r3, [r6, #16]
 8005368:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800536c:	6918      	ldr	r0, [r3, #16]
 800536e:	f000 fba5 	bl	8005abc <__hi0bits>
 8005372:	f1c0 0020 	rsb	r0, r0, #32
 8005376:	9b06      	ldr	r3, [sp, #24]
 8005378:	4418      	add	r0, r3
 800537a:	f010 001f 	ands.w	r0, r0, #31
 800537e:	f000 8094 	beq.w	80054aa <_dtoa_r+0x922>
 8005382:	f1c0 0320 	rsb	r3, r0, #32
 8005386:	2b04      	cmp	r3, #4
 8005388:	f340 8085 	ble.w	8005496 <_dtoa_r+0x90e>
 800538c:	9b05      	ldr	r3, [sp, #20]
 800538e:	f1c0 001c 	rsb	r0, r0, #28
 8005392:	4403      	add	r3, r0
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	9b06      	ldr	r3, [sp, #24]
 8005398:	4403      	add	r3, r0
 800539a:	4405      	add	r5, r0
 800539c:	9306      	str	r3, [sp, #24]
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	dd05      	ble.n	80053b0 <_dtoa_r+0x828>
 80053a4:	4651      	mov	r1, sl
 80053a6:	461a      	mov	r2, r3
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fcef 	bl	8005d8c <__lshift>
 80053ae:	4682      	mov	sl, r0
 80053b0:	9b06      	ldr	r3, [sp, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dd05      	ble.n	80053c2 <_dtoa_r+0x83a>
 80053b6:	4631      	mov	r1, r6
 80053b8:	461a      	mov	r2, r3
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 fce6 	bl	8005d8c <__lshift>
 80053c0:	4606      	mov	r6, r0
 80053c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d072      	beq.n	80054ae <_dtoa_r+0x926>
 80053c8:	4631      	mov	r1, r6
 80053ca:	4650      	mov	r0, sl
 80053cc:	f000 fd4a 	bl	8005e64 <__mcmp>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	da6c      	bge.n	80054ae <_dtoa_r+0x926>
 80053d4:	2300      	movs	r3, #0
 80053d6:	4651      	mov	r1, sl
 80053d8:	220a      	movs	r2, #10
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 fb28 	bl	8005a30 <__multadd>
 80053e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053e6:	4682      	mov	sl, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 81b0 	beq.w	800574e <_dtoa_r+0xbc6>
 80053ee:	2300      	movs	r3, #0
 80053f0:	4639      	mov	r1, r7
 80053f2:	220a      	movs	r2, #10
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fb1b 	bl	8005a30 <__multadd>
 80053fa:	9b01      	ldr	r3, [sp, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	4607      	mov	r7, r0
 8005400:	f300 8096 	bgt.w	8005530 <_dtoa_r+0x9a8>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	2b02      	cmp	r3, #2
 8005408:	dc59      	bgt.n	80054be <_dtoa_r+0x936>
 800540a:	e091      	b.n	8005530 <_dtoa_r+0x9a8>
 800540c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800540e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005412:	e758      	b.n	80052c6 <_dtoa_r+0x73e>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	1e5e      	subs	r6, r3, #1
 8005418:	9b08      	ldr	r3, [sp, #32]
 800541a:	42b3      	cmp	r3, r6
 800541c:	bfbf      	itttt	lt
 800541e:	9b08      	ldrlt	r3, [sp, #32]
 8005420:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005422:	9608      	strlt	r6, [sp, #32]
 8005424:	1af3      	sublt	r3, r6, r3
 8005426:	bfb4      	ite	lt
 8005428:	18d2      	addlt	r2, r2, r3
 800542a:	1b9e      	subge	r6, r3, r6
 800542c:	9b04      	ldr	r3, [sp, #16]
 800542e:	bfbc      	itt	lt
 8005430:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005432:	2600      	movlt	r6, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfb7      	itett	lt
 8005438:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800543c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005440:	1a9d      	sublt	r5, r3, r2
 8005442:	2300      	movlt	r3, #0
 8005444:	e741      	b.n	80052ca <_dtoa_r+0x742>
 8005446:	9e08      	ldr	r6, [sp, #32]
 8005448:	9d05      	ldr	r5, [sp, #20]
 800544a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800544c:	e748      	b.n	80052e0 <_dtoa_r+0x758>
 800544e:	9a08      	ldr	r2, [sp, #32]
 8005450:	e770      	b.n	8005334 <_dtoa_r+0x7ac>
 8005452:	9b07      	ldr	r3, [sp, #28]
 8005454:	2b01      	cmp	r3, #1
 8005456:	dc19      	bgt.n	800548c <_dtoa_r+0x904>
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	b9bb      	cbnz	r3, 800548c <_dtoa_r+0x904>
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005462:	b99b      	cbnz	r3, 800548c <_dtoa_r+0x904>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800546a:	0d1b      	lsrs	r3, r3, #20
 800546c:	051b      	lsls	r3, r3, #20
 800546e:	b183      	cbz	r3, 8005492 <_dtoa_r+0x90a>
 8005470:	9b05      	ldr	r3, [sp, #20]
 8005472:	3301      	adds	r3, #1
 8005474:	9305      	str	r3, [sp, #20]
 8005476:	9b06      	ldr	r3, [sp, #24]
 8005478:	3301      	adds	r3, #1
 800547a:	9306      	str	r3, [sp, #24]
 800547c:	f04f 0801 	mov.w	r8, #1
 8005480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005482:	2b00      	cmp	r3, #0
 8005484:	f47f af6f 	bne.w	8005366 <_dtoa_r+0x7de>
 8005488:	2001      	movs	r0, #1
 800548a:	e774      	b.n	8005376 <_dtoa_r+0x7ee>
 800548c:	f04f 0800 	mov.w	r8, #0
 8005490:	e7f6      	b.n	8005480 <_dtoa_r+0x8f8>
 8005492:	4698      	mov	r8, r3
 8005494:	e7f4      	b.n	8005480 <_dtoa_r+0x8f8>
 8005496:	d082      	beq.n	800539e <_dtoa_r+0x816>
 8005498:	9a05      	ldr	r2, [sp, #20]
 800549a:	331c      	adds	r3, #28
 800549c:	441a      	add	r2, r3
 800549e:	9205      	str	r2, [sp, #20]
 80054a0:	9a06      	ldr	r2, [sp, #24]
 80054a2:	441a      	add	r2, r3
 80054a4:	441d      	add	r5, r3
 80054a6:	9206      	str	r2, [sp, #24]
 80054a8:	e779      	b.n	800539e <_dtoa_r+0x816>
 80054aa:	4603      	mov	r3, r0
 80054ac:	e7f4      	b.n	8005498 <_dtoa_r+0x910>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	dc37      	bgt.n	8005524 <_dtoa_r+0x99c>
 80054b4:	9b07      	ldr	r3, [sp, #28]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	dd34      	ble.n	8005524 <_dtoa_r+0x99c>
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	b963      	cbnz	r3, 80054dc <_dtoa_r+0x954>
 80054c2:	4631      	mov	r1, r6
 80054c4:	2205      	movs	r2, #5
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fab2 	bl	8005a30 <__multadd>
 80054cc:	4601      	mov	r1, r0
 80054ce:	4606      	mov	r6, r0
 80054d0:	4650      	mov	r0, sl
 80054d2:	f000 fcc7 	bl	8005e64 <__mcmp>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f73f adbb 	bgt.w	8005052 <_dtoa_r+0x4ca>
 80054dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054de:	9d00      	ldr	r5, [sp, #0]
 80054e0:	ea6f 0b03 	mvn.w	fp, r3
 80054e4:	f04f 0800 	mov.w	r8, #0
 80054e8:	4631      	mov	r1, r6
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 fa7e 	bl	80059ec <_Bfree>
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	f43f aeab 	beq.w	800524c <_dtoa_r+0x6c4>
 80054f6:	f1b8 0f00 	cmp.w	r8, #0
 80054fa:	d005      	beq.n	8005508 <_dtoa_r+0x980>
 80054fc:	45b8      	cmp	r8, r7
 80054fe:	d003      	beq.n	8005508 <_dtoa_r+0x980>
 8005500:	4641      	mov	r1, r8
 8005502:	4620      	mov	r0, r4
 8005504:	f000 fa72 	bl	80059ec <_Bfree>
 8005508:	4639      	mov	r1, r7
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fa6e 	bl	80059ec <_Bfree>
 8005510:	e69c      	b.n	800524c <_dtoa_r+0x6c4>
 8005512:	2600      	movs	r6, #0
 8005514:	4637      	mov	r7, r6
 8005516:	e7e1      	b.n	80054dc <_dtoa_r+0x954>
 8005518:	46bb      	mov	fp, r7
 800551a:	4637      	mov	r7, r6
 800551c:	e599      	b.n	8005052 <_dtoa_r+0x4ca>
 800551e:	bf00      	nop
 8005520:	40240000 	.word	0x40240000
 8005524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80c8 	beq.w	80056bc <_dtoa_r+0xb34>
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	2d00      	cmp	r5, #0
 8005532:	dd05      	ble.n	8005540 <_dtoa_r+0x9b8>
 8005534:	4639      	mov	r1, r7
 8005536:	462a      	mov	r2, r5
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fc27 	bl	8005d8c <__lshift>
 800553e:	4607      	mov	r7, r0
 8005540:	f1b8 0f00 	cmp.w	r8, #0
 8005544:	d05b      	beq.n	80055fe <_dtoa_r+0xa76>
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4620      	mov	r0, r4
 800554a:	f000 fa0f 	bl	800596c <_Balloc>
 800554e:	4605      	mov	r5, r0
 8005550:	b928      	cbnz	r0, 800555e <_dtoa_r+0x9d6>
 8005552:	4b83      	ldr	r3, [pc, #524]	; (8005760 <_dtoa_r+0xbd8>)
 8005554:	4602      	mov	r2, r0
 8005556:	f240 21ef 	movw	r1, #751	; 0x2ef
 800555a:	f7ff bb2e 	b.w	8004bba <_dtoa_r+0x32>
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	3202      	adds	r2, #2
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	f107 010c 	add.w	r1, r7, #12
 8005568:	300c      	adds	r0, #12
 800556a:	f000 ffab 	bl	80064c4 <memcpy>
 800556e:	2201      	movs	r2, #1
 8005570:	4629      	mov	r1, r5
 8005572:	4620      	mov	r0, r4
 8005574:	f000 fc0a 	bl	8005d8c <__lshift>
 8005578:	9b00      	ldr	r3, [sp, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	9304      	str	r3, [sp, #16]
 800557e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005582:	4413      	add	r3, r2
 8005584:	9308      	str	r3, [sp, #32]
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	46b8      	mov	r8, r7
 800558e:	9306      	str	r3, [sp, #24]
 8005590:	4607      	mov	r7, r0
 8005592:	9b04      	ldr	r3, [sp, #16]
 8005594:	4631      	mov	r1, r6
 8005596:	3b01      	subs	r3, #1
 8005598:	4650      	mov	r0, sl
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	f7ff fa69 	bl	8004a72 <quorem>
 80055a0:	4641      	mov	r1, r8
 80055a2:	9002      	str	r0, [sp, #8]
 80055a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055a8:	4650      	mov	r0, sl
 80055aa:	f000 fc5b 	bl	8005e64 <__mcmp>
 80055ae:	463a      	mov	r2, r7
 80055b0:	9005      	str	r0, [sp, #20]
 80055b2:	4631      	mov	r1, r6
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 fc71 	bl	8005e9c <__mdiff>
 80055ba:	68c2      	ldr	r2, [r0, #12]
 80055bc:	4605      	mov	r5, r0
 80055be:	bb02      	cbnz	r2, 8005602 <_dtoa_r+0xa7a>
 80055c0:	4601      	mov	r1, r0
 80055c2:	4650      	mov	r0, sl
 80055c4:	f000 fc4e 	bl	8005e64 <__mcmp>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4629      	mov	r1, r5
 80055cc:	4620      	mov	r0, r4
 80055ce:	9209      	str	r2, [sp, #36]	; 0x24
 80055d0:	f000 fa0c 	bl	80059ec <_Bfree>
 80055d4:	9b07      	ldr	r3, [sp, #28]
 80055d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d8:	9d04      	ldr	r5, [sp, #16]
 80055da:	ea43 0102 	orr.w	r1, r3, r2
 80055de:	9b06      	ldr	r3, [sp, #24]
 80055e0:	4319      	orrs	r1, r3
 80055e2:	d110      	bne.n	8005606 <_dtoa_r+0xa7e>
 80055e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055e8:	d029      	beq.n	800563e <_dtoa_r+0xab6>
 80055ea:	9b05      	ldr	r3, [sp, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dd02      	ble.n	80055f6 <_dtoa_r+0xa6e>
 80055f0:	9b02      	ldr	r3, [sp, #8]
 80055f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	f883 9000 	strb.w	r9, [r3]
 80055fc:	e774      	b.n	80054e8 <_dtoa_r+0x960>
 80055fe:	4638      	mov	r0, r7
 8005600:	e7ba      	b.n	8005578 <_dtoa_r+0x9f0>
 8005602:	2201      	movs	r2, #1
 8005604:	e7e1      	b.n	80055ca <_dtoa_r+0xa42>
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	db04      	blt.n	8005616 <_dtoa_r+0xa8e>
 800560c:	9907      	ldr	r1, [sp, #28]
 800560e:	430b      	orrs	r3, r1
 8005610:	9906      	ldr	r1, [sp, #24]
 8005612:	430b      	orrs	r3, r1
 8005614:	d120      	bne.n	8005658 <_dtoa_r+0xad0>
 8005616:	2a00      	cmp	r2, #0
 8005618:	dded      	ble.n	80055f6 <_dtoa_r+0xa6e>
 800561a:	4651      	mov	r1, sl
 800561c:	2201      	movs	r2, #1
 800561e:	4620      	mov	r0, r4
 8005620:	f000 fbb4 	bl	8005d8c <__lshift>
 8005624:	4631      	mov	r1, r6
 8005626:	4682      	mov	sl, r0
 8005628:	f000 fc1c 	bl	8005e64 <__mcmp>
 800562c:	2800      	cmp	r0, #0
 800562e:	dc03      	bgt.n	8005638 <_dtoa_r+0xab0>
 8005630:	d1e1      	bne.n	80055f6 <_dtoa_r+0xa6e>
 8005632:	f019 0f01 	tst.w	r9, #1
 8005636:	d0de      	beq.n	80055f6 <_dtoa_r+0xa6e>
 8005638:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800563c:	d1d8      	bne.n	80055f0 <_dtoa_r+0xa68>
 800563e:	9a01      	ldr	r2, [sp, #4]
 8005640:	2339      	movs	r3, #57	; 0x39
 8005642:	7013      	strb	r3, [r2, #0]
 8005644:	462b      	mov	r3, r5
 8005646:	461d      	mov	r5, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800564e:	2a39      	cmp	r2, #57	; 0x39
 8005650:	d06c      	beq.n	800572c <_dtoa_r+0xba4>
 8005652:	3201      	adds	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e747      	b.n	80054e8 <_dtoa_r+0x960>
 8005658:	2a00      	cmp	r2, #0
 800565a:	dd07      	ble.n	800566c <_dtoa_r+0xae4>
 800565c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005660:	d0ed      	beq.n	800563e <_dtoa_r+0xab6>
 8005662:	9a01      	ldr	r2, [sp, #4]
 8005664:	f109 0301 	add.w	r3, r9, #1
 8005668:	7013      	strb	r3, [r2, #0]
 800566a:	e73d      	b.n	80054e8 <_dtoa_r+0x960>
 800566c:	9b04      	ldr	r3, [sp, #16]
 800566e:	9a08      	ldr	r2, [sp, #32]
 8005670:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005674:	4293      	cmp	r3, r2
 8005676:	d043      	beq.n	8005700 <_dtoa_r+0xb78>
 8005678:	4651      	mov	r1, sl
 800567a:	2300      	movs	r3, #0
 800567c:	220a      	movs	r2, #10
 800567e:	4620      	mov	r0, r4
 8005680:	f000 f9d6 	bl	8005a30 <__multadd>
 8005684:	45b8      	cmp	r8, r7
 8005686:	4682      	mov	sl, r0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f04f 020a 	mov.w	r2, #10
 8005690:	4641      	mov	r1, r8
 8005692:	4620      	mov	r0, r4
 8005694:	d107      	bne.n	80056a6 <_dtoa_r+0xb1e>
 8005696:	f000 f9cb 	bl	8005a30 <__multadd>
 800569a:	4680      	mov	r8, r0
 800569c:	4607      	mov	r7, r0
 800569e:	9b04      	ldr	r3, [sp, #16]
 80056a0:	3301      	adds	r3, #1
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	e775      	b.n	8005592 <_dtoa_r+0xa0a>
 80056a6:	f000 f9c3 	bl	8005a30 <__multadd>
 80056aa:	4639      	mov	r1, r7
 80056ac:	4680      	mov	r8, r0
 80056ae:	2300      	movs	r3, #0
 80056b0:	220a      	movs	r2, #10
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f9bc 	bl	8005a30 <__multadd>
 80056b8:	4607      	mov	r7, r0
 80056ba:	e7f0      	b.n	800569e <_dtoa_r+0xb16>
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	9d00      	ldr	r5, [sp, #0]
 80056c2:	4631      	mov	r1, r6
 80056c4:	4650      	mov	r0, sl
 80056c6:	f7ff f9d4 	bl	8004a72 <quorem>
 80056ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	f805 9b01 	strb.w	r9, [r5], #1
 80056d4:	1aea      	subs	r2, r5, r3
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	4293      	cmp	r3, r2
 80056da:	dd07      	ble.n	80056ec <_dtoa_r+0xb64>
 80056dc:	4651      	mov	r1, sl
 80056de:	2300      	movs	r3, #0
 80056e0:	220a      	movs	r2, #10
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f9a4 	bl	8005a30 <__multadd>
 80056e8:	4682      	mov	sl, r0
 80056ea:	e7ea      	b.n	80056c2 <_dtoa_r+0xb3a>
 80056ec:	9b01      	ldr	r3, [sp, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfc8      	it	gt
 80056f2:	461d      	movgt	r5, r3
 80056f4:	9b00      	ldr	r3, [sp, #0]
 80056f6:	bfd8      	it	le
 80056f8:	2501      	movle	r5, #1
 80056fa:	441d      	add	r5, r3
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	4651      	mov	r1, sl
 8005702:	2201      	movs	r2, #1
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fb41 	bl	8005d8c <__lshift>
 800570a:	4631      	mov	r1, r6
 800570c:	4682      	mov	sl, r0
 800570e:	f000 fba9 	bl	8005e64 <__mcmp>
 8005712:	2800      	cmp	r0, #0
 8005714:	dc96      	bgt.n	8005644 <_dtoa_r+0xabc>
 8005716:	d102      	bne.n	800571e <_dtoa_r+0xb96>
 8005718:	f019 0f01 	tst.w	r9, #1
 800571c:	d192      	bne.n	8005644 <_dtoa_r+0xabc>
 800571e:	462b      	mov	r3, r5
 8005720:	461d      	mov	r5, r3
 8005722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005726:	2a30      	cmp	r2, #48	; 0x30
 8005728:	d0fa      	beq.n	8005720 <_dtoa_r+0xb98>
 800572a:	e6dd      	b.n	80054e8 <_dtoa_r+0x960>
 800572c:	9a00      	ldr	r2, [sp, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d189      	bne.n	8005646 <_dtoa_r+0xabe>
 8005732:	f10b 0b01 	add.w	fp, fp, #1
 8005736:	2331      	movs	r3, #49	; 0x31
 8005738:	e796      	b.n	8005668 <_dtoa_r+0xae0>
 800573a:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <_dtoa_r+0xbdc>)
 800573c:	f7ff ba99 	b.w	8004c72 <_dtoa_r+0xea>
 8005740:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005742:	2b00      	cmp	r3, #0
 8005744:	f47f aa6d 	bne.w	8004c22 <_dtoa_r+0x9a>
 8005748:	4b07      	ldr	r3, [pc, #28]	; (8005768 <_dtoa_r+0xbe0>)
 800574a:	f7ff ba92 	b.w	8004c72 <_dtoa_r+0xea>
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	dcb5      	bgt.n	80056c0 <_dtoa_r+0xb38>
 8005754:	9b07      	ldr	r3, [sp, #28]
 8005756:	2b02      	cmp	r3, #2
 8005758:	f73f aeb1 	bgt.w	80054be <_dtoa_r+0x936>
 800575c:	e7b0      	b.n	80056c0 <_dtoa_r+0xb38>
 800575e:	bf00      	nop
 8005760:	08006c70 	.word	0x08006c70
 8005764:	08006bd0 	.word	0x08006bd0
 8005768:	08006bf4 	.word	0x08006bf4

0800576c <_free_r>:
 800576c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800576e:	2900      	cmp	r1, #0
 8005770:	d044      	beq.n	80057fc <_free_r+0x90>
 8005772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f1a1 0404 	sub.w	r4, r1, #4
 800577e:	bfb8      	it	lt
 8005780:	18e4      	addlt	r4, r4, r3
 8005782:	f000 f8e7 	bl	8005954 <__malloc_lock>
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <_free_r+0x94>)
 8005788:	9801      	ldr	r0, [sp, #4]
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	b933      	cbnz	r3, 800579c <_free_r+0x30>
 800578e:	6063      	str	r3, [r4, #4]
 8005790:	6014      	str	r4, [r2, #0]
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005798:	f000 b8e2 	b.w	8005960 <__malloc_unlock>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d908      	bls.n	80057b2 <_free_r+0x46>
 80057a0:	6825      	ldr	r5, [r4, #0]
 80057a2:	1961      	adds	r1, r4, r5
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1949      	addeq	r1, r1, r5
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	e7ed      	b.n	800578e <_free_r+0x22>
 80057b2:	461a      	mov	r2, r3
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b10b      	cbz	r3, 80057bc <_free_r+0x50>
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	d9fa      	bls.n	80057b2 <_free_r+0x46>
 80057bc:	6811      	ldr	r1, [r2, #0]
 80057be:	1855      	adds	r5, r2, r1
 80057c0:	42a5      	cmp	r5, r4
 80057c2:	d10b      	bne.n	80057dc <_free_r+0x70>
 80057c4:	6824      	ldr	r4, [r4, #0]
 80057c6:	4421      	add	r1, r4
 80057c8:	1854      	adds	r4, r2, r1
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	d1e0      	bne.n	8005792 <_free_r+0x26>
 80057d0:	681c      	ldr	r4, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	6053      	str	r3, [r2, #4]
 80057d6:	440c      	add	r4, r1
 80057d8:	6014      	str	r4, [r2, #0]
 80057da:	e7da      	b.n	8005792 <_free_r+0x26>
 80057dc:	d902      	bls.n	80057e4 <_free_r+0x78>
 80057de:	230c      	movs	r3, #12
 80057e0:	6003      	str	r3, [r0, #0]
 80057e2:	e7d6      	b.n	8005792 <_free_r+0x26>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf04      	itt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	bf04      	itt	eq
 80057f4:	1949      	addeq	r1, r1, r5
 80057f6:	6021      	streq	r1, [r4, #0]
 80057f8:	6054      	str	r4, [r2, #4]
 80057fa:	e7ca      	b.n	8005792 <_free_r+0x26>
 80057fc:	b003      	add	sp, #12
 80057fe:	bd30      	pop	{r4, r5, pc}
 8005800:	20000400 	.word	0x20000400

08005804 <malloc>:
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <malloc+0xc>)
 8005806:	4601      	mov	r1, r0
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	f000 b823 	b.w	8005854 <_malloc_r>
 800580e:	bf00      	nop
 8005810:	2000006c 	.word	0x2000006c

08005814 <sbrk_aligned>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4e0e      	ldr	r6, [pc, #56]	; (8005850 <sbrk_aligned+0x3c>)
 8005818:	460c      	mov	r4, r1
 800581a:	6831      	ldr	r1, [r6, #0]
 800581c:	4605      	mov	r5, r0
 800581e:	b911      	cbnz	r1, 8005826 <sbrk_aligned+0x12>
 8005820:	f000 fe40 	bl	80064a4 <_sbrk_r>
 8005824:	6030      	str	r0, [r6, #0]
 8005826:	4621      	mov	r1, r4
 8005828:	4628      	mov	r0, r5
 800582a:	f000 fe3b 	bl	80064a4 <_sbrk_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d00a      	beq.n	8005848 <sbrk_aligned+0x34>
 8005832:	1cc4      	adds	r4, r0, #3
 8005834:	f024 0403 	bic.w	r4, r4, #3
 8005838:	42a0      	cmp	r0, r4
 800583a:	d007      	beq.n	800584c <sbrk_aligned+0x38>
 800583c:	1a21      	subs	r1, r4, r0
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fe30 	bl	80064a4 <_sbrk_r>
 8005844:	3001      	adds	r0, #1
 8005846:	d101      	bne.n	800584c <sbrk_aligned+0x38>
 8005848:	f04f 34ff 	mov.w	r4, #4294967295
 800584c:	4620      	mov	r0, r4
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	20000404 	.word	0x20000404

08005854 <_malloc_r>:
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	1ccd      	adds	r5, r1, #3
 800585a:	f025 0503 	bic.w	r5, r5, #3
 800585e:	3508      	adds	r5, #8
 8005860:	2d0c      	cmp	r5, #12
 8005862:	bf38      	it	cc
 8005864:	250c      	movcc	r5, #12
 8005866:	2d00      	cmp	r5, #0
 8005868:	4607      	mov	r7, r0
 800586a:	db01      	blt.n	8005870 <_malloc_r+0x1c>
 800586c:	42a9      	cmp	r1, r5
 800586e:	d905      	bls.n	800587c <_malloc_r+0x28>
 8005870:	230c      	movs	r3, #12
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	2600      	movs	r6, #0
 8005876:	4630      	mov	r0, r6
 8005878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005950 <_malloc_r+0xfc>
 8005880:	f000 f868 	bl	8005954 <__malloc_lock>
 8005884:	f8d8 3000 	ldr.w	r3, [r8]
 8005888:	461c      	mov	r4, r3
 800588a:	bb5c      	cbnz	r4, 80058e4 <_malloc_r+0x90>
 800588c:	4629      	mov	r1, r5
 800588e:	4638      	mov	r0, r7
 8005890:	f7ff ffc0 	bl	8005814 <sbrk_aligned>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	4604      	mov	r4, r0
 8005898:	d155      	bne.n	8005946 <_malloc_r+0xf2>
 800589a:	f8d8 4000 	ldr.w	r4, [r8]
 800589e:	4626      	mov	r6, r4
 80058a0:	2e00      	cmp	r6, #0
 80058a2:	d145      	bne.n	8005930 <_malloc_r+0xdc>
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	d048      	beq.n	800593a <_malloc_r+0xe6>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	4631      	mov	r1, r6
 80058ac:	4638      	mov	r0, r7
 80058ae:	eb04 0903 	add.w	r9, r4, r3
 80058b2:	f000 fdf7 	bl	80064a4 <_sbrk_r>
 80058b6:	4581      	cmp	r9, r0
 80058b8:	d13f      	bne.n	800593a <_malloc_r+0xe6>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	1a6d      	subs	r5, r5, r1
 80058be:	4629      	mov	r1, r5
 80058c0:	4638      	mov	r0, r7
 80058c2:	f7ff ffa7 	bl	8005814 <sbrk_aligned>
 80058c6:	3001      	adds	r0, #1
 80058c8:	d037      	beq.n	800593a <_malloc_r+0xe6>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	442b      	add	r3, r5
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	f8d8 3000 	ldr.w	r3, [r8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d038      	beq.n	800594a <_malloc_r+0xf6>
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	42a2      	cmp	r2, r4
 80058dc:	d12b      	bne.n	8005936 <_malloc_r+0xe2>
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e00f      	b.n	8005904 <_malloc_r+0xb0>
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	1b52      	subs	r2, r2, r5
 80058e8:	d41f      	bmi.n	800592a <_malloc_r+0xd6>
 80058ea:	2a0b      	cmp	r2, #11
 80058ec:	d917      	bls.n	800591e <_malloc_r+0xca>
 80058ee:	1961      	adds	r1, r4, r5
 80058f0:	42a3      	cmp	r3, r4
 80058f2:	6025      	str	r5, [r4, #0]
 80058f4:	bf18      	it	ne
 80058f6:	6059      	strne	r1, [r3, #4]
 80058f8:	6863      	ldr	r3, [r4, #4]
 80058fa:	bf08      	it	eq
 80058fc:	f8c8 1000 	streq.w	r1, [r8]
 8005900:	5162      	str	r2, [r4, r5]
 8005902:	604b      	str	r3, [r1, #4]
 8005904:	4638      	mov	r0, r7
 8005906:	f104 060b 	add.w	r6, r4, #11
 800590a:	f000 f829 	bl	8005960 <__malloc_unlock>
 800590e:	f026 0607 	bic.w	r6, r6, #7
 8005912:	1d23      	adds	r3, r4, #4
 8005914:	1af2      	subs	r2, r6, r3
 8005916:	d0ae      	beq.n	8005876 <_malloc_r+0x22>
 8005918:	1b9b      	subs	r3, r3, r6
 800591a:	50a3      	str	r3, [r4, r2]
 800591c:	e7ab      	b.n	8005876 <_malloc_r+0x22>
 800591e:	42a3      	cmp	r3, r4
 8005920:	6862      	ldr	r2, [r4, #4]
 8005922:	d1dd      	bne.n	80058e0 <_malloc_r+0x8c>
 8005924:	f8c8 2000 	str.w	r2, [r8]
 8005928:	e7ec      	b.n	8005904 <_malloc_r+0xb0>
 800592a:	4623      	mov	r3, r4
 800592c:	6864      	ldr	r4, [r4, #4]
 800592e:	e7ac      	b.n	800588a <_malloc_r+0x36>
 8005930:	4634      	mov	r4, r6
 8005932:	6876      	ldr	r6, [r6, #4]
 8005934:	e7b4      	b.n	80058a0 <_malloc_r+0x4c>
 8005936:	4613      	mov	r3, r2
 8005938:	e7cc      	b.n	80058d4 <_malloc_r+0x80>
 800593a:	230c      	movs	r3, #12
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4638      	mov	r0, r7
 8005940:	f000 f80e 	bl	8005960 <__malloc_unlock>
 8005944:	e797      	b.n	8005876 <_malloc_r+0x22>
 8005946:	6025      	str	r5, [r4, #0]
 8005948:	e7dc      	b.n	8005904 <_malloc_r+0xb0>
 800594a:	605b      	str	r3, [r3, #4]
 800594c:	deff      	udf	#255	; 0xff
 800594e:	bf00      	nop
 8005950:	20000400 	.word	0x20000400

08005954 <__malloc_lock>:
 8005954:	4801      	ldr	r0, [pc, #4]	; (800595c <__malloc_lock+0x8>)
 8005956:	f7ff b88a 	b.w	8004a6e <__retarget_lock_acquire_recursive>
 800595a:	bf00      	nop
 800595c:	200003fc 	.word	0x200003fc

08005960 <__malloc_unlock>:
 8005960:	4801      	ldr	r0, [pc, #4]	; (8005968 <__malloc_unlock+0x8>)
 8005962:	f7ff b885 	b.w	8004a70 <__retarget_lock_release_recursive>
 8005966:	bf00      	nop
 8005968:	200003fc 	.word	0x200003fc

0800596c <_Balloc>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	69c6      	ldr	r6, [r0, #28]
 8005970:	4604      	mov	r4, r0
 8005972:	460d      	mov	r5, r1
 8005974:	b976      	cbnz	r6, 8005994 <_Balloc+0x28>
 8005976:	2010      	movs	r0, #16
 8005978:	f7ff ff44 	bl	8005804 <malloc>
 800597c:	4602      	mov	r2, r0
 800597e:	61e0      	str	r0, [r4, #28]
 8005980:	b920      	cbnz	r0, 800598c <_Balloc+0x20>
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <_Balloc+0x78>)
 8005984:	4818      	ldr	r0, [pc, #96]	; (80059e8 <_Balloc+0x7c>)
 8005986:	216b      	movs	r1, #107	; 0x6b
 8005988:	f000 fdaa 	bl	80064e0 <__assert_func>
 800598c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005990:	6006      	str	r6, [r0, #0]
 8005992:	60c6      	str	r6, [r0, #12]
 8005994:	69e6      	ldr	r6, [r4, #28]
 8005996:	68f3      	ldr	r3, [r6, #12]
 8005998:	b183      	cbz	r3, 80059bc <_Balloc+0x50>
 800599a:	69e3      	ldr	r3, [r4, #28]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059a2:	b9b8      	cbnz	r0, 80059d4 <_Balloc+0x68>
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f605 	lsl.w	r6, r1, r5
 80059aa:	1d72      	adds	r2, r6, #5
 80059ac:	0092      	lsls	r2, r2, #2
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 fdb4 	bl	800651c <_calloc_r>
 80059b4:	b160      	cbz	r0, 80059d0 <_Balloc+0x64>
 80059b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059ba:	e00e      	b.n	80059da <_Balloc+0x6e>
 80059bc:	2221      	movs	r2, #33	; 0x21
 80059be:	2104      	movs	r1, #4
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 fdab 	bl	800651c <_calloc_r>
 80059c6:	69e3      	ldr	r3, [r4, #28]
 80059c8:	60f0      	str	r0, [r6, #12]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e4      	bne.n	800599a <_Balloc+0x2e>
 80059d0:	2000      	movs	r0, #0
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	6802      	ldr	r2, [r0, #0]
 80059d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059da:	2300      	movs	r3, #0
 80059dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059e0:	e7f7      	b.n	80059d2 <_Balloc+0x66>
 80059e2:	bf00      	nop
 80059e4:	08006c01 	.word	0x08006c01
 80059e8:	08006c81 	.word	0x08006c81

080059ec <_Bfree>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	69c6      	ldr	r6, [r0, #28]
 80059f0:	4605      	mov	r5, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b976      	cbnz	r6, 8005a14 <_Bfree+0x28>
 80059f6:	2010      	movs	r0, #16
 80059f8:	f7ff ff04 	bl	8005804 <malloc>
 80059fc:	4602      	mov	r2, r0
 80059fe:	61e8      	str	r0, [r5, #28]
 8005a00:	b920      	cbnz	r0, 8005a0c <_Bfree+0x20>
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <_Bfree+0x3c>)
 8005a04:	4809      	ldr	r0, [pc, #36]	; (8005a2c <_Bfree+0x40>)
 8005a06:	218f      	movs	r1, #143	; 0x8f
 8005a08:	f000 fd6a 	bl	80064e0 <__assert_func>
 8005a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a10:	6006      	str	r6, [r0, #0]
 8005a12:	60c6      	str	r6, [r0, #12]
 8005a14:	b13c      	cbz	r4, 8005a26 <_Bfree+0x3a>
 8005a16:	69eb      	ldr	r3, [r5, #28]
 8005a18:	6862      	ldr	r2, [r4, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a20:	6021      	str	r1, [r4, #0]
 8005a22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	08006c01 	.word	0x08006c01
 8005a2c:	08006c81 	.word	0x08006c81

08005a30 <__multadd>:
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	690d      	ldr	r5, [r1, #16]
 8005a36:	4607      	mov	r7, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	461e      	mov	r6, r3
 8005a3c:	f101 0c14 	add.w	ip, r1, #20
 8005a40:	2000      	movs	r0, #0
 8005a42:	f8dc 3000 	ldr.w	r3, [ip]
 8005a46:	b299      	uxth	r1, r3
 8005a48:	fb02 6101 	mla	r1, r2, r1, r6
 8005a4c:	0c1e      	lsrs	r6, r3, #16
 8005a4e:	0c0b      	lsrs	r3, r1, #16
 8005a50:	fb02 3306 	mla	r3, r2, r6, r3
 8005a54:	b289      	uxth	r1, r1
 8005a56:	3001      	adds	r0, #1
 8005a58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a5c:	4285      	cmp	r5, r0
 8005a5e:	f84c 1b04 	str.w	r1, [ip], #4
 8005a62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a66:	dcec      	bgt.n	8005a42 <__multadd+0x12>
 8005a68:	b30e      	cbz	r6, 8005aae <__multadd+0x7e>
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dc19      	bgt.n	8005aa4 <__multadd+0x74>
 8005a70:	6861      	ldr	r1, [r4, #4]
 8005a72:	4638      	mov	r0, r7
 8005a74:	3101      	adds	r1, #1
 8005a76:	f7ff ff79 	bl	800596c <_Balloc>
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	b928      	cbnz	r0, 8005a8a <__multadd+0x5a>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <__multadd+0x84>)
 8005a82:	480d      	ldr	r0, [pc, #52]	; (8005ab8 <__multadd+0x88>)
 8005a84:	21ba      	movs	r1, #186	; 0xba
 8005a86:	f000 fd2b 	bl	80064e0 <__assert_func>
 8005a8a:	6922      	ldr	r2, [r4, #16]
 8005a8c:	3202      	adds	r2, #2
 8005a8e:	f104 010c 	add.w	r1, r4, #12
 8005a92:	0092      	lsls	r2, r2, #2
 8005a94:	300c      	adds	r0, #12
 8005a96:	f000 fd15 	bl	80064c4 <memcpy>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f7ff ffa5 	bl	80059ec <_Bfree>
 8005aa2:	4644      	mov	r4, r8
 8005aa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005aa8:	3501      	adds	r5, #1
 8005aaa:	615e      	str	r6, [r3, #20]
 8005aac:	6125      	str	r5, [r4, #16]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab4:	08006c70 	.word	0x08006c70
 8005ab8:	08006c81 	.word	0x08006c81

08005abc <__hi0bits>:
 8005abc:	0c03      	lsrs	r3, r0, #16
 8005abe:	041b      	lsls	r3, r3, #16
 8005ac0:	b9d3      	cbnz	r3, 8005af8 <__hi0bits+0x3c>
 8005ac2:	0400      	lsls	r0, r0, #16
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005aca:	bf04      	itt	eq
 8005acc:	0200      	lsleq	r0, r0, #8
 8005ace:	3308      	addeq	r3, #8
 8005ad0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ad4:	bf04      	itt	eq
 8005ad6:	0100      	lsleq	r0, r0, #4
 8005ad8:	3304      	addeq	r3, #4
 8005ada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ade:	bf04      	itt	eq
 8005ae0:	0080      	lsleq	r0, r0, #2
 8005ae2:	3302      	addeq	r3, #2
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	db05      	blt.n	8005af4 <__hi0bits+0x38>
 8005ae8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005aec:	f103 0301 	add.w	r3, r3, #1
 8005af0:	bf08      	it	eq
 8005af2:	2320      	moveq	r3, #32
 8005af4:	4618      	mov	r0, r3
 8005af6:	4770      	bx	lr
 8005af8:	2300      	movs	r3, #0
 8005afa:	e7e4      	b.n	8005ac6 <__hi0bits+0xa>

08005afc <__lo0bits>:
 8005afc:	6803      	ldr	r3, [r0, #0]
 8005afe:	f013 0207 	ands.w	r2, r3, #7
 8005b02:	d00c      	beq.n	8005b1e <__lo0bits+0x22>
 8005b04:	07d9      	lsls	r1, r3, #31
 8005b06:	d422      	bmi.n	8005b4e <__lo0bits+0x52>
 8005b08:	079a      	lsls	r2, r3, #30
 8005b0a:	bf49      	itett	mi
 8005b0c:	085b      	lsrmi	r3, r3, #1
 8005b0e:	089b      	lsrpl	r3, r3, #2
 8005b10:	6003      	strmi	r3, [r0, #0]
 8005b12:	2201      	movmi	r2, #1
 8005b14:	bf5c      	itt	pl
 8005b16:	6003      	strpl	r3, [r0, #0]
 8005b18:	2202      	movpl	r2, #2
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4770      	bx	lr
 8005b1e:	b299      	uxth	r1, r3
 8005b20:	b909      	cbnz	r1, 8005b26 <__lo0bits+0x2a>
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	2210      	movs	r2, #16
 8005b26:	b2d9      	uxtb	r1, r3
 8005b28:	b909      	cbnz	r1, 8005b2e <__lo0bits+0x32>
 8005b2a:	3208      	adds	r2, #8
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	0719      	lsls	r1, r3, #28
 8005b30:	bf04      	itt	eq
 8005b32:	091b      	lsreq	r3, r3, #4
 8005b34:	3204      	addeq	r2, #4
 8005b36:	0799      	lsls	r1, r3, #30
 8005b38:	bf04      	itt	eq
 8005b3a:	089b      	lsreq	r3, r3, #2
 8005b3c:	3202      	addeq	r2, #2
 8005b3e:	07d9      	lsls	r1, r3, #31
 8005b40:	d403      	bmi.n	8005b4a <__lo0bits+0x4e>
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	f102 0201 	add.w	r2, r2, #1
 8005b48:	d003      	beq.n	8005b52 <__lo0bits+0x56>
 8005b4a:	6003      	str	r3, [r0, #0]
 8005b4c:	e7e5      	b.n	8005b1a <__lo0bits+0x1e>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	e7e3      	b.n	8005b1a <__lo0bits+0x1e>
 8005b52:	2220      	movs	r2, #32
 8005b54:	e7e1      	b.n	8005b1a <__lo0bits+0x1e>
	...

08005b58 <__i2b>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	f7ff ff05 	bl	800596c <_Balloc>
 8005b62:	4602      	mov	r2, r0
 8005b64:	b928      	cbnz	r0, 8005b72 <__i2b+0x1a>
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <__i2b+0x24>)
 8005b68:	4805      	ldr	r0, [pc, #20]	; (8005b80 <__i2b+0x28>)
 8005b6a:	f240 1145 	movw	r1, #325	; 0x145
 8005b6e:	f000 fcb7 	bl	80064e0 <__assert_func>
 8005b72:	2301      	movs	r3, #1
 8005b74:	6144      	str	r4, [r0, #20]
 8005b76:	6103      	str	r3, [r0, #16]
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08006c70 	.word	0x08006c70
 8005b80:	08006c81 	.word	0x08006c81

08005b84 <__multiply>:
 8005b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b88:	4691      	mov	r9, r2
 8005b8a:	690a      	ldr	r2, [r1, #16]
 8005b8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	bfb8      	it	lt
 8005b94:	460b      	movlt	r3, r1
 8005b96:	460c      	mov	r4, r1
 8005b98:	bfbc      	itt	lt
 8005b9a:	464c      	movlt	r4, r9
 8005b9c:	4699      	movlt	r9, r3
 8005b9e:	6927      	ldr	r7, [r4, #16]
 8005ba0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ba4:	68a3      	ldr	r3, [r4, #8]
 8005ba6:	6861      	ldr	r1, [r4, #4]
 8005ba8:	eb07 060a 	add.w	r6, r7, sl
 8005bac:	42b3      	cmp	r3, r6
 8005bae:	b085      	sub	sp, #20
 8005bb0:	bfb8      	it	lt
 8005bb2:	3101      	addlt	r1, #1
 8005bb4:	f7ff feda 	bl	800596c <_Balloc>
 8005bb8:	b930      	cbnz	r0, 8005bc8 <__multiply+0x44>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4b44      	ldr	r3, [pc, #272]	; (8005cd0 <__multiply+0x14c>)
 8005bbe:	4845      	ldr	r0, [pc, #276]	; (8005cd4 <__multiply+0x150>)
 8005bc0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005bc4:	f000 fc8c 	bl	80064e0 <__assert_func>
 8005bc8:	f100 0514 	add.w	r5, r0, #20
 8005bcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4543      	cmp	r3, r8
 8005bd6:	d321      	bcc.n	8005c1c <__multiply+0x98>
 8005bd8:	f104 0314 	add.w	r3, r4, #20
 8005bdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005be0:	f109 0314 	add.w	r3, r9, #20
 8005be4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005be8:	9202      	str	r2, [sp, #8]
 8005bea:	1b3a      	subs	r2, r7, r4
 8005bec:	3a15      	subs	r2, #21
 8005bee:	f022 0203 	bic.w	r2, r2, #3
 8005bf2:	3204      	adds	r2, #4
 8005bf4:	f104 0115 	add.w	r1, r4, #21
 8005bf8:	428f      	cmp	r7, r1
 8005bfa:	bf38      	it	cc
 8005bfc:	2204      	movcc	r2, #4
 8005bfe:	9201      	str	r2, [sp, #4]
 8005c00:	9a02      	ldr	r2, [sp, #8]
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d80c      	bhi.n	8005c22 <__multiply+0x9e>
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	dd03      	ble.n	8005c14 <__multiply+0x90>
 8005c0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d05b      	beq.n	8005ccc <__multiply+0x148>
 8005c14:	6106      	str	r6, [r0, #16]
 8005c16:	b005      	add	sp, #20
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	f843 2b04 	str.w	r2, [r3], #4
 8005c20:	e7d8      	b.n	8005bd4 <__multiply+0x50>
 8005c22:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c26:	f1ba 0f00 	cmp.w	sl, #0
 8005c2a:	d024      	beq.n	8005c76 <__multiply+0xf2>
 8005c2c:	f104 0e14 	add.w	lr, r4, #20
 8005c30:	46a9      	mov	r9, r5
 8005c32:	f04f 0c00 	mov.w	ip, #0
 8005c36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c3a:	f8d9 1000 	ldr.w	r1, [r9]
 8005c3e:	fa1f fb82 	uxth.w	fp, r2
 8005c42:	b289      	uxth	r1, r1
 8005c44:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c50:	4461      	add	r1, ip
 8005c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c56:	fb0a c20b 	mla	r2, sl, fp, ip
 8005c5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c5e:	b289      	uxth	r1, r1
 8005c60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c64:	4577      	cmp	r7, lr
 8005c66:	f849 1b04 	str.w	r1, [r9], #4
 8005c6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c6e:	d8e2      	bhi.n	8005c36 <__multiply+0xb2>
 8005c70:	9a01      	ldr	r2, [sp, #4]
 8005c72:	f845 c002 	str.w	ip, [r5, r2]
 8005c76:	9a03      	ldr	r2, [sp, #12]
 8005c78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	f1b9 0f00 	cmp.w	r9, #0
 8005c82:	d021      	beq.n	8005cc8 <__multiply+0x144>
 8005c84:	6829      	ldr	r1, [r5, #0]
 8005c86:	f104 0c14 	add.w	ip, r4, #20
 8005c8a:	46ae      	mov	lr, r5
 8005c8c:	f04f 0a00 	mov.w	sl, #0
 8005c90:	f8bc b000 	ldrh.w	fp, [ip]
 8005c94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c98:	fb09 220b 	mla	r2, r9, fp, r2
 8005c9c:	4452      	add	r2, sl
 8005c9e:	b289      	uxth	r1, r1
 8005ca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ca4:	f84e 1b04 	str.w	r1, [lr], #4
 8005ca8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005cac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cb0:	f8be 1000 	ldrh.w	r1, [lr]
 8005cb4:	fb09 110a 	mla	r1, r9, sl, r1
 8005cb8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005cbc:	4567      	cmp	r7, ip
 8005cbe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cc2:	d8e5      	bhi.n	8005c90 <__multiply+0x10c>
 8005cc4:	9a01      	ldr	r2, [sp, #4]
 8005cc6:	50a9      	str	r1, [r5, r2]
 8005cc8:	3504      	adds	r5, #4
 8005cca:	e799      	b.n	8005c00 <__multiply+0x7c>
 8005ccc:	3e01      	subs	r6, #1
 8005cce:	e79b      	b.n	8005c08 <__multiply+0x84>
 8005cd0:	08006c70 	.word	0x08006c70
 8005cd4:	08006c81 	.word	0x08006c81

08005cd8 <__pow5mult>:
 8005cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cdc:	4615      	mov	r5, r2
 8005cde:	f012 0203 	ands.w	r2, r2, #3
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460f      	mov	r7, r1
 8005ce6:	d007      	beq.n	8005cf8 <__pow5mult+0x20>
 8005ce8:	4c25      	ldr	r4, [pc, #148]	; (8005d80 <__pow5mult+0xa8>)
 8005cea:	3a01      	subs	r2, #1
 8005cec:	2300      	movs	r3, #0
 8005cee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cf2:	f7ff fe9d 	bl	8005a30 <__multadd>
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	10ad      	asrs	r5, r5, #2
 8005cfa:	d03d      	beq.n	8005d78 <__pow5mult+0xa0>
 8005cfc:	69f4      	ldr	r4, [r6, #28]
 8005cfe:	b97c      	cbnz	r4, 8005d20 <__pow5mult+0x48>
 8005d00:	2010      	movs	r0, #16
 8005d02:	f7ff fd7f 	bl	8005804 <malloc>
 8005d06:	4602      	mov	r2, r0
 8005d08:	61f0      	str	r0, [r6, #28]
 8005d0a:	b928      	cbnz	r0, 8005d18 <__pow5mult+0x40>
 8005d0c:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <__pow5mult+0xac>)
 8005d0e:	481e      	ldr	r0, [pc, #120]	; (8005d88 <__pow5mult+0xb0>)
 8005d10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005d14:	f000 fbe4 	bl	80064e0 <__assert_func>
 8005d18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d1c:	6004      	str	r4, [r0, #0]
 8005d1e:	60c4      	str	r4, [r0, #12]
 8005d20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005d24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d28:	b94c      	cbnz	r4, 8005d3e <__pow5mult+0x66>
 8005d2a:	f240 2171 	movw	r1, #625	; 0x271
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7ff ff12 	bl	8005b58 <__i2b>
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	6003      	str	r3, [r0, #0]
 8005d3e:	f04f 0900 	mov.w	r9, #0
 8005d42:	07eb      	lsls	r3, r5, #31
 8005d44:	d50a      	bpl.n	8005d5c <__pow5mult+0x84>
 8005d46:	4639      	mov	r1, r7
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ff1a 	bl	8005b84 <__multiply>
 8005d50:	4639      	mov	r1, r7
 8005d52:	4680      	mov	r8, r0
 8005d54:	4630      	mov	r0, r6
 8005d56:	f7ff fe49 	bl	80059ec <_Bfree>
 8005d5a:	4647      	mov	r7, r8
 8005d5c:	106d      	asrs	r5, r5, #1
 8005d5e:	d00b      	beq.n	8005d78 <__pow5mult+0xa0>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	b938      	cbnz	r0, 8005d74 <__pow5mult+0x9c>
 8005d64:	4622      	mov	r2, r4
 8005d66:	4621      	mov	r1, r4
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f7ff ff0b 	bl	8005b84 <__multiply>
 8005d6e:	6020      	str	r0, [r4, #0]
 8005d70:	f8c0 9000 	str.w	r9, [r0]
 8005d74:	4604      	mov	r4, r0
 8005d76:	e7e4      	b.n	8005d42 <__pow5mult+0x6a>
 8005d78:	4638      	mov	r0, r7
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	bf00      	nop
 8005d80:	08006dd0 	.word	0x08006dd0
 8005d84:	08006c01 	.word	0x08006c01
 8005d88:	08006c81 	.word	0x08006c81

08005d8c <__lshift>:
 8005d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d90:	460c      	mov	r4, r1
 8005d92:	6849      	ldr	r1, [r1, #4]
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d9a:	68a3      	ldr	r3, [r4, #8]
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	4691      	mov	r9, r2
 8005da0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005da4:	f108 0601 	add.w	r6, r8, #1
 8005da8:	42b3      	cmp	r3, r6
 8005daa:	db0b      	blt.n	8005dc4 <__lshift+0x38>
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff fddd 	bl	800596c <_Balloc>
 8005db2:	4605      	mov	r5, r0
 8005db4:	b948      	cbnz	r0, 8005dca <__lshift+0x3e>
 8005db6:	4602      	mov	r2, r0
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <__lshift+0xd0>)
 8005dba:	4829      	ldr	r0, [pc, #164]	; (8005e60 <__lshift+0xd4>)
 8005dbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005dc0:	f000 fb8e 	bl	80064e0 <__assert_func>
 8005dc4:	3101      	adds	r1, #1
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	e7ee      	b.n	8005da8 <__lshift+0x1c>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f100 0114 	add.w	r1, r0, #20
 8005dd0:	f100 0210 	add.w	r2, r0, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	4553      	cmp	r3, sl
 8005dd8:	db33      	blt.n	8005e42 <__lshift+0xb6>
 8005dda:	6920      	ldr	r0, [r4, #16]
 8005ddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005de0:	f104 0314 	add.w	r3, r4, #20
 8005de4:	f019 091f 	ands.w	r9, r9, #31
 8005de8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005df0:	d02b      	beq.n	8005e4a <__lshift+0xbe>
 8005df2:	f1c9 0e20 	rsb	lr, r9, #32
 8005df6:	468a      	mov	sl, r1
 8005df8:	2200      	movs	r2, #0
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	fa00 f009 	lsl.w	r0, r0, r9
 8005e00:	4310      	orrs	r0, r2
 8005e02:	f84a 0b04 	str.w	r0, [sl], #4
 8005e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e0a:	459c      	cmp	ip, r3
 8005e0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e10:	d8f3      	bhi.n	8005dfa <__lshift+0x6e>
 8005e12:	ebac 0304 	sub.w	r3, ip, r4
 8005e16:	3b15      	subs	r3, #21
 8005e18:	f023 0303 	bic.w	r3, r3, #3
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	f104 0015 	add.w	r0, r4, #21
 8005e22:	4584      	cmp	ip, r0
 8005e24:	bf38      	it	cc
 8005e26:	2304      	movcc	r3, #4
 8005e28:	50ca      	str	r2, [r1, r3]
 8005e2a:	b10a      	cbz	r2, 8005e30 <__lshift+0xa4>
 8005e2c:	f108 0602 	add.w	r6, r8, #2
 8005e30:	3e01      	subs	r6, #1
 8005e32:	4638      	mov	r0, r7
 8005e34:	612e      	str	r6, [r5, #16]
 8005e36:	4621      	mov	r1, r4
 8005e38:	f7ff fdd8 	bl	80059ec <_Bfree>
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e46:	3301      	adds	r3, #1
 8005e48:	e7c5      	b.n	8005dd6 <__lshift+0x4a>
 8005e4a:	3904      	subs	r1, #4
 8005e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e50:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e54:	459c      	cmp	ip, r3
 8005e56:	d8f9      	bhi.n	8005e4c <__lshift+0xc0>
 8005e58:	e7ea      	b.n	8005e30 <__lshift+0xa4>
 8005e5a:	bf00      	nop
 8005e5c:	08006c70 	.word	0x08006c70
 8005e60:	08006c81 	.word	0x08006c81

08005e64 <__mcmp>:
 8005e64:	b530      	push	{r4, r5, lr}
 8005e66:	6902      	ldr	r2, [r0, #16]
 8005e68:	690c      	ldr	r4, [r1, #16]
 8005e6a:	1b12      	subs	r2, r2, r4
 8005e6c:	d10e      	bne.n	8005e8c <__mcmp+0x28>
 8005e6e:	f100 0314 	add.w	r3, r0, #20
 8005e72:	3114      	adds	r1, #20
 8005e74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e84:	42a5      	cmp	r5, r4
 8005e86:	d003      	beq.n	8005e90 <__mcmp+0x2c>
 8005e88:	d305      	bcc.n	8005e96 <__mcmp+0x32>
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	bd30      	pop	{r4, r5, pc}
 8005e90:	4283      	cmp	r3, r0
 8005e92:	d3f3      	bcc.n	8005e7c <__mcmp+0x18>
 8005e94:	e7fa      	b.n	8005e8c <__mcmp+0x28>
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9a:	e7f7      	b.n	8005e8c <__mcmp+0x28>

08005e9c <__mdiff>:
 8005e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4690      	mov	r8, r2
 8005eaa:	f7ff ffdb 	bl	8005e64 <__mcmp>
 8005eae:	1e05      	subs	r5, r0, #0
 8005eb0:	d110      	bne.n	8005ed4 <__mdiff+0x38>
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff fd59 	bl	800596c <_Balloc>
 8005eba:	b930      	cbnz	r0, 8005eca <__mdiff+0x2e>
 8005ebc:	4b3a      	ldr	r3, [pc, #232]	; (8005fa8 <__mdiff+0x10c>)
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	f240 2137 	movw	r1, #567	; 0x237
 8005ec4:	4839      	ldr	r0, [pc, #228]	; (8005fac <__mdiff+0x110>)
 8005ec6:	f000 fb0b 	bl	80064e0 <__assert_func>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed4:	bfa4      	itt	ge
 8005ed6:	4643      	movge	r3, r8
 8005ed8:	46a0      	movge	r8, r4
 8005eda:	4630      	mov	r0, r6
 8005edc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ee0:	bfa6      	itte	ge
 8005ee2:	461c      	movge	r4, r3
 8005ee4:	2500      	movge	r5, #0
 8005ee6:	2501      	movlt	r5, #1
 8005ee8:	f7ff fd40 	bl	800596c <_Balloc>
 8005eec:	b920      	cbnz	r0, 8005ef8 <__mdiff+0x5c>
 8005eee:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <__mdiff+0x10c>)
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	f240 2145 	movw	r1, #581	; 0x245
 8005ef6:	e7e5      	b.n	8005ec4 <__mdiff+0x28>
 8005ef8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005efc:	6926      	ldr	r6, [r4, #16]
 8005efe:	60c5      	str	r5, [r0, #12]
 8005f00:	f104 0914 	add.w	r9, r4, #20
 8005f04:	f108 0514 	add.w	r5, r8, #20
 8005f08:	f100 0e14 	add.w	lr, r0, #20
 8005f0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f14:	f108 0210 	add.w	r2, r8, #16
 8005f18:	46f2      	mov	sl, lr
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f24:	fa11 f88b 	uxtah	r8, r1, fp
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	eba8 0801 	sub.w	r8, r8, r1
 8005f30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f38:	fa1f f888 	uxth.w	r8, r8
 8005f3c:	1419      	asrs	r1, r3, #16
 8005f3e:	454e      	cmp	r6, r9
 8005f40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f44:	f84a 3b04 	str.w	r3, [sl], #4
 8005f48:	d8e8      	bhi.n	8005f1c <__mdiff+0x80>
 8005f4a:	1b33      	subs	r3, r6, r4
 8005f4c:	3b15      	subs	r3, #21
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	3304      	adds	r3, #4
 8005f54:	3415      	adds	r4, #21
 8005f56:	42a6      	cmp	r6, r4
 8005f58:	bf38      	it	cc
 8005f5a:	2304      	movcc	r3, #4
 8005f5c:	441d      	add	r5, r3
 8005f5e:	4473      	add	r3, lr
 8005f60:	469e      	mov	lr, r3
 8005f62:	462e      	mov	r6, r5
 8005f64:	4566      	cmp	r6, ip
 8005f66:	d30e      	bcc.n	8005f86 <__mdiff+0xea>
 8005f68:	f10c 0203 	add.w	r2, ip, #3
 8005f6c:	1b52      	subs	r2, r2, r5
 8005f6e:	f022 0203 	bic.w	r2, r2, #3
 8005f72:	3d03      	subs	r5, #3
 8005f74:	45ac      	cmp	ip, r5
 8005f76:	bf38      	it	cc
 8005f78:	2200      	movcc	r2, #0
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f80:	b17a      	cbz	r2, 8005fa2 <__mdiff+0x106>
 8005f82:	6107      	str	r7, [r0, #16]
 8005f84:	e7a4      	b.n	8005ed0 <__mdiff+0x34>
 8005f86:	f856 8b04 	ldr.w	r8, [r6], #4
 8005f8a:	fa11 f288 	uxtah	r2, r1, r8
 8005f8e:	1414      	asrs	r4, r2, #16
 8005f90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f94:	b292      	uxth	r2, r2
 8005f96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005f9a:	f84e 2b04 	str.w	r2, [lr], #4
 8005f9e:	1421      	asrs	r1, r4, #16
 8005fa0:	e7e0      	b.n	8005f64 <__mdiff+0xc8>
 8005fa2:	3f01      	subs	r7, #1
 8005fa4:	e7ea      	b.n	8005f7c <__mdiff+0xe0>
 8005fa6:	bf00      	nop
 8005fa8:	08006c70 	.word	0x08006c70
 8005fac:	08006c81 	.word	0x08006c81

08005fb0 <__d2b>:
 8005fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	ec59 8b10 	vmov	r8, r9, d0
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	f7ff fcd5 	bl	800596c <_Balloc>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	b930      	cbnz	r0, 8005fd4 <__d2b+0x24>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b24      	ldr	r3, [pc, #144]	; (800605c <__d2b+0xac>)
 8005fca:	4825      	ldr	r0, [pc, #148]	; (8006060 <__d2b+0xb0>)
 8005fcc:	f240 310f 	movw	r1, #783	; 0x30f
 8005fd0:	f000 fa86 	bl	80064e0 <__assert_func>
 8005fd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fdc:	bb2d      	cbnz	r5, 800602a <__d2b+0x7a>
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	f1b8 0300 	subs.w	r3, r8, #0
 8005fe4:	d026      	beq.n	8006034 <__d2b+0x84>
 8005fe6:	4668      	mov	r0, sp
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	f7ff fd87 	bl	8005afc <__lo0bits>
 8005fee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ff2:	b1e8      	cbz	r0, 8006030 <__d2b+0x80>
 8005ff4:	f1c0 0320 	rsb	r3, r0, #32
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	40c2      	lsrs	r2, r0
 8006000:	6163      	str	r3, [r4, #20]
 8006002:	9201      	str	r2, [sp, #4]
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	61a3      	str	r3, [r4, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	bf14      	ite	ne
 800600c:	2202      	movne	r2, #2
 800600e:	2201      	moveq	r2, #1
 8006010:	6122      	str	r2, [r4, #16]
 8006012:	b1bd      	cbz	r5, 8006044 <__d2b+0x94>
 8006014:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006018:	4405      	add	r5, r0
 800601a:	603d      	str	r5, [r7, #0]
 800601c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006020:	6030      	str	r0, [r6, #0]
 8006022:	4620      	mov	r0, r4
 8006024:	b003      	add	sp, #12
 8006026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800602e:	e7d6      	b.n	8005fde <__d2b+0x2e>
 8006030:	6161      	str	r1, [r4, #20]
 8006032:	e7e7      	b.n	8006004 <__d2b+0x54>
 8006034:	a801      	add	r0, sp, #4
 8006036:	f7ff fd61 	bl	8005afc <__lo0bits>
 800603a:	9b01      	ldr	r3, [sp, #4]
 800603c:	6163      	str	r3, [r4, #20]
 800603e:	3020      	adds	r0, #32
 8006040:	2201      	movs	r2, #1
 8006042:	e7e5      	b.n	8006010 <__d2b+0x60>
 8006044:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800604c:	6038      	str	r0, [r7, #0]
 800604e:	6918      	ldr	r0, [r3, #16]
 8006050:	f7ff fd34 	bl	8005abc <__hi0bits>
 8006054:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006058:	e7e2      	b.n	8006020 <__d2b+0x70>
 800605a:	bf00      	nop
 800605c:	08006c70 	.word	0x08006c70
 8006060:	08006c81 	.word	0x08006c81

08006064 <__ssputs_r>:
 8006064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	688e      	ldr	r6, [r1, #8]
 800606a:	461f      	mov	r7, r3
 800606c:	42be      	cmp	r6, r7
 800606e:	680b      	ldr	r3, [r1, #0]
 8006070:	4682      	mov	sl, r0
 8006072:	460c      	mov	r4, r1
 8006074:	4690      	mov	r8, r2
 8006076:	d82c      	bhi.n	80060d2 <__ssputs_r+0x6e>
 8006078:	898a      	ldrh	r2, [r1, #12]
 800607a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800607e:	d026      	beq.n	80060ce <__ssputs_r+0x6a>
 8006080:	6965      	ldr	r5, [r4, #20]
 8006082:	6909      	ldr	r1, [r1, #16]
 8006084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006088:	eba3 0901 	sub.w	r9, r3, r1
 800608c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006090:	1c7b      	adds	r3, r7, #1
 8006092:	444b      	add	r3, r9
 8006094:	106d      	asrs	r5, r5, #1
 8006096:	429d      	cmp	r5, r3
 8006098:	bf38      	it	cc
 800609a:	461d      	movcc	r5, r3
 800609c:	0553      	lsls	r3, r2, #21
 800609e:	d527      	bpl.n	80060f0 <__ssputs_r+0x8c>
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7ff fbd7 	bl	8005854 <_malloc_r>
 80060a6:	4606      	mov	r6, r0
 80060a8:	b360      	cbz	r0, 8006104 <__ssputs_r+0xa0>
 80060aa:	6921      	ldr	r1, [r4, #16]
 80060ac:	464a      	mov	r2, r9
 80060ae:	f000 fa09 	bl	80064c4 <memcpy>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	6126      	str	r6, [r4, #16]
 80060c0:	6165      	str	r5, [r4, #20]
 80060c2:	444e      	add	r6, r9
 80060c4:	eba5 0509 	sub.w	r5, r5, r9
 80060c8:	6026      	str	r6, [r4, #0]
 80060ca:	60a5      	str	r5, [r4, #8]
 80060cc:	463e      	mov	r6, r7
 80060ce:	42be      	cmp	r6, r7
 80060d0:	d900      	bls.n	80060d4 <__ssputs_r+0x70>
 80060d2:	463e      	mov	r6, r7
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4632      	mov	r2, r6
 80060d8:	4641      	mov	r1, r8
 80060da:	f000 f9c9 	bl	8006470 <memmove>
 80060de:	68a3      	ldr	r3, [r4, #8]
 80060e0:	1b9b      	subs	r3, r3, r6
 80060e2:	60a3      	str	r3, [r4, #8]
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	4433      	add	r3, r6
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	2000      	movs	r0, #0
 80060ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f0:	462a      	mov	r2, r5
 80060f2:	f000 fa3b 	bl	800656c <_realloc_r>
 80060f6:	4606      	mov	r6, r0
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d1e0      	bne.n	80060be <__ssputs_r+0x5a>
 80060fc:	6921      	ldr	r1, [r4, #16]
 80060fe:	4650      	mov	r0, sl
 8006100:	f7ff fb34 	bl	800576c <_free_r>
 8006104:	230c      	movs	r3, #12
 8006106:	f8ca 3000 	str.w	r3, [sl]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	f04f 30ff 	mov.w	r0, #4294967295
 8006116:	e7e9      	b.n	80060ec <__ssputs_r+0x88>

08006118 <_svfiprintf_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4698      	mov	r8, r3
 800611e:	898b      	ldrh	r3, [r1, #12]
 8006120:	061b      	lsls	r3, r3, #24
 8006122:	b09d      	sub	sp, #116	; 0x74
 8006124:	4607      	mov	r7, r0
 8006126:	460d      	mov	r5, r1
 8006128:	4614      	mov	r4, r2
 800612a:	d50e      	bpl.n	800614a <_svfiprintf_r+0x32>
 800612c:	690b      	ldr	r3, [r1, #16]
 800612e:	b963      	cbnz	r3, 800614a <_svfiprintf_r+0x32>
 8006130:	2140      	movs	r1, #64	; 0x40
 8006132:	f7ff fb8f 	bl	8005854 <_malloc_r>
 8006136:	6028      	str	r0, [r5, #0]
 8006138:	6128      	str	r0, [r5, #16]
 800613a:	b920      	cbnz	r0, 8006146 <_svfiprintf_r+0x2e>
 800613c:	230c      	movs	r3, #12
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	e0d0      	b.n	80062e8 <_svfiprintf_r+0x1d0>
 8006146:	2340      	movs	r3, #64	; 0x40
 8006148:	616b      	str	r3, [r5, #20]
 800614a:	2300      	movs	r3, #0
 800614c:	9309      	str	r3, [sp, #36]	; 0x24
 800614e:	2320      	movs	r3, #32
 8006150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006154:	f8cd 800c 	str.w	r8, [sp, #12]
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006300 <_svfiprintf_r+0x1e8>
 800615e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006162:	f04f 0901 	mov.w	r9, #1
 8006166:	4623      	mov	r3, r4
 8006168:	469a      	mov	sl, r3
 800616a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800616e:	b10a      	cbz	r2, 8006174 <_svfiprintf_r+0x5c>
 8006170:	2a25      	cmp	r2, #37	; 0x25
 8006172:	d1f9      	bne.n	8006168 <_svfiprintf_r+0x50>
 8006174:	ebba 0b04 	subs.w	fp, sl, r4
 8006178:	d00b      	beq.n	8006192 <_svfiprintf_r+0x7a>
 800617a:	465b      	mov	r3, fp
 800617c:	4622      	mov	r2, r4
 800617e:	4629      	mov	r1, r5
 8006180:	4638      	mov	r0, r7
 8006182:	f7ff ff6f 	bl	8006064 <__ssputs_r>
 8006186:	3001      	adds	r0, #1
 8006188:	f000 80a9 	beq.w	80062de <_svfiprintf_r+0x1c6>
 800618c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618e:	445a      	add	r2, fp
 8006190:	9209      	str	r2, [sp, #36]	; 0x24
 8006192:	f89a 3000 	ldrb.w	r3, [sl]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80a1 	beq.w	80062de <_svfiprintf_r+0x1c6>
 800619c:	2300      	movs	r3, #0
 800619e:	f04f 32ff 	mov.w	r2, #4294967295
 80061a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a6:	f10a 0a01 	add.w	sl, sl, #1
 80061aa:	9304      	str	r3, [sp, #16]
 80061ac:	9307      	str	r3, [sp, #28]
 80061ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061b2:	931a      	str	r3, [sp, #104]	; 0x68
 80061b4:	4654      	mov	r4, sl
 80061b6:	2205      	movs	r2, #5
 80061b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061bc:	4850      	ldr	r0, [pc, #320]	; (8006300 <_svfiprintf_r+0x1e8>)
 80061be:	f7fa f807 	bl	80001d0 <memchr>
 80061c2:	9a04      	ldr	r2, [sp, #16]
 80061c4:	b9d8      	cbnz	r0, 80061fe <_svfiprintf_r+0xe6>
 80061c6:	06d0      	lsls	r0, r2, #27
 80061c8:	bf44      	itt	mi
 80061ca:	2320      	movmi	r3, #32
 80061cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d0:	0711      	lsls	r1, r2, #28
 80061d2:	bf44      	itt	mi
 80061d4:	232b      	movmi	r3, #43	; 0x2b
 80061d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061da:	f89a 3000 	ldrb.w	r3, [sl]
 80061de:	2b2a      	cmp	r3, #42	; 0x2a
 80061e0:	d015      	beq.n	800620e <_svfiprintf_r+0xf6>
 80061e2:	9a07      	ldr	r2, [sp, #28]
 80061e4:	4654      	mov	r4, sl
 80061e6:	2000      	movs	r0, #0
 80061e8:	f04f 0c0a 	mov.w	ip, #10
 80061ec:	4621      	mov	r1, r4
 80061ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f2:	3b30      	subs	r3, #48	; 0x30
 80061f4:	2b09      	cmp	r3, #9
 80061f6:	d94d      	bls.n	8006294 <_svfiprintf_r+0x17c>
 80061f8:	b1b0      	cbz	r0, 8006228 <_svfiprintf_r+0x110>
 80061fa:	9207      	str	r2, [sp, #28]
 80061fc:	e014      	b.n	8006228 <_svfiprintf_r+0x110>
 80061fe:	eba0 0308 	sub.w	r3, r0, r8
 8006202:	fa09 f303 	lsl.w	r3, r9, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	46a2      	mov	sl, r4
 800620c:	e7d2      	b.n	80061b4 <_svfiprintf_r+0x9c>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	9103      	str	r1, [sp, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	bfbb      	ittet	lt
 800621a:	425b      	neglt	r3, r3
 800621c:	f042 0202 	orrlt.w	r2, r2, #2
 8006220:	9307      	strge	r3, [sp, #28]
 8006222:	9307      	strlt	r3, [sp, #28]
 8006224:	bfb8      	it	lt
 8006226:	9204      	strlt	r2, [sp, #16]
 8006228:	7823      	ldrb	r3, [r4, #0]
 800622a:	2b2e      	cmp	r3, #46	; 0x2e
 800622c:	d10c      	bne.n	8006248 <_svfiprintf_r+0x130>
 800622e:	7863      	ldrb	r3, [r4, #1]
 8006230:	2b2a      	cmp	r3, #42	; 0x2a
 8006232:	d134      	bne.n	800629e <_svfiprintf_r+0x186>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	9203      	str	r2, [sp, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	bfb8      	it	lt
 8006240:	f04f 33ff 	movlt.w	r3, #4294967295
 8006244:	3402      	adds	r4, #2
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006310 <_svfiprintf_r+0x1f8>
 800624c:	7821      	ldrb	r1, [r4, #0]
 800624e:	2203      	movs	r2, #3
 8006250:	4650      	mov	r0, sl
 8006252:	f7f9 ffbd 	bl	80001d0 <memchr>
 8006256:	b138      	cbz	r0, 8006268 <_svfiprintf_r+0x150>
 8006258:	9b04      	ldr	r3, [sp, #16]
 800625a:	eba0 000a 	sub.w	r0, r0, sl
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	4082      	lsls	r2, r0
 8006262:	4313      	orrs	r3, r2
 8006264:	3401      	adds	r4, #1
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626c:	4825      	ldr	r0, [pc, #148]	; (8006304 <_svfiprintf_r+0x1ec>)
 800626e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006272:	2206      	movs	r2, #6
 8006274:	f7f9 ffac 	bl	80001d0 <memchr>
 8006278:	2800      	cmp	r0, #0
 800627a:	d038      	beq.n	80062ee <_svfiprintf_r+0x1d6>
 800627c:	4b22      	ldr	r3, [pc, #136]	; (8006308 <_svfiprintf_r+0x1f0>)
 800627e:	bb1b      	cbnz	r3, 80062c8 <_svfiprintf_r+0x1b0>
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	3307      	adds	r3, #7
 8006284:	f023 0307 	bic.w	r3, r3, #7
 8006288:	3308      	adds	r3, #8
 800628a:	9303      	str	r3, [sp, #12]
 800628c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628e:	4433      	add	r3, r6
 8006290:	9309      	str	r3, [sp, #36]	; 0x24
 8006292:	e768      	b.n	8006166 <_svfiprintf_r+0x4e>
 8006294:	fb0c 3202 	mla	r2, ip, r2, r3
 8006298:	460c      	mov	r4, r1
 800629a:	2001      	movs	r0, #1
 800629c:	e7a6      	b.n	80061ec <_svfiprintf_r+0xd4>
 800629e:	2300      	movs	r3, #0
 80062a0:	3401      	adds	r4, #1
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	4619      	mov	r1, r3
 80062a6:	f04f 0c0a 	mov.w	ip, #10
 80062aa:	4620      	mov	r0, r4
 80062ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062b0:	3a30      	subs	r2, #48	; 0x30
 80062b2:	2a09      	cmp	r2, #9
 80062b4:	d903      	bls.n	80062be <_svfiprintf_r+0x1a6>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0c6      	beq.n	8006248 <_svfiprintf_r+0x130>
 80062ba:	9105      	str	r1, [sp, #20]
 80062bc:	e7c4      	b.n	8006248 <_svfiprintf_r+0x130>
 80062be:	fb0c 2101 	mla	r1, ip, r1, r2
 80062c2:	4604      	mov	r4, r0
 80062c4:	2301      	movs	r3, #1
 80062c6:	e7f0      	b.n	80062aa <_svfiprintf_r+0x192>
 80062c8:	ab03      	add	r3, sp, #12
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	462a      	mov	r2, r5
 80062ce:	4b0f      	ldr	r3, [pc, #60]	; (800630c <_svfiprintf_r+0x1f4>)
 80062d0:	a904      	add	r1, sp, #16
 80062d2:	4638      	mov	r0, r7
 80062d4:	f7fd fe62 	bl	8003f9c <_printf_float>
 80062d8:	1c42      	adds	r2, r0, #1
 80062da:	4606      	mov	r6, r0
 80062dc:	d1d6      	bne.n	800628c <_svfiprintf_r+0x174>
 80062de:	89ab      	ldrh	r3, [r5, #12]
 80062e0:	065b      	lsls	r3, r3, #25
 80062e2:	f53f af2d 	bmi.w	8006140 <_svfiprintf_r+0x28>
 80062e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062e8:	b01d      	add	sp, #116	; 0x74
 80062ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ee:	ab03      	add	r3, sp, #12
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	462a      	mov	r2, r5
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <_svfiprintf_r+0x1f4>)
 80062f6:	a904      	add	r1, sp, #16
 80062f8:	4638      	mov	r0, r7
 80062fa:	f7fe f8f3 	bl	80044e4 <_printf_i>
 80062fe:	e7eb      	b.n	80062d8 <_svfiprintf_r+0x1c0>
 8006300:	08006ddc 	.word	0x08006ddc
 8006304:	08006de6 	.word	0x08006de6
 8006308:	08003f9d 	.word	0x08003f9d
 800630c:	08006065 	.word	0x08006065
 8006310:	08006de2 	.word	0x08006de2

08006314 <__sflush_r>:
 8006314:	898a      	ldrh	r2, [r1, #12]
 8006316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631a:	4605      	mov	r5, r0
 800631c:	0710      	lsls	r0, r2, #28
 800631e:	460c      	mov	r4, r1
 8006320:	d458      	bmi.n	80063d4 <__sflush_r+0xc0>
 8006322:	684b      	ldr	r3, [r1, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc05      	bgt.n	8006334 <__sflush_r+0x20>
 8006328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc02      	bgt.n	8006334 <__sflush_r+0x20>
 800632e:	2000      	movs	r0, #0
 8006330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006336:	2e00      	cmp	r6, #0
 8006338:	d0f9      	beq.n	800632e <__sflush_r+0x1a>
 800633a:	2300      	movs	r3, #0
 800633c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006340:	682f      	ldr	r7, [r5, #0]
 8006342:	6a21      	ldr	r1, [r4, #32]
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	d032      	beq.n	80063ae <__sflush_r+0x9a>
 8006348:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	075a      	lsls	r2, r3, #29
 800634e:	d505      	bpl.n	800635c <__sflush_r+0x48>
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	1ac0      	subs	r0, r0, r3
 8006354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006356:	b10b      	cbz	r3, 800635c <__sflush_r+0x48>
 8006358:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	2300      	movs	r3, #0
 800635e:	4602      	mov	r2, r0
 8006360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006362:	6a21      	ldr	r1, [r4, #32]
 8006364:	4628      	mov	r0, r5
 8006366:	47b0      	blx	r6
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	d106      	bne.n	800637c <__sflush_r+0x68>
 800636e:	6829      	ldr	r1, [r5, #0]
 8006370:	291d      	cmp	r1, #29
 8006372:	d82b      	bhi.n	80063cc <__sflush_r+0xb8>
 8006374:	4a29      	ldr	r2, [pc, #164]	; (800641c <__sflush_r+0x108>)
 8006376:	410a      	asrs	r2, r1
 8006378:	07d6      	lsls	r6, r2, #31
 800637a:	d427      	bmi.n	80063cc <__sflush_r+0xb8>
 800637c:	2200      	movs	r2, #0
 800637e:	6062      	str	r2, [r4, #4]
 8006380:	04d9      	lsls	r1, r3, #19
 8006382:	6922      	ldr	r2, [r4, #16]
 8006384:	6022      	str	r2, [r4, #0]
 8006386:	d504      	bpl.n	8006392 <__sflush_r+0x7e>
 8006388:	1c42      	adds	r2, r0, #1
 800638a:	d101      	bne.n	8006390 <__sflush_r+0x7c>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b903      	cbnz	r3, 8006392 <__sflush_r+0x7e>
 8006390:	6560      	str	r0, [r4, #84]	; 0x54
 8006392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006394:	602f      	str	r7, [r5, #0]
 8006396:	2900      	cmp	r1, #0
 8006398:	d0c9      	beq.n	800632e <__sflush_r+0x1a>
 800639a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800639e:	4299      	cmp	r1, r3
 80063a0:	d002      	beq.n	80063a8 <__sflush_r+0x94>
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7ff f9e2 	bl	800576c <_free_r>
 80063a8:	2000      	movs	r0, #0
 80063aa:	6360      	str	r0, [r4, #52]	; 0x34
 80063ac:	e7c0      	b.n	8006330 <__sflush_r+0x1c>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b0      	blx	r6
 80063b4:	1c41      	adds	r1, r0, #1
 80063b6:	d1c8      	bne.n	800634a <__sflush_r+0x36>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0c5      	beq.n	800634a <__sflush_r+0x36>
 80063be:	2b1d      	cmp	r3, #29
 80063c0:	d001      	beq.n	80063c6 <__sflush_r+0xb2>
 80063c2:	2b16      	cmp	r3, #22
 80063c4:	d101      	bne.n	80063ca <__sflush_r+0xb6>
 80063c6:	602f      	str	r7, [r5, #0]
 80063c8:	e7b1      	b.n	800632e <__sflush_r+0x1a>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	e7ad      	b.n	8006330 <__sflush_r+0x1c>
 80063d4:	690f      	ldr	r7, [r1, #16]
 80063d6:	2f00      	cmp	r7, #0
 80063d8:	d0a9      	beq.n	800632e <__sflush_r+0x1a>
 80063da:	0793      	lsls	r3, r2, #30
 80063dc:	680e      	ldr	r6, [r1, #0]
 80063de:	bf08      	it	eq
 80063e0:	694b      	ldreq	r3, [r1, #20]
 80063e2:	600f      	str	r7, [r1, #0]
 80063e4:	bf18      	it	ne
 80063e6:	2300      	movne	r3, #0
 80063e8:	eba6 0807 	sub.w	r8, r6, r7
 80063ec:	608b      	str	r3, [r1, #8]
 80063ee:	f1b8 0f00 	cmp.w	r8, #0
 80063f2:	dd9c      	ble.n	800632e <__sflush_r+0x1a>
 80063f4:	6a21      	ldr	r1, [r4, #32]
 80063f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063f8:	4643      	mov	r3, r8
 80063fa:	463a      	mov	r2, r7
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b0      	blx	r6
 8006400:	2800      	cmp	r0, #0
 8006402:	dc06      	bgt.n	8006412 <__sflush_r+0xfe>
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	e78e      	b.n	8006330 <__sflush_r+0x1c>
 8006412:	4407      	add	r7, r0
 8006414:	eba8 0800 	sub.w	r8, r8, r0
 8006418:	e7e9      	b.n	80063ee <__sflush_r+0xda>
 800641a:	bf00      	nop
 800641c:	dfbffffe 	.word	0xdfbffffe

08006420 <_fflush_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	690b      	ldr	r3, [r1, #16]
 8006424:	4605      	mov	r5, r0
 8006426:	460c      	mov	r4, r1
 8006428:	b913      	cbnz	r3, 8006430 <_fflush_r+0x10>
 800642a:	2500      	movs	r5, #0
 800642c:	4628      	mov	r0, r5
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	b118      	cbz	r0, 800643a <_fflush_r+0x1a>
 8006432:	6a03      	ldr	r3, [r0, #32]
 8006434:	b90b      	cbnz	r3, 800643a <_fflush_r+0x1a>
 8006436:	f7fe fa03 	bl	8004840 <__sinit>
 800643a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f3      	beq.n	800642a <_fflush_r+0xa>
 8006442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006444:	07d0      	lsls	r0, r2, #31
 8006446:	d404      	bmi.n	8006452 <_fflush_r+0x32>
 8006448:	0599      	lsls	r1, r3, #22
 800644a:	d402      	bmi.n	8006452 <_fflush_r+0x32>
 800644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644e:	f7fe fb0e 	bl	8004a6e <__retarget_lock_acquire_recursive>
 8006452:	4628      	mov	r0, r5
 8006454:	4621      	mov	r1, r4
 8006456:	f7ff ff5d 	bl	8006314 <__sflush_r>
 800645a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800645c:	07da      	lsls	r2, r3, #31
 800645e:	4605      	mov	r5, r0
 8006460:	d4e4      	bmi.n	800642c <_fflush_r+0xc>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	059b      	lsls	r3, r3, #22
 8006466:	d4e1      	bmi.n	800642c <_fflush_r+0xc>
 8006468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646a:	f7fe fb01 	bl	8004a70 <__retarget_lock_release_recursive>
 800646e:	e7dd      	b.n	800642c <_fflush_r+0xc>

08006470 <memmove>:
 8006470:	4288      	cmp	r0, r1
 8006472:	b510      	push	{r4, lr}
 8006474:	eb01 0402 	add.w	r4, r1, r2
 8006478:	d902      	bls.n	8006480 <memmove+0x10>
 800647a:	4284      	cmp	r4, r0
 800647c:	4623      	mov	r3, r4
 800647e:	d807      	bhi.n	8006490 <memmove+0x20>
 8006480:	1e43      	subs	r3, r0, #1
 8006482:	42a1      	cmp	r1, r4
 8006484:	d008      	beq.n	8006498 <memmove+0x28>
 8006486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800648a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800648e:	e7f8      	b.n	8006482 <memmove+0x12>
 8006490:	4402      	add	r2, r0
 8006492:	4601      	mov	r1, r0
 8006494:	428a      	cmp	r2, r1
 8006496:	d100      	bne.n	800649a <memmove+0x2a>
 8006498:	bd10      	pop	{r4, pc}
 800649a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800649e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064a2:	e7f7      	b.n	8006494 <memmove+0x24>

080064a4 <_sbrk_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d06      	ldr	r5, [pc, #24]	; (80064c0 <_sbrk_r+0x1c>)
 80064a8:	2300      	movs	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	4608      	mov	r0, r1
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	f7fb f9a2 	bl	80017f8 <_sbrk>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_sbrk_r+0x1a>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_sbrk_r+0x1a>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	200003f8 	.word	0x200003f8

080064c4 <memcpy>:
 80064c4:	440a      	add	r2, r1
 80064c6:	4291      	cmp	r1, r2
 80064c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064cc:	d100      	bne.n	80064d0 <memcpy+0xc>
 80064ce:	4770      	bx	lr
 80064d0:	b510      	push	{r4, lr}
 80064d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064da:	4291      	cmp	r1, r2
 80064dc:	d1f9      	bne.n	80064d2 <memcpy+0xe>
 80064de:	bd10      	pop	{r4, pc}

080064e0 <__assert_func>:
 80064e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064e2:	4614      	mov	r4, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <__assert_func+0x2c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4605      	mov	r5, r0
 80064ec:	68d8      	ldr	r0, [r3, #12]
 80064ee:	b14c      	cbz	r4, 8006504 <__assert_func+0x24>
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <__assert_func+0x30>)
 80064f2:	9100      	str	r1, [sp, #0]
 80064f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <__assert_func+0x34>)
 80064fa:	462b      	mov	r3, r5
 80064fc:	f000 f872 	bl	80065e4 <fiprintf>
 8006500:	f000 f882 	bl	8006608 <abort>
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <__assert_func+0x38>)
 8006506:	461c      	mov	r4, r3
 8006508:	e7f3      	b.n	80064f2 <__assert_func+0x12>
 800650a:	bf00      	nop
 800650c:	2000006c 	.word	0x2000006c
 8006510:	08006df7 	.word	0x08006df7
 8006514:	08006e04 	.word	0x08006e04
 8006518:	08006e32 	.word	0x08006e32

0800651c <_calloc_r>:
 800651c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800651e:	fba1 2402 	umull	r2, r4, r1, r2
 8006522:	b94c      	cbnz	r4, 8006538 <_calloc_r+0x1c>
 8006524:	4611      	mov	r1, r2
 8006526:	9201      	str	r2, [sp, #4]
 8006528:	f7ff f994 	bl	8005854 <_malloc_r>
 800652c:	9a01      	ldr	r2, [sp, #4]
 800652e:	4605      	mov	r5, r0
 8006530:	b930      	cbnz	r0, 8006540 <_calloc_r+0x24>
 8006532:	4628      	mov	r0, r5
 8006534:	b003      	add	sp, #12
 8006536:	bd30      	pop	{r4, r5, pc}
 8006538:	220c      	movs	r2, #12
 800653a:	6002      	str	r2, [r0, #0]
 800653c:	2500      	movs	r5, #0
 800653e:	e7f8      	b.n	8006532 <_calloc_r+0x16>
 8006540:	4621      	mov	r1, r4
 8006542:	f7fe fa16 	bl	8004972 <memset>
 8006546:	e7f4      	b.n	8006532 <_calloc_r+0x16>

08006548 <__ascii_mbtowc>:
 8006548:	b082      	sub	sp, #8
 800654a:	b901      	cbnz	r1, 800654e <__ascii_mbtowc+0x6>
 800654c:	a901      	add	r1, sp, #4
 800654e:	b142      	cbz	r2, 8006562 <__ascii_mbtowc+0x1a>
 8006550:	b14b      	cbz	r3, 8006566 <__ascii_mbtowc+0x1e>
 8006552:	7813      	ldrb	r3, [r2, #0]
 8006554:	600b      	str	r3, [r1, #0]
 8006556:	7812      	ldrb	r2, [r2, #0]
 8006558:	1e10      	subs	r0, r2, #0
 800655a:	bf18      	it	ne
 800655c:	2001      	movne	r0, #1
 800655e:	b002      	add	sp, #8
 8006560:	4770      	bx	lr
 8006562:	4610      	mov	r0, r2
 8006564:	e7fb      	b.n	800655e <__ascii_mbtowc+0x16>
 8006566:	f06f 0001 	mvn.w	r0, #1
 800656a:	e7f8      	b.n	800655e <__ascii_mbtowc+0x16>

0800656c <_realloc_r>:
 800656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006570:	4680      	mov	r8, r0
 8006572:	4614      	mov	r4, r2
 8006574:	460e      	mov	r6, r1
 8006576:	b921      	cbnz	r1, 8006582 <_realloc_r+0x16>
 8006578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	4611      	mov	r1, r2
 800657e:	f7ff b969 	b.w	8005854 <_malloc_r>
 8006582:	b92a      	cbnz	r2, 8006590 <_realloc_r+0x24>
 8006584:	f7ff f8f2 	bl	800576c <_free_r>
 8006588:	4625      	mov	r5, r4
 800658a:	4628      	mov	r0, r5
 800658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006590:	f000 f841 	bl	8006616 <_malloc_usable_size_r>
 8006594:	4284      	cmp	r4, r0
 8006596:	4607      	mov	r7, r0
 8006598:	d802      	bhi.n	80065a0 <_realloc_r+0x34>
 800659a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800659e:	d812      	bhi.n	80065c6 <_realloc_r+0x5a>
 80065a0:	4621      	mov	r1, r4
 80065a2:	4640      	mov	r0, r8
 80065a4:	f7ff f956 	bl	8005854 <_malloc_r>
 80065a8:	4605      	mov	r5, r0
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d0ed      	beq.n	800658a <_realloc_r+0x1e>
 80065ae:	42bc      	cmp	r4, r7
 80065b0:	4622      	mov	r2, r4
 80065b2:	4631      	mov	r1, r6
 80065b4:	bf28      	it	cs
 80065b6:	463a      	movcs	r2, r7
 80065b8:	f7ff ff84 	bl	80064c4 <memcpy>
 80065bc:	4631      	mov	r1, r6
 80065be:	4640      	mov	r0, r8
 80065c0:	f7ff f8d4 	bl	800576c <_free_r>
 80065c4:	e7e1      	b.n	800658a <_realloc_r+0x1e>
 80065c6:	4635      	mov	r5, r6
 80065c8:	e7df      	b.n	800658a <_realloc_r+0x1e>

080065ca <__ascii_wctomb>:
 80065ca:	b149      	cbz	r1, 80065e0 <__ascii_wctomb+0x16>
 80065cc:	2aff      	cmp	r2, #255	; 0xff
 80065ce:	bf85      	ittet	hi
 80065d0:	238a      	movhi	r3, #138	; 0x8a
 80065d2:	6003      	strhi	r3, [r0, #0]
 80065d4:	700a      	strbls	r2, [r1, #0]
 80065d6:	f04f 30ff 	movhi.w	r0, #4294967295
 80065da:	bf98      	it	ls
 80065dc:	2001      	movls	r0, #1
 80065de:	4770      	bx	lr
 80065e0:	4608      	mov	r0, r1
 80065e2:	4770      	bx	lr

080065e4 <fiprintf>:
 80065e4:	b40e      	push	{r1, r2, r3}
 80065e6:	b503      	push	{r0, r1, lr}
 80065e8:	4601      	mov	r1, r0
 80065ea:	ab03      	add	r3, sp, #12
 80065ec:	4805      	ldr	r0, [pc, #20]	; (8006604 <fiprintf+0x20>)
 80065ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f2:	6800      	ldr	r0, [r0, #0]
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	f000 f83f 	bl	8006678 <_vfiprintf_r>
 80065fa:	b002      	add	sp, #8
 80065fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006600:	b003      	add	sp, #12
 8006602:	4770      	bx	lr
 8006604:	2000006c 	.word	0x2000006c

08006608 <abort>:
 8006608:	b508      	push	{r3, lr}
 800660a:	2006      	movs	r0, #6
 800660c:	f000 fa0c 	bl	8006a28 <raise>
 8006610:	2001      	movs	r0, #1
 8006612:	f7fb f879 	bl	8001708 <_exit>

08006616 <_malloc_usable_size_r>:
 8006616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661a:	1f18      	subs	r0, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfbc      	itt	lt
 8006620:	580b      	ldrlt	r3, [r1, r0]
 8006622:	18c0      	addlt	r0, r0, r3
 8006624:	4770      	bx	lr

08006626 <__sfputc_r>:
 8006626:	6893      	ldr	r3, [r2, #8]
 8006628:	3b01      	subs	r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	b410      	push	{r4}
 800662e:	6093      	str	r3, [r2, #8]
 8006630:	da08      	bge.n	8006644 <__sfputc_r+0x1e>
 8006632:	6994      	ldr	r4, [r2, #24]
 8006634:	42a3      	cmp	r3, r4
 8006636:	db01      	blt.n	800663c <__sfputc_r+0x16>
 8006638:	290a      	cmp	r1, #10
 800663a:	d103      	bne.n	8006644 <__sfputc_r+0x1e>
 800663c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006640:	f000 b934 	b.w	80068ac <__swbuf_r>
 8006644:	6813      	ldr	r3, [r2, #0]
 8006646:	1c58      	adds	r0, r3, #1
 8006648:	6010      	str	r0, [r2, #0]
 800664a:	7019      	strb	r1, [r3, #0]
 800664c:	4608      	mov	r0, r1
 800664e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006652:	4770      	bx	lr

08006654 <__sfputs_r>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	4606      	mov	r6, r0
 8006658:	460f      	mov	r7, r1
 800665a:	4614      	mov	r4, r2
 800665c:	18d5      	adds	r5, r2, r3
 800665e:	42ac      	cmp	r4, r5
 8006660:	d101      	bne.n	8006666 <__sfputs_r+0x12>
 8006662:	2000      	movs	r0, #0
 8006664:	e007      	b.n	8006676 <__sfputs_r+0x22>
 8006666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666a:	463a      	mov	r2, r7
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ffda 	bl	8006626 <__sfputc_r>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	d1f3      	bne.n	800665e <__sfputs_r+0xa>
 8006676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006678 <_vfiprintf_r>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	460d      	mov	r5, r1
 800667e:	b09d      	sub	sp, #116	; 0x74
 8006680:	4614      	mov	r4, r2
 8006682:	4698      	mov	r8, r3
 8006684:	4606      	mov	r6, r0
 8006686:	b118      	cbz	r0, 8006690 <_vfiprintf_r+0x18>
 8006688:	6a03      	ldr	r3, [r0, #32]
 800668a:	b90b      	cbnz	r3, 8006690 <_vfiprintf_r+0x18>
 800668c:	f7fe f8d8 	bl	8004840 <__sinit>
 8006690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006692:	07d9      	lsls	r1, r3, #31
 8006694:	d405      	bmi.n	80066a2 <_vfiprintf_r+0x2a>
 8006696:	89ab      	ldrh	r3, [r5, #12]
 8006698:	059a      	lsls	r2, r3, #22
 800669a:	d402      	bmi.n	80066a2 <_vfiprintf_r+0x2a>
 800669c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800669e:	f7fe f9e6 	bl	8004a6e <__retarget_lock_acquire_recursive>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	071b      	lsls	r3, r3, #28
 80066a6:	d501      	bpl.n	80066ac <_vfiprintf_r+0x34>
 80066a8:	692b      	ldr	r3, [r5, #16]
 80066aa:	b99b      	cbnz	r3, 80066d4 <_vfiprintf_r+0x5c>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f000 f93a 	bl	8006928 <__swsetup_r>
 80066b4:	b170      	cbz	r0, 80066d4 <_vfiprintf_r+0x5c>
 80066b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066b8:	07dc      	lsls	r4, r3, #31
 80066ba:	d504      	bpl.n	80066c6 <_vfiprintf_r+0x4e>
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	b01d      	add	sp, #116	; 0x74
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	0598      	lsls	r0, r3, #22
 80066ca:	d4f7      	bmi.n	80066bc <_vfiprintf_r+0x44>
 80066cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ce:	f7fe f9cf 	bl	8004a70 <__retarget_lock_release_recursive>
 80066d2:	e7f3      	b.n	80066bc <_vfiprintf_r+0x44>
 80066d4:	2300      	movs	r3, #0
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
 80066d8:	2320      	movs	r3, #32
 80066da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066de:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e2:	2330      	movs	r3, #48	; 0x30
 80066e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006898 <_vfiprintf_r+0x220>
 80066e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ec:	f04f 0901 	mov.w	r9, #1
 80066f0:	4623      	mov	r3, r4
 80066f2:	469a      	mov	sl, r3
 80066f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f8:	b10a      	cbz	r2, 80066fe <_vfiprintf_r+0x86>
 80066fa:	2a25      	cmp	r2, #37	; 0x25
 80066fc:	d1f9      	bne.n	80066f2 <_vfiprintf_r+0x7a>
 80066fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006702:	d00b      	beq.n	800671c <_vfiprintf_r+0xa4>
 8006704:	465b      	mov	r3, fp
 8006706:	4622      	mov	r2, r4
 8006708:	4629      	mov	r1, r5
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff ffa2 	bl	8006654 <__sfputs_r>
 8006710:	3001      	adds	r0, #1
 8006712:	f000 80a9 	beq.w	8006868 <_vfiprintf_r+0x1f0>
 8006716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006718:	445a      	add	r2, fp
 800671a:	9209      	str	r2, [sp, #36]	; 0x24
 800671c:	f89a 3000 	ldrb.w	r3, [sl]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a1 	beq.w	8006868 <_vfiprintf_r+0x1f0>
 8006726:	2300      	movs	r3, #0
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006730:	f10a 0a01 	add.w	sl, sl, #1
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673c:	931a      	str	r3, [sp, #104]	; 0x68
 800673e:	4654      	mov	r4, sl
 8006740:	2205      	movs	r2, #5
 8006742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006746:	4854      	ldr	r0, [pc, #336]	; (8006898 <_vfiprintf_r+0x220>)
 8006748:	f7f9 fd42 	bl	80001d0 <memchr>
 800674c:	9a04      	ldr	r2, [sp, #16]
 800674e:	b9d8      	cbnz	r0, 8006788 <_vfiprintf_r+0x110>
 8006750:	06d1      	lsls	r1, r2, #27
 8006752:	bf44      	itt	mi
 8006754:	2320      	movmi	r3, #32
 8006756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800675a:	0713      	lsls	r3, r2, #28
 800675c:	bf44      	itt	mi
 800675e:	232b      	movmi	r3, #43	; 0x2b
 8006760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006764:	f89a 3000 	ldrb.w	r3, [sl]
 8006768:	2b2a      	cmp	r3, #42	; 0x2a
 800676a:	d015      	beq.n	8006798 <_vfiprintf_r+0x120>
 800676c:	9a07      	ldr	r2, [sp, #28]
 800676e:	4654      	mov	r4, sl
 8006770:	2000      	movs	r0, #0
 8006772:	f04f 0c0a 	mov.w	ip, #10
 8006776:	4621      	mov	r1, r4
 8006778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677c:	3b30      	subs	r3, #48	; 0x30
 800677e:	2b09      	cmp	r3, #9
 8006780:	d94d      	bls.n	800681e <_vfiprintf_r+0x1a6>
 8006782:	b1b0      	cbz	r0, 80067b2 <_vfiprintf_r+0x13a>
 8006784:	9207      	str	r2, [sp, #28]
 8006786:	e014      	b.n	80067b2 <_vfiprintf_r+0x13a>
 8006788:	eba0 0308 	sub.w	r3, r0, r8
 800678c:	fa09 f303 	lsl.w	r3, r9, r3
 8006790:	4313      	orrs	r3, r2
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	46a2      	mov	sl, r4
 8006796:	e7d2      	b.n	800673e <_vfiprintf_r+0xc6>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	1d19      	adds	r1, r3, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	9103      	str	r1, [sp, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfbb      	ittet	lt
 80067a4:	425b      	neglt	r3, r3
 80067a6:	f042 0202 	orrlt.w	r2, r2, #2
 80067aa:	9307      	strge	r3, [sp, #28]
 80067ac:	9307      	strlt	r3, [sp, #28]
 80067ae:	bfb8      	it	lt
 80067b0:	9204      	strlt	r2, [sp, #16]
 80067b2:	7823      	ldrb	r3, [r4, #0]
 80067b4:	2b2e      	cmp	r3, #46	; 0x2e
 80067b6:	d10c      	bne.n	80067d2 <_vfiprintf_r+0x15a>
 80067b8:	7863      	ldrb	r3, [r4, #1]
 80067ba:	2b2a      	cmp	r3, #42	; 0x2a
 80067bc:	d134      	bne.n	8006828 <_vfiprintf_r+0x1b0>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	9203      	str	r2, [sp, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ce:	3402      	adds	r4, #2
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80068a8 <_vfiprintf_r+0x230>
 80067d6:	7821      	ldrb	r1, [r4, #0]
 80067d8:	2203      	movs	r2, #3
 80067da:	4650      	mov	r0, sl
 80067dc:	f7f9 fcf8 	bl	80001d0 <memchr>
 80067e0:	b138      	cbz	r0, 80067f2 <_vfiprintf_r+0x17a>
 80067e2:	9b04      	ldr	r3, [sp, #16]
 80067e4:	eba0 000a 	sub.w	r0, r0, sl
 80067e8:	2240      	movs	r2, #64	; 0x40
 80067ea:	4082      	lsls	r2, r0
 80067ec:	4313      	orrs	r3, r2
 80067ee:	3401      	adds	r4, #1
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f6:	4829      	ldr	r0, [pc, #164]	; (800689c <_vfiprintf_r+0x224>)
 80067f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fc:	2206      	movs	r2, #6
 80067fe:	f7f9 fce7 	bl	80001d0 <memchr>
 8006802:	2800      	cmp	r0, #0
 8006804:	d03f      	beq.n	8006886 <_vfiprintf_r+0x20e>
 8006806:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <_vfiprintf_r+0x228>)
 8006808:	bb1b      	cbnz	r3, 8006852 <_vfiprintf_r+0x1da>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	3307      	adds	r3, #7
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	3308      	adds	r3, #8
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006818:	443b      	add	r3, r7
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	e768      	b.n	80066f0 <_vfiprintf_r+0x78>
 800681e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006822:	460c      	mov	r4, r1
 8006824:	2001      	movs	r0, #1
 8006826:	e7a6      	b.n	8006776 <_vfiprintf_r+0xfe>
 8006828:	2300      	movs	r3, #0
 800682a:	3401      	adds	r4, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	4619      	mov	r1, r3
 8006830:	f04f 0c0a 	mov.w	ip, #10
 8006834:	4620      	mov	r0, r4
 8006836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683a:	3a30      	subs	r2, #48	; 0x30
 800683c:	2a09      	cmp	r2, #9
 800683e:	d903      	bls.n	8006848 <_vfiprintf_r+0x1d0>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0c6      	beq.n	80067d2 <_vfiprintf_r+0x15a>
 8006844:	9105      	str	r1, [sp, #20]
 8006846:	e7c4      	b.n	80067d2 <_vfiprintf_r+0x15a>
 8006848:	fb0c 2101 	mla	r1, ip, r1, r2
 800684c:	4604      	mov	r4, r0
 800684e:	2301      	movs	r3, #1
 8006850:	e7f0      	b.n	8006834 <_vfiprintf_r+0x1bc>
 8006852:	ab03      	add	r3, sp, #12
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	462a      	mov	r2, r5
 8006858:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <_vfiprintf_r+0x22c>)
 800685a:	a904      	add	r1, sp, #16
 800685c:	4630      	mov	r0, r6
 800685e:	f7fd fb9d 	bl	8003f9c <_printf_float>
 8006862:	4607      	mov	r7, r0
 8006864:	1c78      	adds	r0, r7, #1
 8006866:	d1d6      	bne.n	8006816 <_vfiprintf_r+0x19e>
 8006868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800686a:	07d9      	lsls	r1, r3, #31
 800686c:	d405      	bmi.n	800687a <_vfiprintf_r+0x202>
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d402      	bmi.n	800687a <_vfiprintf_r+0x202>
 8006874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006876:	f7fe f8fb 	bl	8004a70 <__retarget_lock_release_recursive>
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	065b      	lsls	r3, r3, #25
 800687e:	f53f af1d 	bmi.w	80066bc <_vfiprintf_r+0x44>
 8006882:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006884:	e71c      	b.n	80066c0 <_vfiprintf_r+0x48>
 8006886:	ab03      	add	r3, sp, #12
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	462a      	mov	r2, r5
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <_vfiprintf_r+0x22c>)
 800688e:	a904      	add	r1, sp, #16
 8006890:	4630      	mov	r0, r6
 8006892:	f7fd fe27 	bl	80044e4 <_printf_i>
 8006896:	e7e4      	b.n	8006862 <_vfiprintf_r+0x1ea>
 8006898:	08006ddc 	.word	0x08006ddc
 800689c:	08006de6 	.word	0x08006de6
 80068a0:	08003f9d 	.word	0x08003f9d
 80068a4:	08006655 	.word	0x08006655
 80068a8:	08006de2 	.word	0x08006de2

080068ac <__swbuf_r>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	460e      	mov	r6, r1
 80068b0:	4614      	mov	r4, r2
 80068b2:	4605      	mov	r5, r0
 80068b4:	b118      	cbz	r0, 80068be <__swbuf_r+0x12>
 80068b6:	6a03      	ldr	r3, [r0, #32]
 80068b8:	b90b      	cbnz	r3, 80068be <__swbuf_r+0x12>
 80068ba:	f7fd ffc1 	bl	8004840 <__sinit>
 80068be:	69a3      	ldr	r3, [r4, #24]
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	071a      	lsls	r2, r3, #28
 80068c6:	d525      	bpl.n	8006914 <__swbuf_r+0x68>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	b31b      	cbz	r3, 8006914 <__swbuf_r+0x68>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	6922      	ldr	r2, [r4, #16]
 80068d0:	1a98      	subs	r0, r3, r2
 80068d2:	6963      	ldr	r3, [r4, #20]
 80068d4:	b2f6      	uxtb	r6, r6
 80068d6:	4283      	cmp	r3, r0
 80068d8:	4637      	mov	r7, r6
 80068da:	dc04      	bgt.n	80068e6 <__swbuf_r+0x3a>
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f7ff fd9e 	bl	8006420 <_fflush_r>
 80068e4:	b9e0      	cbnz	r0, 8006920 <__swbuf_r+0x74>
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	701e      	strb	r6, [r3, #0]
 80068f4:	6962      	ldr	r2, [r4, #20]
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d004      	beq.n	8006906 <__swbuf_r+0x5a>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	07db      	lsls	r3, r3, #31
 8006900:	d506      	bpl.n	8006910 <__swbuf_r+0x64>
 8006902:	2e0a      	cmp	r6, #10
 8006904:	d104      	bne.n	8006910 <__swbuf_r+0x64>
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f7ff fd89 	bl	8006420 <_fflush_r>
 800690e:	b938      	cbnz	r0, 8006920 <__swbuf_r+0x74>
 8006910:	4638      	mov	r0, r7
 8006912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f806 	bl	8006928 <__swsetup_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	d0d5      	beq.n	80068cc <__swbuf_r+0x20>
 8006920:	f04f 37ff 	mov.w	r7, #4294967295
 8006924:	e7f4      	b.n	8006910 <__swbuf_r+0x64>
	...

08006928 <__swsetup_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4b2a      	ldr	r3, [pc, #168]	; (80069d4 <__swsetup_r+0xac>)
 800692c:	4605      	mov	r5, r0
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	460c      	mov	r4, r1
 8006932:	b118      	cbz	r0, 800693c <__swsetup_r+0x14>
 8006934:	6a03      	ldr	r3, [r0, #32]
 8006936:	b90b      	cbnz	r3, 800693c <__swsetup_r+0x14>
 8006938:	f7fd ff82 	bl	8004840 <__sinit>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006942:	0718      	lsls	r0, r3, #28
 8006944:	d422      	bmi.n	800698c <__swsetup_r+0x64>
 8006946:	06d9      	lsls	r1, r3, #27
 8006948:	d407      	bmi.n	800695a <__swsetup_r+0x32>
 800694a:	2309      	movs	r3, #9
 800694c:	602b      	str	r3, [r5, #0]
 800694e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	e034      	b.n	80069c4 <__swsetup_r+0x9c>
 800695a:	0758      	lsls	r0, r3, #29
 800695c:	d512      	bpl.n	8006984 <__swsetup_r+0x5c>
 800695e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006960:	b141      	cbz	r1, 8006974 <__swsetup_r+0x4c>
 8006962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006966:	4299      	cmp	r1, r3
 8006968:	d002      	beq.n	8006970 <__swsetup_r+0x48>
 800696a:	4628      	mov	r0, r5
 800696c:	f7fe fefe 	bl	800576c <_free_r>
 8006970:	2300      	movs	r3, #0
 8006972:	6363      	str	r3, [r4, #52]	; 0x34
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	2300      	movs	r3, #0
 800697e:	6063      	str	r3, [r4, #4]
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f043 0308 	orr.w	r3, r3, #8
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	b94b      	cbnz	r3, 80069a4 <__swsetup_r+0x7c>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699a:	d003      	beq.n	80069a4 <__swsetup_r+0x7c>
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f884 	bl	8006aac <__smakebuf_r>
 80069a4:	89a0      	ldrh	r0, [r4, #12]
 80069a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069aa:	f010 0301 	ands.w	r3, r0, #1
 80069ae:	d00a      	beq.n	80069c6 <__swsetup_r+0x9e>
 80069b0:	2300      	movs	r3, #0
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	6963      	ldr	r3, [r4, #20]
 80069b6:	425b      	negs	r3, r3
 80069b8:	61a3      	str	r3, [r4, #24]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	b943      	cbnz	r3, 80069d0 <__swsetup_r+0xa8>
 80069be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c2:	d1c4      	bne.n	800694e <__swsetup_r+0x26>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	0781      	lsls	r1, r0, #30
 80069c8:	bf58      	it	pl
 80069ca:	6963      	ldrpl	r3, [r4, #20]
 80069cc:	60a3      	str	r3, [r4, #8]
 80069ce:	e7f4      	b.n	80069ba <__swsetup_r+0x92>
 80069d0:	2000      	movs	r0, #0
 80069d2:	e7f7      	b.n	80069c4 <__swsetup_r+0x9c>
 80069d4:	2000006c 	.word	0x2000006c

080069d8 <_raise_r>:
 80069d8:	291f      	cmp	r1, #31
 80069da:	b538      	push	{r3, r4, r5, lr}
 80069dc:	4604      	mov	r4, r0
 80069de:	460d      	mov	r5, r1
 80069e0:	d904      	bls.n	80069ec <_raise_r+0x14>
 80069e2:	2316      	movs	r3, #22
 80069e4:	6003      	str	r3, [r0, #0]
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80069ee:	b112      	cbz	r2, 80069f6 <_raise_r+0x1e>
 80069f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069f4:	b94b      	cbnz	r3, 8006a0a <_raise_r+0x32>
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 f830 	bl	8006a5c <_getpid_r>
 80069fc:	462a      	mov	r2, r5
 80069fe:	4601      	mov	r1, r0
 8006a00:	4620      	mov	r0, r4
 8006a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a06:	f000 b817 	b.w	8006a38 <_kill_r>
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d00a      	beq.n	8006a24 <_raise_r+0x4c>
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	d103      	bne.n	8006a1a <_raise_r+0x42>
 8006a12:	2316      	movs	r3, #22
 8006a14:	6003      	str	r3, [r0, #0]
 8006a16:	2001      	movs	r0, #1
 8006a18:	e7e7      	b.n	80069ea <_raise_r+0x12>
 8006a1a:	2400      	movs	r4, #0
 8006a1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a20:	4628      	mov	r0, r5
 8006a22:	4798      	blx	r3
 8006a24:	2000      	movs	r0, #0
 8006a26:	e7e0      	b.n	80069ea <_raise_r+0x12>

08006a28 <raise>:
 8006a28:	4b02      	ldr	r3, [pc, #8]	; (8006a34 <raise+0xc>)
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	f7ff bfd3 	b.w	80069d8 <_raise_r>
 8006a32:	bf00      	nop
 8006a34:	2000006c 	.word	0x2000006c

08006a38 <_kill_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d07      	ldr	r5, [pc, #28]	; (8006a58 <_kill_r+0x20>)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4604      	mov	r4, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	4611      	mov	r1, r2
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	f7fa fe4f 	bl	80016e8 <_kill>
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d102      	bne.n	8006a54 <_kill_r+0x1c>
 8006a4e:	682b      	ldr	r3, [r5, #0]
 8006a50:	b103      	cbz	r3, 8006a54 <_kill_r+0x1c>
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	200003f8 	.word	0x200003f8

08006a5c <_getpid_r>:
 8006a5c:	f7fa be3c 	b.w	80016d8 <_getpid>

08006a60 <__swhatbuf_r>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	460c      	mov	r4, r1
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	b096      	sub	sp, #88	; 0x58
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	461e      	mov	r6, r3
 8006a70:	da0d      	bge.n	8006a8e <__swhatbuf_r+0x2e>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	bf0c      	ite	eq
 8006a7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a82:	2340      	movne	r3, #64	; 0x40
 8006a84:	2000      	movs	r0, #0
 8006a86:	6031      	str	r1, [r6, #0]
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	b016      	add	sp, #88	; 0x58
 8006a8c:	bd70      	pop	{r4, r5, r6, pc}
 8006a8e:	466a      	mov	r2, sp
 8006a90:	f000 f848 	bl	8006b24 <_fstat_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	dbec      	blt.n	8006a72 <__swhatbuf_r+0x12>
 8006a98:	9901      	ldr	r1, [sp, #4]
 8006a9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006aa2:	4259      	negs	r1, r3
 8006aa4:	4159      	adcs	r1, r3
 8006aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aaa:	e7eb      	b.n	8006a84 <__swhatbuf_r+0x24>

08006aac <__smakebuf_r>:
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab0:	079d      	lsls	r5, r3, #30
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	d507      	bpl.n	8006ac8 <__smakebuf_r+0x1c>
 8006ab8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6163      	str	r3, [r4, #20]
 8006ac4:	b002      	add	sp, #8
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	ab01      	add	r3, sp, #4
 8006aca:	466a      	mov	r2, sp
 8006acc:	f7ff ffc8 	bl	8006a60 <__swhatbuf_r>
 8006ad0:	9900      	ldr	r1, [sp, #0]
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7fe febd 	bl	8005854 <_malloc_r>
 8006ada:	b948      	cbnz	r0, 8006af0 <__smakebuf_r+0x44>
 8006adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae0:	059a      	lsls	r2, r3, #22
 8006ae2:	d4ef      	bmi.n	8006ac4 <__smakebuf_r+0x18>
 8006ae4:	f023 0303 	bic.w	r3, r3, #3
 8006ae8:	f043 0302 	orr.w	r3, r3, #2
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	e7e3      	b.n	8006ab8 <__smakebuf_r+0xc>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	6020      	str	r0, [r4, #0]
 8006af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	9b00      	ldr	r3, [sp, #0]
 8006afc:	6163      	str	r3, [r4, #20]
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	6120      	str	r0, [r4, #16]
 8006b02:	b15b      	cbz	r3, 8006b1c <__smakebuf_r+0x70>
 8006b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 f81d 	bl	8006b48 <_isatty_r>
 8006b0e:	b128      	cbz	r0, 8006b1c <__smakebuf_r+0x70>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	431d      	orrs	r5, r3
 8006b20:	81a5      	strh	r5, [r4, #12]
 8006b22:	e7cf      	b.n	8006ac4 <__smakebuf_r+0x18>

08006b24 <_fstat_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	; (8006b44 <_fstat_r+0x20>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	f7fa fe38 	bl	80017a6 <_fstat>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d102      	bne.n	8006b40 <_fstat_r+0x1c>
 8006b3a:	682b      	ldr	r3, [r5, #0]
 8006b3c:	b103      	cbz	r3, 8006b40 <_fstat_r+0x1c>
 8006b3e:	6023      	str	r3, [r4, #0]
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	200003f8 	.word	0x200003f8

08006b48 <_isatty_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	; (8006b64 <_isatty_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fa fe37 	bl	80017c6 <_isatty>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_isatty_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_isatty_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	200003f8 	.word	0x200003f8

08006b68 <_init>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	bf00      	nop
 8006b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6e:	bc08      	pop	{r3}
 8006b70:	469e      	mov	lr, r3
 8006b72:	4770      	bx	lr

08006b74 <_fini>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	bf00      	nop
 8006b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7a:	bc08      	pop	{r3}
 8006b7c:	469e      	mov	lr, r3
 8006b7e:	4770      	bx	lr
